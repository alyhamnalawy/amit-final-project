
Final_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005042  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000017e  00800060  00005042  000050d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  008001de  008001de  00005254  2**0
                  ALLOC
  3 .stab         00003a8c  00000000  00000000  00005254  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001ee3  00000000  00000000  00008ce0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__vector_1>
       8:	0c 94 92 00 	jmp	0x124	; 0x124 <__vector_2>
       c:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 63 02 	jmp	0x4c6	; 0x4c6 <__vector_9>
      28:	0c 94 01 03 	jmp	0x602	; 0x602 <__vector_10>
      2c:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e4       	ldi	r30, 0x42	; 66
      68:	f0 e5       	ldi	r31, 0x50	; 80
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3d       	cpi	r26, 0xDE	; 222
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae ed       	ldi	r26, 0xDE	; 222
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 3e       	cpi	r26, 0xEB	; 235
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 4a 17 	call	0x2e94	; 0x2e94 <main>
      8a:	0c 94 1f 28 	jmp	0x503e	; 0x503e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <init_INT0>:
void(*p2f_INT0)(void);
void(*p2f_INT1)(void);
void(*p2f_INT2)(void);

void init_INT0()
{
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GICR,INT0);
      9a:	ab e5       	ldi	r26, 0x5B	; 91
      9c:	b0 e0       	ldi	r27, 0x00	; 0
      9e:	eb e5       	ldi	r30, 0x5B	; 91
      a0:	f0 e0       	ldi	r31, 0x00	; 0
      a2:	80 81       	ld	r24, Z
      a4:	80 64       	ori	r24, 0x40	; 64
      a6:	8c 93       	st	X, r24

	SET_BIT(MCUCR,ISC00);
      a8:	a5 e5       	ldi	r26, 0x55	; 85
      aa:	b0 e0       	ldi	r27, 0x00	; 0
      ac:	e5 e5       	ldi	r30, 0x55	; 85
      ae:	f0 e0       	ldi	r31, 0x00	; 0
      b0:	80 81       	ld	r24, Z
      b2:	81 60       	ori	r24, 0x01	; 1
      b4:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,ISC01);
      b6:	a5 e5       	ldi	r26, 0x55	; 85
      b8:	b0 e0       	ldi	r27, 0x00	; 0
      ba:	e5 e5       	ldi	r30, 0x55	; 85
      bc:	f0 e0       	ldi	r31, 0x00	; 0
      be:	80 81       	ld	r24, Z
      c0:	8d 7f       	andi	r24, 0xFD	; 253
      c2:	8c 93       	st	X, r24
}
      c4:	cf 91       	pop	r28
      c6:	df 91       	pop	r29
      c8:	08 95       	ret

000000ca <__vector_1>:
ISR(INT0_vect)
{
      ca:	1f 92       	push	r1
      cc:	0f 92       	push	r0
      ce:	0f b6       	in	r0, 0x3f	; 63
      d0:	0f 92       	push	r0
      d2:	11 24       	eor	r1, r1
      d4:	2f 93       	push	r18
      d6:	3f 93       	push	r19
      d8:	4f 93       	push	r20
      da:	5f 93       	push	r21
      dc:	6f 93       	push	r22
      de:	7f 93       	push	r23
      e0:	8f 93       	push	r24
      e2:	9f 93       	push	r25
      e4:	af 93       	push	r26
      e6:	bf 93       	push	r27
      e8:	ef 93       	push	r30
      ea:	ff 93       	push	r31
      ec:	df 93       	push	r29
      ee:	cf 93       	push	r28
      f0:	cd b7       	in	r28, 0x3d	; 61
      f2:	de b7       	in	r29, 0x3e	; 62
	p2f_INT0();
      f4:	e0 91 e3 01 	lds	r30, 0x01E3
      f8:	f0 91 e4 01 	lds	r31, 0x01E4
      fc:	09 95       	icall
}
      fe:	cf 91       	pop	r28
     100:	df 91       	pop	r29
     102:	ff 91       	pop	r31
     104:	ef 91       	pop	r30
     106:	bf 91       	pop	r27
     108:	af 91       	pop	r26
     10a:	9f 91       	pop	r25
     10c:	8f 91       	pop	r24
     10e:	7f 91       	pop	r23
     110:	6f 91       	pop	r22
     112:	5f 91       	pop	r21
     114:	4f 91       	pop	r20
     116:	3f 91       	pop	r19
     118:	2f 91       	pop	r18
     11a:	0f 90       	pop	r0
     11c:	0f be       	out	0x3f, r0	; 63
     11e:	0f 90       	pop	r0
     120:	1f 90       	pop	r1
     122:	18 95       	reti

00000124 <__vector_2>:
ISR(INT1_vect)
{
     124:	1f 92       	push	r1
     126:	0f 92       	push	r0
     128:	0f b6       	in	r0, 0x3f	; 63
     12a:	0f 92       	push	r0
     12c:	11 24       	eor	r1, r1
     12e:	2f 93       	push	r18
     130:	3f 93       	push	r19
     132:	4f 93       	push	r20
     134:	5f 93       	push	r21
     136:	6f 93       	push	r22
     138:	7f 93       	push	r23
     13a:	8f 93       	push	r24
     13c:	9f 93       	push	r25
     13e:	af 93       	push	r26
     140:	bf 93       	push	r27
     142:	ef 93       	push	r30
     144:	ff 93       	push	r31
     146:	df 93       	push	r29
     148:	cf 93       	push	r28
     14a:	cd b7       	in	r28, 0x3d	; 61
     14c:	de b7       	in	r29, 0x3e	; 62
	p2f_INT1();
     14e:	e0 91 df 01 	lds	r30, 0x01DF
     152:	f0 91 e0 01 	lds	r31, 0x01E0
     156:	09 95       	icall
}
     158:	cf 91       	pop	r28
     15a:	df 91       	pop	r29
     15c:	ff 91       	pop	r31
     15e:	ef 91       	pop	r30
     160:	bf 91       	pop	r27
     162:	af 91       	pop	r26
     164:	9f 91       	pop	r25
     166:	8f 91       	pop	r24
     168:	7f 91       	pop	r23
     16a:	6f 91       	pop	r22
     16c:	5f 91       	pop	r21
     16e:	4f 91       	pop	r20
     170:	3f 91       	pop	r19
     172:	2f 91       	pop	r18
     174:	0f 90       	pop	r0
     176:	0f be       	out	0x3f, r0	; 63
     178:	0f 90       	pop	r0
     17a:	1f 90       	pop	r1
     17c:	18 95       	reti

0000017e <__vector_3>:
ISR(INT2_vect)
{
     17e:	1f 92       	push	r1
     180:	0f 92       	push	r0
     182:	0f b6       	in	r0, 0x3f	; 63
     184:	0f 92       	push	r0
     186:	11 24       	eor	r1, r1
     188:	2f 93       	push	r18
     18a:	3f 93       	push	r19
     18c:	4f 93       	push	r20
     18e:	5f 93       	push	r21
     190:	6f 93       	push	r22
     192:	7f 93       	push	r23
     194:	8f 93       	push	r24
     196:	9f 93       	push	r25
     198:	af 93       	push	r26
     19a:	bf 93       	push	r27
     19c:	ef 93       	push	r30
     19e:	ff 93       	push	r31
     1a0:	df 93       	push	r29
     1a2:	cf 93       	push	r28
     1a4:	cd b7       	in	r28, 0x3d	; 61
     1a6:	de b7       	in	r29, 0x3e	; 62
	p2f_INT2();
     1a8:	e0 91 e1 01 	lds	r30, 0x01E1
     1ac:	f0 91 e2 01 	lds	r31, 0x01E2
     1b0:	09 95       	icall
}
     1b2:	cf 91       	pop	r28
     1b4:	df 91       	pop	r29
     1b6:	ff 91       	pop	r31
     1b8:	ef 91       	pop	r30
     1ba:	bf 91       	pop	r27
     1bc:	af 91       	pop	r26
     1be:	9f 91       	pop	r25
     1c0:	8f 91       	pop	r24
     1c2:	7f 91       	pop	r23
     1c4:	6f 91       	pop	r22
     1c6:	5f 91       	pop	r21
     1c8:	4f 91       	pop	r20
     1ca:	3f 91       	pop	r19
     1cc:	2f 91       	pop	r18
     1ce:	0f 90       	pop	r0
     1d0:	0f be       	out	0x3f, r0	; 63
     1d2:	0f 90       	pop	r0
     1d4:	1f 90       	pop	r1
     1d6:	18 95       	reti

000001d8 <setcallback_INT0>:

void setcallback_INT0(void(*p2func)(void))
{
     1d8:	df 93       	push	r29
     1da:	cf 93       	push	r28
     1dc:	00 d0       	rcall	.+0      	; 0x1de <setcallback_INT0+0x6>
     1de:	cd b7       	in	r28, 0x3d	; 61
     1e0:	de b7       	in	r29, 0x3e	; 62
     1e2:	9a 83       	std	Y+2, r25	; 0x02
     1e4:	89 83       	std	Y+1, r24	; 0x01
	p2f_INT0=p2func;
     1e6:	89 81       	ldd	r24, Y+1	; 0x01
     1e8:	9a 81       	ldd	r25, Y+2	; 0x02
     1ea:	90 93 e4 01 	sts	0x01E4, r25
     1ee:	80 93 e3 01 	sts	0x01E3, r24
}
     1f2:	0f 90       	pop	r0
     1f4:	0f 90       	pop	r0
     1f6:	cf 91       	pop	r28
     1f8:	df 91       	pop	r29
     1fa:	08 95       	ret

000001fc <setcallback_INT1>:
void setcallback_INT1(void(*p2func)(void))
{
     1fc:	df 93       	push	r29
     1fe:	cf 93       	push	r28
     200:	00 d0       	rcall	.+0      	; 0x202 <setcallback_INT1+0x6>
     202:	cd b7       	in	r28, 0x3d	; 61
     204:	de b7       	in	r29, 0x3e	; 62
     206:	9a 83       	std	Y+2, r25	; 0x02
     208:	89 83       	std	Y+1, r24	; 0x01
	p2f_INT1=p2func;
     20a:	89 81       	ldd	r24, Y+1	; 0x01
     20c:	9a 81       	ldd	r25, Y+2	; 0x02
     20e:	90 93 e0 01 	sts	0x01E0, r25
     212:	80 93 df 01 	sts	0x01DF, r24
}
     216:	0f 90       	pop	r0
     218:	0f 90       	pop	r0
     21a:	cf 91       	pop	r28
     21c:	df 91       	pop	r29
     21e:	08 95       	ret

00000220 <setcallback_INT2>:
void setcallback_INT2(void(*p2func)(void))
{
     220:	df 93       	push	r29
     222:	cf 93       	push	r28
     224:	00 d0       	rcall	.+0      	; 0x226 <setcallback_INT2+0x6>
     226:	cd b7       	in	r28, 0x3d	; 61
     228:	de b7       	in	r29, 0x3e	; 62
     22a:	9a 83       	std	Y+2, r25	; 0x02
     22c:	89 83       	std	Y+1, r24	; 0x01
	p2f_INT2=p2func;
     22e:	89 81       	ldd	r24, Y+1	; 0x01
     230:	9a 81       	ldd	r25, Y+2	; 0x02
     232:	90 93 e2 01 	sts	0x01E2, r25
     236:	80 93 e1 01 	sts	0x01E1, r24
}
     23a:	0f 90       	pop	r0
     23c:	0f 90       	pop	r0
     23e:	cf 91       	pop	r28
     240:	df 91       	pop	r29
     242:	08 95       	ret

00000244 <timer1_init>:
 *      Author: Ali Ehab
 */
#include "TIMER_1.h"
uint8_t count = 0;
void timer1_init(unsigned short b,unsigned short c,unsigned short a,unsigned long long *high,unsigned long long *period)
{
     244:	0f 93       	push	r16
     246:	1f 93       	push	r17
     248:	df 93       	push	r29
     24a:	cf 93       	push	r28
     24c:	cd b7       	in	r28, 0x3d	; 61
     24e:	de b7       	in	r29, 0x3e	; 62
     250:	68 97       	sbiw	r28, 0x18	; 24
     252:	0f b6       	in	r0, 0x3f	; 63
     254:	f8 94       	cli
     256:	de bf       	out	0x3e, r29	; 62
     258:	0f be       	out	0x3f, r0	; 63
     25a:	cd bf       	out	0x3d, r28	; 61
     25c:	98 8b       	std	Y+16, r25	; 0x10
     25e:	8f 87       	std	Y+15, r24	; 0x0f
     260:	7a 8b       	std	Y+18, r23	; 0x12
     262:	69 8b       	std	Y+17, r22	; 0x11
     264:	5c 8b       	std	Y+20, r21	; 0x14
     266:	4b 8b       	std	Y+19, r20	; 0x13
     268:	3e 8b       	std	Y+22, r19	; 0x16
     26a:	2d 8b       	std	Y+21, r18	; 0x15
     26c:	18 8f       	std	Y+24, r17	; 0x18
     26e:	0f 8b       	std	Y+23, r16	; 0x17

		        TCCR1B = 0x41;  	/* Rising edge, no prescaler */
     270:	ee e4       	ldi	r30, 0x4E	; 78
     272:	f0 e0       	ldi	r31, 0x00	; 0
     274:	81 e4       	ldi	r24, 0x41	; 65
     276:	80 83       	st	Z, r24
			    SET_BIT(TIFR,ICF1);  	/* Clear ICF (Input Capture flag) flag */
     278:	a8 e5       	ldi	r26, 0x58	; 88
     27a:	b0 e0       	ldi	r27, 0x00	; 0
     27c:	e8 e5       	ldi	r30, 0x58	; 88
     27e:	f0 e0       	ldi	r31, 0x00	; 0
     280:	80 81       	ld	r24, Z
     282:	80 62       	ori	r24, 0x20	; 32
     284:	8c 93       	st	X, r24
				while (GET_BIT(TIFR,ICF1)== 0);
     286:	e8 e5       	ldi	r30, 0x58	; 88
     288:	f0 e0       	ldi	r31, 0x00	; 0
     28a:	80 81       	ld	r24, Z
     28c:	82 95       	swap	r24
     28e:	86 95       	lsr	r24
     290:	87 70       	andi	r24, 0x07	; 7
     292:	88 2f       	mov	r24, r24
     294:	90 e0       	ldi	r25, 0x00	; 0
     296:	81 70       	andi	r24, 0x01	; 1
     298:	90 70       	andi	r25, 0x00	; 0
     29a:	00 97       	sbiw	r24, 0x00	; 0
     29c:	a1 f3       	breq	.-24     	; 0x286 <timer1_init+0x42>
				a = ICR1;
     29e:	e6 e4       	ldi	r30, 0x46	; 70
     2a0:	f0 e0       	ldi	r31, 0x00	; 0
     2a2:	80 81       	ld	r24, Z
     2a4:	91 81       	ldd	r25, Z+1	; 0x01
     2a6:	9c 8b       	std	Y+20, r25	; 0x14
     2a8:	8b 8b       	std	Y+19, r24	; 0x13
				TCCR1B = 0x01;  	/* Falling edge, no prescaler */
     2aa:	ee e4       	ldi	r30, 0x4E	; 78
     2ac:	f0 e0       	ldi	r31, 0x00	; 0
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	80 83       	st	Z, r24
				TCNT1=0;
     2b2:	ec e4       	ldi	r30, 0x4C	; 76
     2b4:	f0 e0       	ldi	r31, 0x00	; 0
     2b6:	11 82       	std	Z+1, r1	; 0x01
     2b8:	10 82       	st	Z, r1
				count=0;             /*clear the counter*/
     2ba:	10 92 de 01 	sts	0x01DE, r1
				TIFR = (1<<ICF1);  	/* Clear ICF flag */
     2be:	e8 e5       	ldi	r30, 0x58	; 88
     2c0:	f0 e0       	ldi	r31, 0x00	; 0
     2c2:	80 e2       	ldi	r24, 0x20	; 32
     2c4:	80 83       	st	Z, r24
				while (GET_BIT(TIFR,ICF1) == 0);
     2c6:	e8 e5       	ldi	r30, 0x58	; 88
     2c8:	f0 e0       	ldi	r31, 0x00	; 0
     2ca:	80 81       	ld	r24, Z
     2cc:	82 95       	swap	r24
     2ce:	86 95       	lsr	r24
     2d0:	87 70       	andi	r24, 0x07	; 7
     2d2:	88 2f       	mov	r24, r24
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	81 70       	andi	r24, 0x01	; 1
     2d8:	90 70       	andi	r25, 0x00	; 0
     2da:	00 97       	sbiw	r24, 0x00	; 0
     2dc:	a1 f3       	breq	.-24     	; 0x2c6 <timer1_init+0x82>
				b = ICR1;  		/* Take value of capture register */
     2de:	e6 e4       	ldi	r30, 0x46	; 70
     2e0:	f0 e0       	ldi	r31, 0x00	; 0
     2e2:	80 81       	ld	r24, Z
     2e4:	91 81       	ldd	r25, Z+1	; 0x01
     2e6:	98 8b       	std	Y+16, r25	; 0x10
     2e8:	8f 87       	std	Y+15, r24	; 0x0f
				TCCR1B = 0x41;  	/* Rising edge, no prescaler */
     2ea:	ee e4       	ldi	r30, 0x4E	; 78
     2ec:	f0 e0       	ldi	r31, 0x00	; 0
     2ee:	81 e4       	ldi	r24, 0x41	; 65
     2f0:	80 83       	st	Z, r24
				SET_BIT(TIFR,ICF1); ;  	/* Clear ICF flag */
     2f2:	a8 e5       	ldi	r26, 0x58	; 88
     2f4:	b0 e0       	ldi	r27, 0x00	; 0
     2f6:	e8 e5       	ldi	r30, 0x58	; 88
     2f8:	f0 e0       	ldi	r31, 0x00	; 0
     2fa:	80 81       	ld	r24, Z
     2fc:	80 62       	ori	r24, 0x20	; 32
     2fe:	8c 93       	st	X, r24
				while (GET_BIT(TIFR,ICF1) == 0);
     300:	e8 e5       	ldi	r30, 0x58	; 88
     302:	f0 e0       	ldi	r31, 0x00	; 0
     304:	80 81       	ld	r24, Z
     306:	82 95       	swap	r24
     308:	86 95       	lsr	r24
     30a:	87 70       	andi	r24, 0x07	; 7
     30c:	88 2f       	mov	r24, r24
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	81 70       	andi	r24, 0x01	; 1
     312:	90 70       	andi	r25, 0x00	; 0
     314:	00 97       	sbiw	r24, 0x00	; 0
     316:	a1 f3       	breq	.-24     	; 0x300 <timer1_init+0xbc>
				c = ICR1;  		/* Take value of capture register */
     318:	e6 e4       	ldi	r30, 0x46	; 70
     31a:	f0 e0       	ldi	r31, 0x00	; 0
     31c:	80 81       	ld	r24, Z
     31e:	91 81       	ldd	r25, Z+1	; 0x01
     320:	9a 8b       	std	Y+18, r25	; 0x12
     322:	89 8b       	std	Y+17, r24	; 0x11
				TWDR=ICR1L;
     324:	a3 e2       	ldi	r26, 0x23	; 35
     326:	b0 e0       	ldi	r27, 0x00	; 0
     328:	e6 e4       	ldi	r30, 0x46	; 70
     32a:	f0 e0       	ldi	r31, 0x00	; 0
     32c:	80 81       	ld	r24, Z
     32e:	8c 93       	st	X, r24
				SET_BIT(TIFR,ICF1);   	/* Clear ICF flag */
     330:	a8 e5       	ldi	r26, 0x58	; 88
     332:	b0 e0       	ldi	r27, 0x00	; 0
     334:	e8 e5       	ldi	r30, 0x58	; 88
     336:	f0 e0       	ldi	r31, 0x00	; 0
     338:	80 81       	ld	r24, Z
     33a:	80 62       	ori	r24, 0x20	; 32
     33c:	8c 93       	st	X, r24
				TCCR1B = 0;  		/* Stop the timer */
     33e:	ee e4       	ldi	r30, 0x4E	; 78
     340:	f0 e0       	ldi	r31, 0x00	; 0
     342:	10 82       	st	Z, r1

				if(1)  	/* Check for valid condition,
							to avoid timer overflow reading */
				{
					*high=b+(65536ul * count);
     344:	8f 85       	ldd	r24, Y+15	; 0x0f
     346:	98 89       	ldd	r25, Y+16	; 0x10
     348:	9c 01       	movw	r18, r24
     34a:	40 e0       	ldi	r20, 0x00	; 0
     34c:	50 e0       	ldi	r21, 0x00	; 0
     34e:	80 91 de 01 	lds	r24, 0x01DE
     352:	88 2f       	mov	r24, r24
     354:	90 e0       	ldi	r25, 0x00	; 0
     356:	a0 e0       	ldi	r26, 0x00	; 0
     358:	b0 e0       	ldi	r27, 0x00	; 0
     35a:	dc 01       	movw	r26, r24
     35c:	99 27       	eor	r25, r25
     35e:	88 27       	eor	r24, r24
     360:	82 0f       	add	r24, r18
     362:	93 1f       	adc	r25, r19
     364:	a4 1f       	adc	r26, r20
     366:	b5 1f       	adc	r27, r21
     368:	9c 01       	movw	r18, r24
     36a:	ad 01       	movw	r20, r26
     36c:	60 e0       	ldi	r22, 0x00	; 0
     36e:	70 e0       	ldi	r23, 0x00	; 0
     370:	80 e0       	ldi	r24, 0x00	; 0
     372:	90 e0       	ldi	r25, 0x00	; 0
     374:	ed 89       	ldd	r30, Y+21	; 0x15
     376:	fe 89       	ldd	r31, Y+22	; 0x16
     378:	20 83       	st	Z, r18
     37a:	31 83       	std	Z+1, r19	; 0x01
     37c:	42 83       	std	Z+2, r20	; 0x02
     37e:	53 83       	std	Z+3, r21	; 0x03
     380:	64 83       	std	Z+4, r22	; 0x04
     382:	75 83       	std	Z+5, r23	; 0x05
     384:	86 83       	std	Z+6, r24	; 0x06
     386:	97 83       	std	Z+7, r25	; 0x07
					*period=c+(65536ul * count);
     388:	89 89       	ldd	r24, Y+17	; 0x11
     38a:	9a 89       	ldd	r25, Y+18	; 0x12
     38c:	9c 01       	movw	r18, r24
     38e:	40 e0       	ldi	r20, 0x00	; 0
     390:	50 e0       	ldi	r21, 0x00	; 0
     392:	80 91 de 01 	lds	r24, 0x01DE
     396:	88 2f       	mov	r24, r24
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	a0 e0       	ldi	r26, 0x00	; 0
     39c:	b0 e0       	ldi	r27, 0x00	; 0
     39e:	dc 01       	movw	r26, r24
     3a0:	99 27       	eor	r25, r25
     3a2:	88 27       	eor	r24, r24
     3a4:	82 0f       	add	r24, r18
     3a6:	93 1f       	adc	r25, r19
     3a8:	a4 1f       	adc	r26, r20
     3aa:	b5 1f       	adc	r27, r21
     3ac:	9c 01       	movw	r18, r24
     3ae:	ad 01       	movw	r20, r26
     3b0:	60 e0       	ldi	r22, 0x00	; 0
     3b2:	70 e0       	ldi	r23, 0x00	; 0
     3b4:	80 e0       	ldi	r24, 0x00	; 0
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	ef 89       	ldd	r30, Y+23	; 0x17
     3ba:	f8 8d       	ldd	r31, Y+24	; 0x18
     3bc:	20 83       	st	Z, r18
     3be:	31 83       	std	Z+1, r19	; 0x01
     3c0:	42 83       	std	Z+2, r20	; 0x02
     3c2:	53 83       	std	Z+3, r21	; 0x03
     3c4:	64 83       	std	Z+4, r22	; 0x04
     3c6:	75 83       	std	Z+5, r23	; 0x05
     3c8:	86 83       	std	Z+6, r24	; 0x06
     3ca:	97 83       	std	Z+7, r25	; 0x07
     3cc:	80 e0       	ldi	r24, 0x00	; 0
     3ce:	90 e0       	ldi	r25, 0x00	; 0
     3d0:	aa e7       	ldi	r26, 0x7A	; 122
     3d2:	b4 e4       	ldi	r27, 0x44	; 68
     3d4:	8b 87       	std	Y+11, r24	; 0x0b
     3d6:	9c 87       	std	Y+12, r25	; 0x0c
     3d8:	ad 87       	std	Y+13, r26	; 0x0d
     3da:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     3dc:	6b 85       	ldd	r22, Y+11	; 0x0b
     3de:	7c 85       	ldd	r23, Y+12	; 0x0c
     3e0:	8d 85       	ldd	r24, Y+13	; 0x0d
     3e2:	9e 85       	ldd	r25, Y+14	; 0x0e
     3e4:	20 e0       	ldi	r18, 0x00	; 0
     3e6:	30 e0       	ldi	r19, 0x00	; 0
     3e8:	4a e7       	ldi	r20, 0x7A	; 122
     3ea:	55 e4       	ldi	r21, 0x45	; 69
     3ec:	0e 94 59 21 	call	0x42b2	; 0x42b2 <__mulsf3>
     3f0:	dc 01       	movw	r26, r24
     3f2:	cb 01       	movw	r24, r22
     3f4:	8f 83       	std	Y+7, r24	; 0x07
     3f6:	98 87       	std	Y+8, r25	; 0x08
     3f8:	a9 87       	std	Y+9, r26	; 0x09
     3fa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     3fc:	6f 81       	ldd	r22, Y+7	; 0x07
     3fe:	78 85       	ldd	r23, Y+8	; 0x08
     400:	89 85       	ldd	r24, Y+9	; 0x09
     402:	9a 85       	ldd	r25, Y+10	; 0x0a
     404:	20 e0       	ldi	r18, 0x00	; 0
     406:	30 e0       	ldi	r19, 0x00	; 0
     408:	40 e8       	ldi	r20, 0x80	; 128
     40a:	5f e3       	ldi	r21, 0x3F	; 63
     40c:	0e 94 5f 23 	call	0x46be	; 0x46be <__ltsf2>
     410:	88 23       	and	r24, r24
     412:	2c f4       	brge	.+10     	; 0x41e <timer1_init+0x1da>
		__ticks = 1;
     414:	81 e0       	ldi	r24, 0x01	; 1
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	9e 83       	std	Y+6, r25	; 0x06
     41a:	8d 83       	std	Y+5, r24	; 0x05
     41c:	3f c0       	rjmp	.+126    	; 0x49c <timer1_init+0x258>
	else if (__tmp > 65535)
     41e:	6f 81       	ldd	r22, Y+7	; 0x07
     420:	78 85       	ldd	r23, Y+8	; 0x08
     422:	89 85       	ldd	r24, Y+9	; 0x09
     424:	9a 85       	ldd	r25, Y+10	; 0x0a
     426:	20 e0       	ldi	r18, 0x00	; 0
     428:	3f ef       	ldi	r19, 0xFF	; 255
     42a:	4f e7       	ldi	r20, 0x7F	; 127
     42c:	57 e4       	ldi	r21, 0x47	; 71
     42e:	0e 94 ff 22 	call	0x45fe	; 0x45fe <__gtsf2>
     432:	18 16       	cp	r1, r24
     434:	4c f5       	brge	.+82     	; 0x488 <timer1_init+0x244>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     436:	6b 85       	ldd	r22, Y+11	; 0x0b
     438:	7c 85       	ldd	r23, Y+12	; 0x0c
     43a:	8d 85       	ldd	r24, Y+13	; 0x0d
     43c:	9e 85       	ldd	r25, Y+14	; 0x0e
     43e:	20 e0       	ldi	r18, 0x00	; 0
     440:	30 e0       	ldi	r19, 0x00	; 0
     442:	40 e2       	ldi	r20, 0x20	; 32
     444:	51 e4       	ldi	r21, 0x41	; 65
     446:	0e 94 59 21 	call	0x42b2	; 0x42b2 <__mulsf3>
     44a:	dc 01       	movw	r26, r24
     44c:	cb 01       	movw	r24, r22
     44e:	bc 01       	movw	r22, r24
     450:	cd 01       	movw	r24, r26
     452:	0e 94 32 18 	call	0x3064	; 0x3064 <__fixunssfsi>
     456:	dc 01       	movw	r26, r24
     458:	cb 01       	movw	r24, r22
     45a:	9e 83       	std	Y+6, r25	; 0x06
     45c:	8d 83       	std	Y+5, r24	; 0x05
     45e:	0f c0       	rjmp	.+30     	; 0x47e <timer1_init+0x23a>
     460:	80 e9       	ldi	r24, 0x90	; 144
     462:	91 e0       	ldi	r25, 0x01	; 1
     464:	9c 83       	std	Y+4, r25	; 0x04
     466:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     468:	8b 81       	ldd	r24, Y+3	; 0x03
     46a:	9c 81       	ldd	r25, Y+4	; 0x04
     46c:	01 97       	sbiw	r24, 0x01	; 1
     46e:	f1 f7       	brne	.-4      	; 0x46c <timer1_init+0x228>
     470:	9c 83       	std	Y+4, r25	; 0x04
     472:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     474:	8d 81       	ldd	r24, Y+5	; 0x05
     476:	9e 81       	ldd	r25, Y+6	; 0x06
     478:	01 97       	sbiw	r24, 0x01	; 1
     47a:	9e 83       	std	Y+6, r25	; 0x06
     47c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     47e:	8d 81       	ldd	r24, Y+5	; 0x05
     480:	9e 81       	ldd	r25, Y+6	; 0x06
     482:	00 97       	sbiw	r24, 0x00	; 0
     484:	69 f7       	brne	.-38     	; 0x460 <timer1_init+0x21c>
     486:	14 c0       	rjmp	.+40     	; 0x4b0 <timer1_init+0x26c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     488:	6f 81       	ldd	r22, Y+7	; 0x07
     48a:	78 85       	ldd	r23, Y+8	; 0x08
     48c:	89 85       	ldd	r24, Y+9	; 0x09
     48e:	9a 85       	ldd	r25, Y+10	; 0x0a
     490:	0e 94 32 18 	call	0x3064	; 0x3064 <__fixunssfsi>
     494:	dc 01       	movw	r26, r24
     496:	cb 01       	movw	r24, r22
     498:	9e 83       	std	Y+6, r25	; 0x06
     49a:	8d 83       	std	Y+5, r24	; 0x05
     49c:	8d 81       	ldd	r24, Y+5	; 0x05
     49e:	9e 81       	ldd	r25, Y+6	; 0x06
     4a0:	9a 83       	std	Y+2, r25	; 0x02
     4a2:	89 83       	std	Y+1, r24	; 0x01
     4a4:	89 81       	ldd	r24, Y+1	; 0x01
     4a6:	9a 81       	ldd	r25, Y+2	; 0x02
     4a8:	01 97       	sbiw	r24, 0x01	; 1
     4aa:	f1 f7       	brne	.-4      	; 0x4a8 <timer1_init+0x264>
     4ac:	9a 83       	std	Y+2, r25	; 0x02
     4ae:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(1000);
					//high=b-a;
					//period=c-a;
				}

}
     4b0:	68 96       	adiw	r28, 0x18	; 24
     4b2:	0f b6       	in	r0, 0x3f	; 63
     4b4:	f8 94       	cli
     4b6:	de bf       	out	0x3e, r29	; 62
     4b8:	0f be       	out	0x3f, r0	; 63
     4ba:	cd bf       	out	0x3d, r28	; 61
     4bc:	cf 91       	pop	r28
     4be:	df 91       	pop	r29
     4c0:	1f 91       	pop	r17
     4c2:	0f 91       	pop	r16
     4c4:	08 95       	ret

000004c6 <__vector_9>:




void __vector_9(void)
{
     4c6:	1f 92       	push	r1
     4c8:	0f 92       	push	r0
     4ca:	0f b6       	in	r0, 0x3f	; 63
     4cc:	0f 92       	push	r0
     4ce:	11 24       	eor	r1, r1
     4d0:	8f 93       	push	r24
     4d2:	df 93       	push	r29
     4d4:	cf 93       	push	r28
     4d6:	cd b7       	in	r28, 0x3d	; 61
     4d8:	de b7       	in	r29, 0x3e	; 62
	count++; // to calculate the no of overflows
     4da:	80 91 de 01 	lds	r24, 0x01DE
     4de:	8f 5f       	subi	r24, 0xFF	; 255
     4e0:	80 93 de 01 	sts	0x01DE, r24
}
     4e4:	cf 91       	pop	r28
     4e6:	df 91       	pop	r29
     4e8:	8f 91       	pop	r24
     4ea:	0f 90       	pop	r0
     4ec:	0f be       	out	0x3f, r0	; 63
     4ee:	0f 90       	pop	r0
     4f0:	1f 90       	pop	r1
     4f2:	18 95       	reti

000004f4 <TMR0_Set_OCR>:

void (*CallBackPtr_TMR0_OV)(void);
void (*CallBackPtr_TMR0_COMP)(void);

void TMR0_Set_OCR(unsigned char DutyCycle)
{
     4f4:	df 93       	push	r29
     4f6:	cf 93       	push	r28
     4f8:	0f 92       	push	r0
     4fa:	cd b7       	in	r28, 0x3d	; 61
     4fc:	de b7       	in	r29, 0x3e	; 62
     4fe:	89 83       	std	Y+1, r24	; 0x01
	OCR0  = DutyCycle; //PB3
     500:	ec e5       	ldi	r30, 0x5C	; 92
     502:	f0 e0       	ldi	r31, 0x00	; 0
     504:	89 81       	ldd	r24, Y+1	; 0x01
     506:	80 83       	st	Z, r24
}
     508:	0f 90       	pop	r0
     50a:	cf 91       	pop	r28
     50c:	df 91       	pop	r29
     50e:	08 95       	ret

00000510 <TMR0_init>:

void TMR0_init(){
     510:	df 93       	push	r29
     512:	cf 93       	push	r28
     514:	cd b7       	in	r28, 0x3d	; 61
     516:	de b7       	in	r29, 0x3e	; 62
	TCNT0 = T0_INIT_Value;
     518:	e2 e5       	ldi	r30, 0x52	; 82
     51a:	f0 e0       	ldi	r31, 0x00	; 0
     51c:	10 82       	st	Z, r1
	OCR0 =0;
     51e:	ec e5       	ldi	r30, 0x5C	; 92
     520:	f0 e0       	ldi	r31, 0x00	; 0
     522:	10 82       	st	Z, r1
		CLR_BIT(TCCR0,WGM01);
	}

#elif T0_MODE == PWM_Mode
	{
		SET_BIT(TCCR0,WGM00);
     524:	a3 e5       	ldi	r26, 0x53	; 83
     526:	b0 e0       	ldi	r27, 0x00	; 0
     528:	e3 e5       	ldi	r30, 0x53	; 83
     52a:	f0 e0       	ldi	r31, 0x00	; 0
     52c:	80 81       	ld	r24, Z
     52e:	80 64       	ori	r24, 0x40	; 64
     530:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,WGM01);
     532:	a3 e5       	ldi	r26, 0x53	; 83
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	e3 e5       	ldi	r30, 0x53	; 83
     538:	f0 e0       	ldi	r31, 0x00	; 0
     53a:	80 81       	ld	r24, Z
     53c:	87 7f       	andi	r24, 0xF7	; 247
     53e:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,COM01);
	}

#elif  T0_MODE == PWM_Mode && CompOutputModePWM == Non_InvertedPWM
	{
		CLR_BIT(TCCR0,COM00);
     540:	a3 e5       	ldi	r26, 0x53	; 83
     542:	b0 e0       	ldi	r27, 0x00	; 0
     544:	e3 e5       	ldi	r30, 0x53	; 83
     546:	f0 e0       	ldi	r31, 0x00	; 0
     548:	80 81       	ld	r24, Z
     54a:	8f 7e       	andi	r24, 0xEF	; 239
     54c:	8c 93       	st	X, r24
		SET_BIT(TCCR0,COM01);
     54e:	a3 e5       	ldi	r26, 0x53	; 83
     550:	b0 e0       	ldi	r27, 0x00	; 0
     552:	e3 e5       	ldi	r30, 0x53	; 83
     554:	f0 e0       	ldi	r31, 0x00	; 0
     556:	80 81       	ld	r24, Z
     558:	80 62       	ori	r24, 0x20	; 32
     55a:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,CS02);
	}

#elif CLK_Pre == Pre64
	{
		SET_BIT(TCCR0,CS00);
     55c:	a3 e5       	ldi	r26, 0x53	; 83
     55e:	b0 e0       	ldi	r27, 0x00	; 0
     560:	e3 e5       	ldi	r30, 0x53	; 83
     562:	f0 e0       	ldi	r31, 0x00	; 0
     564:	80 81       	ld	r24, Z
     566:	81 60       	ori	r24, 0x01	; 1
     568:	8c 93       	st	X, r24
		SET_BIT(TCCR0,CS01);
     56a:	a3 e5       	ldi	r26, 0x53	; 83
     56c:	b0 e0       	ldi	r27, 0x00	; 0
     56e:	e3 e5       	ldi	r30, 0x53	; 83
     570:	f0 e0       	ldi	r31, 0x00	; 0
     572:	80 81       	ld	r24, Z
     574:	82 60       	ori	r24, 0x02	; 2
     576:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,CS02);
     578:	a3 e5       	ldi	r26, 0x53	; 83
     57a:	b0 e0       	ldi	r27, 0x00	; 0
     57c:	e3 e5       	ldi	r30, 0x53	; 83
     57e:	f0 e0       	ldi	r31, 0x00	; 0
     580:	80 81       	ld	r24, Z
     582:	8b 7f       	andi	r24, 0xFB	; 251
     584:	8c 93       	st	X, r24

#if TMR0_IntEnable == ENABLE
	 SET_BIT(TIMSK,TOIE0);

#else
	 CLR_BIT(TIMSK,TOIE0);
     586:	a9 e5       	ldi	r26, 0x59	; 89
     588:	b0 e0       	ldi	r27, 0x00	; 0
     58a:	e9 e5       	ldi	r30, 0x59	; 89
     58c:	f0 e0       	ldi	r31, 0x00	; 0
     58e:	80 81       	ld	r24, Z
     590:	8e 7f       	andi	r24, 0xFE	; 254
     592:	8c 93       	st	X, r24

#if TMR0_IntEnableCTC == ENABLE
	 SET_BIT(TIMSK,OCIE0);

#else
	 CLR_BIT(TIMSK,OCIE0);
     594:	a9 e5       	ldi	r26, 0x59	; 89
     596:	b0 e0       	ldi	r27, 0x00	; 0
     598:	e9 e5       	ldi	r30, 0x59	; 89
     59a:	f0 e0       	ldi	r31, 0x00	; 0
     59c:	80 81       	ld	r24, Z
     59e:	8d 7f       	andi	r24, 0xFD	; 253
     5a0:	8c 93       	st	X, r24

#endif
}
     5a2:	cf 91       	pop	r28
     5a4:	df 91       	pop	r29
     5a6:	08 95       	ret

000005a8 <__vector_11>:

ISR(TIMER0_OVF_vect)
{
     5a8:	1f 92       	push	r1
     5aa:	0f 92       	push	r0
     5ac:	0f b6       	in	r0, 0x3f	; 63
     5ae:	0f 92       	push	r0
     5b0:	11 24       	eor	r1, r1
     5b2:	2f 93       	push	r18
     5b4:	3f 93       	push	r19
     5b6:	4f 93       	push	r20
     5b8:	5f 93       	push	r21
     5ba:	6f 93       	push	r22
     5bc:	7f 93       	push	r23
     5be:	8f 93       	push	r24
     5c0:	9f 93       	push	r25
     5c2:	af 93       	push	r26
     5c4:	bf 93       	push	r27
     5c6:	ef 93       	push	r30
     5c8:	ff 93       	push	r31
     5ca:	df 93       	push	r29
     5cc:	cf 93       	push	r28
     5ce:	cd b7       	in	r28, 0x3d	; 61
     5d0:	de b7       	in	r29, 0x3e	; 62
	CallBackPtr_TMR0_OV();
     5d2:	e0 91 e5 01 	lds	r30, 0x01E5
     5d6:	f0 91 e6 01 	lds	r31, 0x01E6
     5da:	09 95       	icall
}
     5dc:	cf 91       	pop	r28
     5de:	df 91       	pop	r29
     5e0:	ff 91       	pop	r31
     5e2:	ef 91       	pop	r30
     5e4:	bf 91       	pop	r27
     5e6:	af 91       	pop	r26
     5e8:	9f 91       	pop	r25
     5ea:	8f 91       	pop	r24
     5ec:	7f 91       	pop	r23
     5ee:	6f 91       	pop	r22
     5f0:	5f 91       	pop	r21
     5f2:	4f 91       	pop	r20
     5f4:	3f 91       	pop	r19
     5f6:	2f 91       	pop	r18
     5f8:	0f 90       	pop	r0
     5fa:	0f be       	out	0x3f, r0	; 63
     5fc:	0f 90       	pop	r0
     5fe:	1f 90       	pop	r1
     600:	18 95       	reti

00000602 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
     602:	1f 92       	push	r1
     604:	0f 92       	push	r0
     606:	0f b6       	in	r0, 0x3f	; 63
     608:	0f 92       	push	r0
     60a:	11 24       	eor	r1, r1
     60c:	2f 93       	push	r18
     60e:	3f 93       	push	r19
     610:	4f 93       	push	r20
     612:	5f 93       	push	r21
     614:	6f 93       	push	r22
     616:	7f 93       	push	r23
     618:	8f 93       	push	r24
     61a:	9f 93       	push	r25
     61c:	af 93       	push	r26
     61e:	bf 93       	push	r27
     620:	ef 93       	push	r30
     622:	ff 93       	push	r31
     624:	df 93       	push	r29
     626:	cf 93       	push	r28
     628:	cd b7       	in	r28, 0x3d	; 61
     62a:	de b7       	in	r29, 0x3e	; 62
	CallBackPtr_TMR0_COMP();
     62c:	e0 91 e7 01 	lds	r30, 0x01E7
     630:	f0 91 e8 01 	lds	r31, 0x01E8
     634:	09 95       	icall
}
     636:	cf 91       	pop	r28
     638:	df 91       	pop	r29
     63a:	ff 91       	pop	r31
     63c:	ef 91       	pop	r30
     63e:	bf 91       	pop	r27
     640:	af 91       	pop	r26
     642:	9f 91       	pop	r25
     644:	8f 91       	pop	r24
     646:	7f 91       	pop	r23
     648:	6f 91       	pop	r22
     64a:	5f 91       	pop	r21
     64c:	4f 91       	pop	r20
     64e:	3f 91       	pop	r19
     650:	2f 91       	pop	r18
     652:	0f 90       	pop	r0
     654:	0f be       	out	0x3f, r0	; 63
     656:	0f 90       	pop	r0
     658:	1f 90       	pop	r1
     65a:	18 95       	reti

0000065c <SetCallBack_TMR0_OV>:

void SetCallBack_TMR0_OV(void(*p2fOV)(void))
{
     65c:	df 93       	push	r29
     65e:	cf 93       	push	r28
     660:	00 d0       	rcall	.+0      	; 0x662 <SetCallBack_TMR0_OV+0x6>
     662:	cd b7       	in	r28, 0x3d	; 61
     664:	de b7       	in	r29, 0x3e	; 62
     666:	9a 83       	std	Y+2, r25	; 0x02
     668:	89 83       	std	Y+1, r24	; 0x01
	CallBackPtr_TMR0_OV=p2fOV;
     66a:	89 81       	ldd	r24, Y+1	; 0x01
     66c:	9a 81       	ldd	r25, Y+2	; 0x02
     66e:	90 93 e6 01 	sts	0x01E6, r25
     672:	80 93 e5 01 	sts	0x01E5, r24
}
     676:	0f 90       	pop	r0
     678:	0f 90       	pop	r0
     67a:	cf 91       	pop	r28
     67c:	df 91       	pop	r29
     67e:	08 95       	ret

00000680 <SetCallBack_TMR0_COMP>:

void SetCallBack_TMR0_COMP(void(*p2fCOMP)(void))
{
     680:	df 93       	push	r29
     682:	cf 93       	push	r28
     684:	00 d0       	rcall	.+0      	; 0x686 <SetCallBack_TMR0_COMP+0x6>
     686:	cd b7       	in	r28, 0x3d	; 61
     688:	de b7       	in	r29, 0x3e	; 62
     68a:	9a 83       	std	Y+2, r25	; 0x02
     68c:	89 83       	std	Y+1, r24	; 0x01
	CallBackPtr_TMR0_COMP=p2fCOMP;
     68e:	89 81       	ldd	r24, Y+1	; 0x01
     690:	9a 81       	ldd	r25, Y+2	; 0x02
     692:	90 93 e8 01 	sts	0x01E8, r25
     696:	80 93 e7 01 	sts	0x01E7, r24
}
     69a:	0f 90       	pop	r0
     69c:	0f 90       	pop	r0
     69e:	cf 91       	pop	r28
     6a0:	df 91       	pop	r29
     6a2:	08 95       	ret

000006a4 <DIO_write>:
 */
#include "DIO.h"


void DIO_write(Channel_Type channel,State_Type state)
{
     6a4:	df 93       	push	r29
     6a6:	cf 93       	push	r28
     6a8:	00 d0       	rcall	.+0      	; 0x6aa <DIO_write+0x6>
     6aa:	cd b7       	in	r28, 0x3d	; 61
     6ac:	de b7       	in	r29, 0x3e	; 62
     6ae:	89 83       	std	Y+1, r24	; 0x01
     6b0:	6a 83       	std	Y+2, r22	; 0x02
	if(channel>=0&&channel<=7)
     6b2:	89 81       	ldd	r24, Y+1	; 0x01
     6b4:	88 30       	cpi	r24, 0x08	; 8
     6b6:	60 f5       	brcc	.+88     	; 0x710 <DIO_write+0x6c>
	{
		if(state==1)
     6b8:	8a 81       	ldd	r24, Y+2	; 0x02
     6ba:	81 30       	cpi	r24, 0x01	; 1
     6bc:	a1 f4       	brne	.+40     	; 0x6e6 <DIO_write+0x42>
		{
			SET_BIT(PORTA,channel);
     6be:	ab e3       	ldi	r26, 0x3B	; 59
     6c0:	b0 e0       	ldi	r27, 0x00	; 0
     6c2:	eb e3       	ldi	r30, 0x3B	; 59
     6c4:	f0 e0       	ldi	r31, 0x00	; 0
     6c6:	80 81       	ld	r24, Z
     6c8:	48 2f       	mov	r20, r24
     6ca:	89 81       	ldd	r24, Y+1	; 0x01
     6cc:	28 2f       	mov	r18, r24
     6ce:	30 e0       	ldi	r19, 0x00	; 0
     6d0:	81 e0       	ldi	r24, 0x01	; 1
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	02 2e       	mov	r0, r18
     6d6:	02 c0       	rjmp	.+4      	; 0x6dc <DIO_write+0x38>
     6d8:	88 0f       	add	r24, r24
     6da:	99 1f       	adc	r25, r25
     6dc:	0a 94       	dec	r0
     6de:	e2 f7       	brpl	.-8      	; 0x6d8 <DIO_write+0x34>
     6e0:	84 2b       	or	r24, r20
     6e2:	8c 93       	st	X, r24
     6e4:	bc c0       	rjmp	.+376    	; 0x85e <DIO_write+0x1ba>
		}
		else
		{
			CLR_BIT(PORTA,channel);
     6e6:	ab e3       	ldi	r26, 0x3B	; 59
     6e8:	b0 e0       	ldi	r27, 0x00	; 0
     6ea:	eb e3       	ldi	r30, 0x3B	; 59
     6ec:	f0 e0       	ldi	r31, 0x00	; 0
     6ee:	80 81       	ld	r24, Z
     6f0:	48 2f       	mov	r20, r24
     6f2:	89 81       	ldd	r24, Y+1	; 0x01
     6f4:	28 2f       	mov	r18, r24
     6f6:	30 e0       	ldi	r19, 0x00	; 0
     6f8:	81 e0       	ldi	r24, 0x01	; 1
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	02 2e       	mov	r0, r18
     6fe:	02 c0       	rjmp	.+4      	; 0x704 <DIO_write+0x60>
     700:	88 0f       	add	r24, r24
     702:	99 1f       	adc	r25, r25
     704:	0a 94       	dec	r0
     706:	e2 f7       	brpl	.-8      	; 0x700 <DIO_write+0x5c>
     708:	80 95       	com	r24
     70a:	84 23       	and	r24, r20
     70c:	8c 93       	st	X, r24
     70e:	a7 c0       	rjmp	.+334    	; 0x85e <DIO_write+0x1ba>
		}
	}
	else if(channel>=8&&channel<=15)
     710:	89 81       	ldd	r24, Y+1	; 0x01
     712:	88 30       	cpi	r24, 0x08	; 8
     714:	a8 f1       	brcs	.+106    	; 0x780 <DIO_write+0xdc>
     716:	89 81       	ldd	r24, Y+1	; 0x01
     718:	80 31       	cpi	r24, 0x10	; 16
     71a:	90 f5       	brcc	.+100    	; 0x780 <DIO_write+0xdc>
		{
			if(state==1)
     71c:	8a 81       	ldd	r24, Y+2	; 0x02
     71e:	81 30       	cpi	r24, 0x01	; 1
     720:	b9 f4       	brne	.+46     	; 0x750 <DIO_write+0xac>
			{
				SET_BIT(PORTB,(channel-8));
     722:	a8 e3       	ldi	r26, 0x38	; 56
     724:	b0 e0       	ldi	r27, 0x00	; 0
     726:	e8 e3       	ldi	r30, 0x38	; 56
     728:	f0 e0       	ldi	r31, 0x00	; 0
     72a:	80 81       	ld	r24, Z
     72c:	48 2f       	mov	r20, r24
     72e:	89 81       	ldd	r24, Y+1	; 0x01
     730:	88 2f       	mov	r24, r24
     732:	90 e0       	ldi	r25, 0x00	; 0
     734:	9c 01       	movw	r18, r24
     736:	28 50       	subi	r18, 0x08	; 8
     738:	30 40       	sbci	r19, 0x00	; 0
     73a:	81 e0       	ldi	r24, 0x01	; 1
     73c:	90 e0       	ldi	r25, 0x00	; 0
     73e:	02 2e       	mov	r0, r18
     740:	02 c0       	rjmp	.+4      	; 0x746 <DIO_write+0xa2>
     742:	88 0f       	add	r24, r24
     744:	99 1f       	adc	r25, r25
     746:	0a 94       	dec	r0
     748:	e2 f7       	brpl	.-8      	; 0x742 <DIO_write+0x9e>
     74a:	84 2b       	or	r24, r20
     74c:	8c 93       	st	X, r24
     74e:	87 c0       	rjmp	.+270    	; 0x85e <DIO_write+0x1ba>
			}
			else
			{
				CLR_BIT(PORTB,(channel-8));
     750:	a8 e3       	ldi	r26, 0x38	; 56
     752:	b0 e0       	ldi	r27, 0x00	; 0
     754:	e8 e3       	ldi	r30, 0x38	; 56
     756:	f0 e0       	ldi	r31, 0x00	; 0
     758:	80 81       	ld	r24, Z
     75a:	48 2f       	mov	r20, r24
     75c:	89 81       	ldd	r24, Y+1	; 0x01
     75e:	88 2f       	mov	r24, r24
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	9c 01       	movw	r18, r24
     764:	28 50       	subi	r18, 0x08	; 8
     766:	30 40       	sbci	r19, 0x00	; 0
     768:	81 e0       	ldi	r24, 0x01	; 1
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	02 2e       	mov	r0, r18
     76e:	02 c0       	rjmp	.+4      	; 0x774 <DIO_write+0xd0>
     770:	88 0f       	add	r24, r24
     772:	99 1f       	adc	r25, r25
     774:	0a 94       	dec	r0
     776:	e2 f7       	brpl	.-8      	; 0x770 <DIO_write+0xcc>
     778:	80 95       	com	r24
     77a:	84 23       	and	r24, r20
     77c:	8c 93       	st	X, r24
     77e:	6f c0       	rjmp	.+222    	; 0x85e <DIO_write+0x1ba>
			}
		}
	else if(channel>=16&&channel<=23)
     780:	89 81       	ldd	r24, Y+1	; 0x01
     782:	80 31       	cpi	r24, 0x10	; 16
     784:	a8 f1       	brcs	.+106    	; 0x7f0 <DIO_write+0x14c>
     786:	89 81       	ldd	r24, Y+1	; 0x01
     788:	88 31       	cpi	r24, 0x18	; 24
     78a:	90 f5       	brcc	.+100    	; 0x7f0 <DIO_write+0x14c>
			{
				if(state==1)
     78c:	8a 81       	ldd	r24, Y+2	; 0x02
     78e:	81 30       	cpi	r24, 0x01	; 1
     790:	b9 f4       	brne	.+46     	; 0x7c0 <DIO_write+0x11c>
				{
					SET_BIT(PORTC,(channel-16));
     792:	a5 e3       	ldi	r26, 0x35	; 53
     794:	b0 e0       	ldi	r27, 0x00	; 0
     796:	e5 e3       	ldi	r30, 0x35	; 53
     798:	f0 e0       	ldi	r31, 0x00	; 0
     79a:	80 81       	ld	r24, Z
     79c:	48 2f       	mov	r20, r24
     79e:	89 81       	ldd	r24, Y+1	; 0x01
     7a0:	88 2f       	mov	r24, r24
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	9c 01       	movw	r18, r24
     7a6:	20 51       	subi	r18, 0x10	; 16
     7a8:	30 40       	sbci	r19, 0x00	; 0
     7aa:	81 e0       	ldi	r24, 0x01	; 1
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	02 2e       	mov	r0, r18
     7b0:	02 c0       	rjmp	.+4      	; 0x7b6 <DIO_write+0x112>
     7b2:	88 0f       	add	r24, r24
     7b4:	99 1f       	adc	r25, r25
     7b6:	0a 94       	dec	r0
     7b8:	e2 f7       	brpl	.-8      	; 0x7b2 <DIO_write+0x10e>
     7ba:	84 2b       	or	r24, r20
     7bc:	8c 93       	st	X, r24
     7be:	4f c0       	rjmp	.+158    	; 0x85e <DIO_write+0x1ba>
				}
				else
				{
					CLR_BIT(PORTC,(channel-16));
     7c0:	a5 e3       	ldi	r26, 0x35	; 53
     7c2:	b0 e0       	ldi	r27, 0x00	; 0
     7c4:	e5 e3       	ldi	r30, 0x35	; 53
     7c6:	f0 e0       	ldi	r31, 0x00	; 0
     7c8:	80 81       	ld	r24, Z
     7ca:	48 2f       	mov	r20, r24
     7cc:	89 81       	ldd	r24, Y+1	; 0x01
     7ce:	88 2f       	mov	r24, r24
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	9c 01       	movw	r18, r24
     7d4:	20 51       	subi	r18, 0x10	; 16
     7d6:	30 40       	sbci	r19, 0x00	; 0
     7d8:	81 e0       	ldi	r24, 0x01	; 1
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	02 2e       	mov	r0, r18
     7de:	02 c0       	rjmp	.+4      	; 0x7e4 <DIO_write+0x140>
     7e0:	88 0f       	add	r24, r24
     7e2:	99 1f       	adc	r25, r25
     7e4:	0a 94       	dec	r0
     7e6:	e2 f7       	brpl	.-8      	; 0x7e0 <DIO_write+0x13c>
     7e8:	80 95       	com	r24
     7ea:	84 23       	and	r24, r20
     7ec:	8c 93       	st	X, r24
     7ee:	37 c0       	rjmp	.+110    	; 0x85e <DIO_write+0x1ba>
				}
			}
	else if(channel>=24&&channel<=31)
     7f0:	89 81       	ldd	r24, Y+1	; 0x01
     7f2:	88 31       	cpi	r24, 0x18	; 24
     7f4:	a0 f1       	brcs	.+104    	; 0x85e <DIO_write+0x1ba>
     7f6:	89 81       	ldd	r24, Y+1	; 0x01
     7f8:	80 32       	cpi	r24, 0x20	; 32
     7fa:	88 f5       	brcc	.+98     	; 0x85e <DIO_write+0x1ba>
			{
				if(state==1)
     7fc:	8a 81       	ldd	r24, Y+2	; 0x02
     7fe:	81 30       	cpi	r24, 0x01	; 1
     800:	b9 f4       	brne	.+46     	; 0x830 <DIO_write+0x18c>
				{
					SET_BIT(PORTD,(channel-24));
     802:	a2 e3       	ldi	r26, 0x32	; 50
     804:	b0 e0       	ldi	r27, 0x00	; 0
     806:	e2 e3       	ldi	r30, 0x32	; 50
     808:	f0 e0       	ldi	r31, 0x00	; 0
     80a:	80 81       	ld	r24, Z
     80c:	48 2f       	mov	r20, r24
     80e:	89 81       	ldd	r24, Y+1	; 0x01
     810:	88 2f       	mov	r24, r24
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	9c 01       	movw	r18, r24
     816:	28 51       	subi	r18, 0x18	; 24
     818:	30 40       	sbci	r19, 0x00	; 0
     81a:	81 e0       	ldi	r24, 0x01	; 1
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	02 2e       	mov	r0, r18
     820:	02 c0       	rjmp	.+4      	; 0x826 <DIO_write+0x182>
     822:	88 0f       	add	r24, r24
     824:	99 1f       	adc	r25, r25
     826:	0a 94       	dec	r0
     828:	e2 f7       	brpl	.-8      	; 0x822 <DIO_write+0x17e>
     82a:	84 2b       	or	r24, r20
     82c:	8c 93       	st	X, r24
     82e:	17 c0       	rjmp	.+46     	; 0x85e <DIO_write+0x1ba>
				}
				else
				{
					CLR_BIT(PORTD,(channel-24));
     830:	a2 e3       	ldi	r26, 0x32	; 50
     832:	b0 e0       	ldi	r27, 0x00	; 0
     834:	e2 e3       	ldi	r30, 0x32	; 50
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	80 81       	ld	r24, Z
     83a:	48 2f       	mov	r20, r24
     83c:	89 81       	ldd	r24, Y+1	; 0x01
     83e:	88 2f       	mov	r24, r24
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	9c 01       	movw	r18, r24
     844:	28 51       	subi	r18, 0x18	; 24
     846:	30 40       	sbci	r19, 0x00	; 0
     848:	81 e0       	ldi	r24, 0x01	; 1
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	02 2e       	mov	r0, r18
     84e:	02 c0       	rjmp	.+4      	; 0x854 <DIO_write+0x1b0>
     850:	88 0f       	add	r24, r24
     852:	99 1f       	adc	r25, r25
     854:	0a 94       	dec	r0
     856:	e2 f7       	brpl	.-8      	; 0x850 <DIO_write+0x1ac>
     858:	80 95       	com	r24
     85a:	84 23       	and	r24, r20
     85c:	8c 93       	st	X, r24
				}
			}
}
     85e:	0f 90       	pop	r0
     860:	0f 90       	pop	r0
     862:	cf 91       	pop	r28
     864:	df 91       	pop	r29
     866:	08 95       	ret

00000868 <DIO_read>:

int DIO_read(Channel_Type channel)
{
     868:	df 93       	push	r29
     86a:	cf 93       	push	r28
     86c:	00 d0       	rcall	.+0      	; 0x86e <DIO_read+0x6>
     86e:	cd b7       	in	r28, 0x3d	; 61
     870:	de b7       	in	r29, 0x3e	; 62
     872:	8a 83       	std	Y+2, r24	; 0x02
	State_Type state =0;
     874:	19 82       	std	Y+1, r1	; 0x01
	if(channel>=0&&channel<=7)
     876:	8a 81       	ldd	r24, Y+2	; 0x02
     878:	88 30       	cpi	r24, 0x08	; 8
     87a:	90 f4       	brcc	.+36     	; 0x8a0 <DIO_read+0x38>
	{
		state=GET_BIT(PINA,channel);
     87c:	e9 e3       	ldi	r30, 0x39	; 57
     87e:	f0 e0       	ldi	r31, 0x00	; 0
     880:	80 81       	ld	r24, Z
     882:	28 2f       	mov	r18, r24
     884:	30 e0       	ldi	r19, 0x00	; 0
     886:	8a 81       	ldd	r24, Y+2	; 0x02
     888:	88 2f       	mov	r24, r24
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	a9 01       	movw	r20, r18
     88e:	02 c0       	rjmp	.+4      	; 0x894 <DIO_read+0x2c>
     890:	55 95       	asr	r21
     892:	47 95       	ror	r20
     894:	8a 95       	dec	r24
     896:	e2 f7       	brpl	.-8      	; 0x890 <DIO_read+0x28>
     898:	ca 01       	movw	r24, r20
     89a:	81 70       	andi	r24, 0x01	; 1
     89c:	89 83       	std	Y+1, r24	; 0x01
     89e:	4a c0       	rjmp	.+148    	; 0x934 <DIO_read+0xcc>

	}
	else if(channel>=8&&channel<=15)
     8a0:	8a 81       	ldd	r24, Y+2	; 0x02
     8a2:	88 30       	cpi	r24, 0x08	; 8
     8a4:	b0 f0       	brcs	.+44     	; 0x8d2 <DIO_read+0x6a>
     8a6:	8a 81       	ldd	r24, Y+2	; 0x02
     8a8:	80 31       	cpi	r24, 0x10	; 16
     8aa:	98 f4       	brcc	.+38     	; 0x8d2 <DIO_read+0x6a>
	{
		state=GET_BIT(PINB,(channel-8));
     8ac:	e6 e3       	ldi	r30, 0x36	; 54
     8ae:	f0 e0       	ldi	r31, 0x00	; 0
     8b0:	80 81       	ld	r24, Z
     8b2:	28 2f       	mov	r18, r24
     8b4:	30 e0       	ldi	r19, 0x00	; 0
     8b6:	8a 81       	ldd	r24, Y+2	; 0x02
     8b8:	88 2f       	mov	r24, r24
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	08 97       	sbiw	r24, 0x08	; 8
     8be:	a9 01       	movw	r20, r18
     8c0:	02 c0       	rjmp	.+4      	; 0x8c6 <DIO_read+0x5e>
     8c2:	55 95       	asr	r21
     8c4:	47 95       	ror	r20
     8c6:	8a 95       	dec	r24
     8c8:	e2 f7       	brpl	.-8      	; 0x8c2 <DIO_read+0x5a>
     8ca:	ca 01       	movw	r24, r20
     8cc:	81 70       	andi	r24, 0x01	; 1
     8ce:	89 83       	std	Y+1, r24	; 0x01
     8d0:	31 c0       	rjmp	.+98     	; 0x934 <DIO_read+0xcc>

	}
	else if(channel>=16&&channel<=23)
     8d2:	8a 81       	ldd	r24, Y+2	; 0x02
     8d4:	80 31       	cpi	r24, 0x10	; 16
     8d6:	b0 f0       	brcs	.+44     	; 0x904 <DIO_read+0x9c>
     8d8:	8a 81       	ldd	r24, Y+2	; 0x02
     8da:	88 31       	cpi	r24, 0x18	; 24
     8dc:	98 f4       	brcc	.+38     	; 0x904 <DIO_read+0x9c>
	{
			state=GET_BIT(PINC,(channel-16));
     8de:	e3 e3       	ldi	r30, 0x33	; 51
     8e0:	f0 e0       	ldi	r31, 0x00	; 0
     8e2:	80 81       	ld	r24, Z
     8e4:	28 2f       	mov	r18, r24
     8e6:	30 e0       	ldi	r19, 0x00	; 0
     8e8:	8a 81       	ldd	r24, Y+2	; 0x02
     8ea:	88 2f       	mov	r24, r24
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	40 97       	sbiw	r24, 0x10	; 16
     8f0:	a9 01       	movw	r20, r18
     8f2:	02 c0       	rjmp	.+4      	; 0x8f8 <DIO_read+0x90>
     8f4:	55 95       	asr	r21
     8f6:	47 95       	ror	r20
     8f8:	8a 95       	dec	r24
     8fa:	e2 f7       	brpl	.-8      	; 0x8f4 <DIO_read+0x8c>
     8fc:	ca 01       	movw	r24, r20
     8fe:	81 70       	andi	r24, 0x01	; 1
     900:	89 83       	std	Y+1, r24	; 0x01
     902:	18 c0       	rjmp	.+48     	; 0x934 <DIO_read+0xcc>
	}
	else if(channel>=24&&channel<=31)
     904:	8a 81       	ldd	r24, Y+2	; 0x02
     906:	88 31       	cpi	r24, 0x18	; 24
     908:	a8 f0       	brcs	.+42     	; 0x934 <DIO_read+0xcc>
     90a:	8a 81       	ldd	r24, Y+2	; 0x02
     90c:	80 32       	cpi	r24, 0x20	; 32
     90e:	90 f4       	brcc	.+36     	; 0x934 <DIO_read+0xcc>
	{
			state=GET_BIT(PIND,(channel-24));
     910:	e0 e3       	ldi	r30, 0x30	; 48
     912:	f0 e0       	ldi	r31, 0x00	; 0
     914:	80 81       	ld	r24, Z
     916:	28 2f       	mov	r18, r24
     918:	30 e0       	ldi	r19, 0x00	; 0
     91a:	8a 81       	ldd	r24, Y+2	; 0x02
     91c:	88 2f       	mov	r24, r24
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	48 97       	sbiw	r24, 0x18	; 24
     922:	a9 01       	movw	r20, r18
     924:	02 c0       	rjmp	.+4      	; 0x92a <DIO_read+0xc2>
     926:	55 95       	asr	r21
     928:	47 95       	ror	r20
     92a:	8a 95       	dec	r24
     92c:	e2 f7       	brpl	.-8      	; 0x926 <DIO_read+0xbe>
     92e:	ca 01       	movw	r24, r20
     930:	81 70       	andi	r24, 0x01	; 1
     932:	89 83       	std	Y+1, r24	; 0x01

	}
	return state;
     934:	89 81       	ldd	r24, Y+1	; 0x01
     936:	88 2f       	mov	r24, r24
     938:	90 e0       	ldi	r25, 0x00	; 0
}
     93a:	0f 90       	pop	r0
     93c:	0f 90       	pop	r0
     93e:	cf 91       	pop	r28
     940:	df 91       	pop	r29
     942:	08 95       	ret

00000944 <DIO_init>:
		{PORT_C, PIN_6,OUTPUT},
		{PORT_C, PIN_7,OUTPUT}
};

void DIO_init(void)
{
     944:	df 93       	push	r29
     946:	cf 93       	push	r28
     948:	00 d0       	rcall	.+0      	; 0x94a <DIO_init+0x6>
     94a:	00 d0       	rcall	.+0      	; 0x94c <DIO_init+0x8>
     94c:	cd b7       	in	r28, 0x3d	; 61
     94e:	de b7       	in	r29, 0x3e	; 62
	int i=0;
     950:	1a 82       	std	Y+2, r1	; 0x02
     952:	19 82       	std	Y+1, r1	; 0x01
	for(i=0;i<sizeof(pin_config)/sizeof(pin_config[0]);i++)
     954:	1a 82       	std	Y+2, r1	; 0x02
     956:	19 82       	std	Y+1, r1	; 0x01
     958:	58 c1       	rjmp	.+688    	; 0xc0a <DIO_init+0x2c6>
	{
		switch (pin_config[i].PORT){
     95a:	29 81       	ldd	r18, Y+1	; 0x01
     95c:	3a 81       	ldd	r19, Y+2	; 0x02
     95e:	c9 01       	movw	r24, r18
     960:	88 0f       	add	r24, r24
     962:	99 1f       	adc	r25, r25
     964:	82 0f       	add	r24, r18
     966:	93 1f       	adc	r25, r19
     968:	fc 01       	movw	r30, r24
     96a:	e0 5a       	subi	r30, 0xA0	; 160
     96c:	ff 4f       	sbci	r31, 0xFF	; 255
     96e:	80 81       	ld	r24, Z
     970:	28 2f       	mov	r18, r24
     972:	30 e0       	ldi	r19, 0x00	; 0
     974:	3c 83       	std	Y+4, r19	; 0x04
     976:	2b 83       	std	Y+3, r18	; 0x03
     978:	8b 81       	ldd	r24, Y+3	; 0x03
     97a:	9c 81       	ldd	r25, Y+4	; 0x04
     97c:	81 30       	cpi	r24, 0x01	; 1
     97e:	91 05       	cpc	r25, r1
     980:	09 f4       	brne	.+2      	; 0x984 <DIO_init+0x40>
     982:	61 c0       	rjmp	.+194    	; 0xa46 <DIO_init+0x102>
     984:	2b 81       	ldd	r18, Y+3	; 0x03
     986:	3c 81       	ldd	r19, Y+4	; 0x04
     988:	22 30       	cpi	r18, 0x02	; 2
     98a:	31 05       	cpc	r19, r1
     98c:	2c f4       	brge	.+10     	; 0x998 <DIO_init+0x54>
     98e:	8b 81       	ldd	r24, Y+3	; 0x03
     990:	9c 81       	ldd	r25, Y+4	; 0x04
     992:	00 97       	sbiw	r24, 0x00	; 0
     994:	71 f0       	breq	.+28     	; 0x9b2 <DIO_init+0x6e>
     996:	34 c1       	rjmp	.+616    	; 0xc00 <DIO_init+0x2bc>
     998:	2b 81       	ldd	r18, Y+3	; 0x03
     99a:	3c 81       	ldd	r19, Y+4	; 0x04
     99c:	22 30       	cpi	r18, 0x02	; 2
     99e:	31 05       	cpc	r19, r1
     9a0:	09 f4       	brne	.+2      	; 0x9a4 <DIO_init+0x60>
     9a2:	9b c0       	rjmp	.+310    	; 0xada <DIO_init+0x196>
     9a4:	8b 81       	ldd	r24, Y+3	; 0x03
     9a6:	9c 81       	ldd	r25, Y+4	; 0x04
     9a8:	83 30       	cpi	r24, 0x03	; 3
     9aa:	91 05       	cpc	r25, r1
     9ac:	09 f4       	brne	.+2      	; 0x9b0 <DIO_init+0x6c>
     9ae:	df c0       	rjmp	.+446    	; 0xb6e <DIO_init+0x22a>
     9b0:	27 c1       	rjmp	.+590    	; 0xc00 <DIO_init+0x2bc>
		case PORT_A:
			if(pin_config[i].IO==OUTPUT)
     9b2:	29 81       	ldd	r18, Y+1	; 0x01
     9b4:	3a 81       	ldd	r19, Y+2	; 0x02
     9b6:	c9 01       	movw	r24, r18
     9b8:	88 0f       	add	r24, r24
     9ba:	99 1f       	adc	r25, r25
     9bc:	82 0f       	add	r24, r18
     9be:	93 1f       	adc	r25, r19
     9c0:	fc 01       	movw	r30, r24
     9c2:	ee 59       	subi	r30, 0x9E	; 158
     9c4:	ff 4f       	sbci	r31, 0xFF	; 255
     9c6:	80 81       	ld	r24, Z
     9c8:	81 30       	cpi	r24, 0x01	; 1
     9ca:	f1 f4       	brne	.+60     	; 0xa08 <DIO_init+0xc4>
			{
				SET_BIT(DDRA,pin_config[i].PIN);
     9cc:	aa e3       	ldi	r26, 0x3A	; 58
     9ce:	b0 e0       	ldi	r27, 0x00	; 0
     9d0:	ea e3       	ldi	r30, 0x3A	; 58
     9d2:	f0 e0       	ldi	r31, 0x00	; 0
     9d4:	80 81       	ld	r24, Z
     9d6:	48 2f       	mov	r20, r24
     9d8:	29 81       	ldd	r18, Y+1	; 0x01
     9da:	3a 81       	ldd	r19, Y+2	; 0x02
     9dc:	c9 01       	movw	r24, r18
     9de:	88 0f       	add	r24, r24
     9e0:	99 1f       	adc	r25, r25
     9e2:	82 0f       	add	r24, r18
     9e4:	93 1f       	adc	r25, r19
     9e6:	fc 01       	movw	r30, r24
     9e8:	ef 59       	subi	r30, 0x9F	; 159
     9ea:	ff 4f       	sbci	r31, 0xFF	; 255
     9ec:	80 81       	ld	r24, Z
     9ee:	28 2f       	mov	r18, r24
     9f0:	30 e0       	ldi	r19, 0x00	; 0
     9f2:	81 e0       	ldi	r24, 0x01	; 1
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	02 2e       	mov	r0, r18
     9f8:	02 c0       	rjmp	.+4      	; 0x9fe <DIO_init+0xba>
     9fa:	88 0f       	add	r24, r24
     9fc:	99 1f       	adc	r25, r25
     9fe:	0a 94       	dec	r0
     a00:	e2 f7       	brpl	.-8      	; 0x9fa <DIO_init+0xb6>
     a02:	84 2b       	or	r24, r20
     a04:	8c 93       	st	X, r24
     a06:	fc c0       	rjmp	.+504    	; 0xc00 <DIO_init+0x2bc>
			}
			else
			{
				CLR_BIT(DDRA,pin_config[i].PIN);
     a08:	aa e3       	ldi	r26, 0x3A	; 58
     a0a:	b0 e0       	ldi	r27, 0x00	; 0
     a0c:	ea e3       	ldi	r30, 0x3A	; 58
     a0e:	f0 e0       	ldi	r31, 0x00	; 0
     a10:	80 81       	ld	r24, Z
     a12:	48 2f       	mov	r20, r24
     a14:	29 81       	ldd	r18, Y+1	; 0x01
     a16:	3a 81       	ldd	r19, Y+2	; 0x02
     a18:	c9 01       	movw	r24, r18
     a1a:	88 0f       	add	r24, r24
     a1c:	99 1f       	adc	r25, r25
     a1e:	82 0f       	add	r24, r18
     a20:	93 1f       	adc	r25, r19
     a22:	fc 01       	movw	r30, r24
     a24:	ef 59       	subi	r30, 0x9F	; 159
     a26:	ff 4f       	sbci	r31, 0xFF	; 255
     a28:	80 81       	ld	r24, Z
     a2a:	28 2f       	mov	r18, r24
     a2c:	30 e0       	ldi	r19, 0x00	; 0
     a2e:	81 e0       	ldi	r24, 0x01	; 1
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	02 2e       	mov	r0, r18
     a34:	02 c0       	rjmp	.+4      	; 0xa3a <DIO_init+0xf6>
     a36:	88 0f       	add	r24, r24
     a38:	99 1f       	adc	r25, r25
     a3a:	0a 94       	dec	r0
     a3c:	e2 f7       	brpl	.-8      	; 0xa36 <DIO_init+0xf2>
     a3e:	80 95       	com	r24
     a40:	84 23       	and	r24, r20
     a42:	8c 93       	st	X, r24
     a44:	dd c0       	rjmp	.+442    	; 0xc00 <DIO_init+0x2bc>
			}
			break;
		case PORT_B:
					if(pin_config[i].IO==OUTPUT)
     a46:	29 81       	ldd	r18, Y+1	; 0x01
     a48:	3a 81       	ldd	r19, Y+2	; 0x02
     a4a:	c9 01       	movw	r24, r18
     a4c:	88 0f       	add	r24, r24
     a4e:	99 1f       	adc	r25, r25
     a50:	82 0f       	add	r24, r18
     a52:	93 1f       	adc	r25, r19
     a54:	fc 01       	movw	r30, r24
     a56:	ee 59       	subi	r30, 0x9E	; 158
     a58:	ff 4f       	sbci	r31, 0xFF	; 255
     a5a:	80 81       	ld	r24, Z
     a5c:	81 30       	cpi	r24, 0x01	; 1
     a5e:	f1 f4       	brne	.+60     	; 0xa9c <DIO_init+0x158>
					{
						SET_BIT(DDRB,pin_config[i].PIN);
     a60:	a7 e3       	ldi	r26, 0x37	; 55
     a62:	b0 e0       	ldi	r27, 0x00	; 0
     a64:	e7 e3       	ldi	r30, 0x37	; 55
     a66:	f0 e0       	ldi	r31, 0x00	; 0
     a68:	80 81       	ld	r24, Z
     a6a:	48 2f       	mov	r20, r24
     a6c:	29 81       	ldd	r18, Y+1	; 0x01
     a6e:	3a 81       	ldd	r19, Y+2	; 0x02
     a70:	c9 01       	movw	r24, r18
     a72:	88 0f       	add	r24, r24
     a74:	99 1f       	adc	r25, r25
     a76:	82 0f       	add	r24, r18
     a78:	93 1f       	adc	r25, r19
     a7a:	fc 01       	movw	r30, r24
     a7c:	ef 59       	subi	r30, 0x9F	; 159
     a7e:	ff 4f       	sbci	r31, 0xFF	; 255
     a80:	80 81       	ld	r24, Z
     a82:	28 2f       	mov	r18, r24
     a84:	30 e0       	ldi	r19, 0x00	; 0
     a86:	81 e0       	ldi	r24, 0x01	; 1
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	02 2e       	mov	r0, r18
     a8c:	02 c0       	rjmp	.+4      	; 0xa92 <DIO_init+0x14e>
     a8e:	88 0f       	add	r24, r24
     a90:	99 1f       	adc	r25, r25
     a92:	0a 94       	dec	r0
     a94:	e2 f7       	brpl	.-8      	; 0xa8e <DIO_init+0x14a>
     a96:	84 2b       	or	r24, r20
     a98:	8c 93       	st	X, r24
     a9a:	b2 c0       	rjmp	.+356    	; 0xc00 <DIO_init+0x2bc>
					}
					else
					{
						CLR_BIT(DDRB,pin_config[i].PIN);
     a9c:	a7 e3       	ldi	r26, 0x37	; 55
     a9e:	b0 e0       	ldi	r27, 0x00	; 0
     aa0:	e7 e3       	ldi	r30, 0x37	; 55
     aa2:	f0 e0       	ldi	r31, 0x00	; 0
     aa4:	80 81       	ld	r24, Z
     aa6:	48 2f       	mov	r20, r24
     aa8:	29 81       	ldd	r18, Y+1	; 0x01
     aaa:	3a 81       	ldd	r19, Y+2	; 0x02
     aac:	c9 01       	movw	r24, r18
     aae:	88 0f       	add	r24, r24
     ab0:	99 1f       	adc	r25, r25
     ab2:	82 0f       	add	r24, r18
     ab4:	93 1f       	adc	r25, r19
     ab6:	fc 01       	movw	r30, r24
     ab8:	ef 59       	subi	r30, 0x9F	; 159
     aba:	ff 4f       	sbci	r31, 0xFF	; 255
     abc:	80 81       	ld	r24, Z
     abe:	28 2f       	mov	r18, r24
     ac0:	30 e0       	ldi	r19, 0x00	; 0
     ac2:	81 e0       	ldi	r24, 0x01	; 1
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	02 2e       	mov	r0, r18
     ac8:	02 c0       	rjmp	.+4      	; 0xace <DIO_init+0x18a>
     aca:	88 0f       	add	r24, r24
     acc:	99 1f       	adc	r25, r25
     ace:	0a 94       	dec	r0
     ad0:	e2 f7       	brpl	.-8      	; 0xaca <DIO_init+0x186>
     ad2:	80 95       	com	r24
     ad4:	84 23       	and	r24, r20
     ad6:	8c 93       	st	X, r24
     ad8:	93 c0       	rjmp	.+294    	; 0xc00 <DIO_init+0x2bc>
					}
			break;

		case PORT_C:
					if(pin_config[i].IO==OUTPUT)
     ada:	29 81       	ldd	r18, Y+1	; 0x01
     adc:	3a 81       	ldd	r19, Y+2	; 0x02
     ade:	c9 01       	movw	r24, r18
     ae0:	88 0f       	add	r24, r24
     ae2:	99 1f       	adc	r25, r25
     ae4:	82 0f       	add	r24, r18
     ae6:	93 1f       	adc	r25, r19
     ae8:	fc 01       	movw	r30, r24
     aea:	ee 59       	subi	r30, 0x9E	; 158
     aec:	ff 4f       	sbci	r31, 0xFF	; 255
     aee:	80 81       	ld	r24, Z
     af0:	81 30       	cpi	r24, 0x01	; 1
     af2:	f1 f4       	brne	.+60     	; 0xb30 <DIO_init+0x1ec>
					{
						SET_BIT(DDRC,pin_config[i].PIN);
     af4:	a4 e3       	ldi	r26, 0x34	; 52
     af6:	b0 e0       	ldi	r27, 0x00	; 0
     af8:	e4 e3       	ldi	r30, 0x34	; 52
     afa:	f0 e0       	ldi	r31, 0x00	; 0
     afc:	80 81       	ld	r24, Z
     afe:	48 2f       	mov	r20, r24
     b00:	29 81       	ldd	r18, Y+1	; 0x01
     b02:	3a 81       	ldd	r19, Y+2	; 0x02
     b04:	c9 01       	movw	r24, r18
     b06:	88 0f       	add	r24, r24
     b08:	99 1f       	adc	r25, r25
     b0a:	82 0f       	add	r24, r18
     b0c:	93 1f       	adc	r25, r19
     b0e:	fc 01       	movw	r30, r24
     b10:	ef 59       	subi	r30, 0x9F	; 159
     b12:	ff 4f       	sbci	r31, 0xFF	; 255
     b14:	80 81       	ld	r24, Z
     b16:	28 2f       	mov	r18, r24
     b18:	30 e0       	ldi	r19, 0x00	; 0
     b1a:	81 e0       	ldi	r24, 0x01	; 1
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	02 2e       	mov	r0, r18
     b20:	02 c0       	rjmp	.+4      	; 0xb26 <DIO_init+0x1e2>
     b22:	88 0f       	add	r24, r24
     b24:	99 1f       	adc	r25, r25
     b26:	0a 94       	dec	r0
     b28:	e2 f7       	brpl	.-8      	; 0xb22 <DIO_init+0x1de>
     b2a:	84 2b       	or	r24, r20
     b2c:	8c 93       	st	X, r24
     b2e:	68 c0       	rjmp	.+208    	; 0xc00 <DIO_init+0x2bc>
					}
					else
					{
						CLR_BIT(DDRC,pin_config[i].PIN);
     b30:	a4 e3       	ldi	r26, 0x34	; 52
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	e4 e3       	ldi	r30, 0x34	; 52
     b36:	f0 e0       	ldi	r31, 0x00	; 0
     b38:	80 81       	ld	r24, Z
     b3a:	48 2f       	mov	r20, r24
     b3c:	29 81       	ldd	r18, Y+1	; 0x01
     b3e:	3a 81       	ldd	r19, Y+2	; 0x02
     b40:	c9 01       	movw	r24, r18
     b42:	88 0f       	add	r24, r24
     b44:	99 1f       	adc	r25, r25
     b46:	82 0f       	add	r24, r18
     b48:	93 1f       	adc	r25, r19
     b4a:	fc 01       	movw	r30, r24
     b4c:	ef 59       	subi	r30, 0x9F	; 159
     b4e:	ff 4f       	sbci	r31, 0xFF	; 255
     b50:	80 81       	ld	r24, Z
     b52:	28 2f       	mov	r18, r24
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	81 e0       	ldi	r24, 0x01	; 1
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	02 2e       	mov	r0, r18
     b5c:	02 c0       	rjmp	.+4      	; 0xb62 <DIO_init+0x21e>
     b5e:	88 0f       	add	r24, r24
     b60:	99 1f       	adc	r25, r25
     b62:	0a 94       	dec	r0
     b64:	e2 f7       	brpl	.-8      	; 0xb5e <DIO_init+0x21a>
     b66:	80 95       	com	r24
     b68:	84 23       	and	r24, r20
     b6a:	8c 93       	st	X, r24
     b6c:	49 c0       	rjmp	.+146    	; 0xc00 <DIO_init+0x2bc>
					}
			break;
		case PORT_D:
					if(pin_config[i].IO==OUTPUT)
     b6e:	29 81       	ldd	r18, Y+1	; 0x01
     b70:	3a 81       	ldd	r19, Y+2	; 0x02
     b72:	c9 01       	movw	r24, r18
     b74:	88 0f       	add	r24, r24
     b76:	99 1f       	adc	r25, r25
     b78:	82 0f       	add	r24, r18
     b7a:	93 1f       	adc	r25, r19
     b7c:	fc 01       	movw	r30, r24
     b7e:	ee 59       	subi	r30, 0x9E	; 158
     b80:	ff 4f       	sbci	r31, 0xFF	; 255
     b82:	80 81       	ld	r24, Z
     b84:	81 30       	cpi	r24, 0x01	; 1
     b86:	f1 f4       	brne	.+60     	; 0xbc4 <DIO_init+0x280>
					{
						SET_BIT(DDRD,pin_config[i].PIN);
     b88:	a1 e3       	ldi	r26, 0x31	; 49
     b8a:	b0 e0       	ldi	r27, 0x00	; 0
     b8c:	e1 e3       	ldi	r30, 0x31	; 49
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	80 81       	ld	r24, Z
     b92:	48 2f       	mov	r20, r24
     b94:	29 81       	ldd	r18, Y+1	; 0x01
     b96:	3a 81       	ldd	r19, Y+2	; 0x02
     b98:	c9 01       	movw	r24, r18
     b9a:	88 0f       	add	r24, r24
     b9c:	99 1f       	adc	r25, r25
     b9e:	82 0f       	add	r24, r18
     ba0:	93 1f       	adc	r25, r19
     ba2:	fc 01       	movw	r30, r24
     ba4:	ef 59       	subi	r30, 0x9F	; 159
     ba6:	ff 4f       	sbci	r31, 0xFF	; 255
     ba8:	80 81       	ld	r24, Z
     baa:	28 2f       	mov	r18, r24
     bac:	30 e0       	ldi	r19, 0x00	; 0
     bae:	81 e0       	ldi	r24, 0x01	; 1
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	02 2e       	mov	r0, r18
     bb4:	02 c0       	rjmp	.+4      	; 0xbba <DIO_init+0x276>
     bb6:	88 0f       	add	r24, r24
     bb8:	99 1f       	adc	r25, r25
     bba:	0a 94       	dec	r0
     bbc:	e2 f7       	brpl	.-8      	; 0xbb6 <DIO_init+0x272>
     bbe:	84 2b       	or	r24, r20
     bc0:	8c 93       	st	X, r24
     bc2:	1e c0       	rjmp	.+60     	; 0xc00 <DIO_init+0x2bc>
					}
					else
					{
						CLR_BIT(DDRD,pin_config[i].PIN);
     bc4:	a1 e3       	ldi	r26, 0x31	; 49
     bc6:	b0 e0       	ldi	r27, 0x00	; 0
     bc8:	e1 e3       	ldi	r30, 0x31	; 49
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	80 81       	ld	r24, Z
     bce:	48 2f       	mov	r20, r24
     bd0:	29 81       	ldd	r18, Y+1	; 0x01
     bd2:	3a 81       	ldd	r19, Y+2	; 0x02
     bd4:	c9 01       	movw	r24, r18
     bd6:	88 0f       	add	r24, r24
     bd8:	99 1f       	adc	r25, r25
     bda:	82 0f       	add	r24, r18
     bdc:	93 1f       	adc	r25, r19
     bde:	fc 01       	movw	r30, r24
     be0:	ef 59       	subi	r30, 0x9F	; 159
     be2:	ff 4f       	sbci	r31, 0xFF	; 255
     be4:	80 81       	ld	r24, Z
     be6:	28 2f       	mov	r18, r24
     be8:	30 e0       	ldi	r19, 0x00	; 0
     bea:	81 e0       	ldi	r24, 0x01	; 1
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	02 2e       	mov	r0, r18
     bf0:	02 c0       	rjmp	.+4      	; 0xbf6 <DIO_init+0x2b2>
     bf2:	88 0f       	add	r24, r24
     bf4:	99 1f       	adc	r25, r25
     bf6:	0a 94       	dec	r0
     bf8:	e2 f7       	brpl	.-8      	; 0xbf2 <DIO_init+0x2ae>
     bfa:	80 95       	com	r24
     bfc:	84 23       	and	r24, r20
     bfe:	8c 93       	st	X, r24
};

void DIO_init(void)
{
	int i=0;
	for(i=0;i<sizeof(pin_config)/sizeof(pin_config[0]);i++)
     c00:	89 81       	ldd	r24, Y+1	; 0x01
     c02:	9a 81       	ldd	r25, Y+2	; 0x02
     c04:	01 96       	adiw	r24, 0x01	; 1
     c06:	9a 83       	std	Y+2, r25	; 0x02
     c08:	89 83       	std	Y+1, r24	; 0x01
     c0a:	89 81       	ldd	r24, Y+1	; 0x01
     c0c:	9a 81       	ldd	r25, Y+2	; 0x02
     c0e:	8d 31       	cpi	r24, 0x1D	; 29
     c10:	91 05       	cpc	r25, r1
     c12:	08 f4       	brcc	.+2      	; 0xc16 <DIO_init+0x2d2>
     c14:	a2 ce       	rjmp	.-700    	; 0x95a <DIO_init+0x16>



		}
	}
}
     c16:	0f 90       	pop	r0
     c18:	0f 90       	pop	r0
     c1a:	0f 90       	pop	r0
     c1c:	0f 90       	pop	r0
     c1e:	cf 91       	pop	r28
     c20:	df 91       	pop	r29
     c22:	08 95       	ret

00000c24 <ADC_init>:
 *  Created on: Oct 2, 2021
 *      Author: HP
 */
#include"ADC.h"

void ADC_init(){
     c24:	df 93       	push	r29
     c26:	cf 93       	push	r28
     c28:	cd b7       	in	r28, 0x3d	; 61
     c2a:	de b7       	in	r29, 0x3e	; 62

#if(ADC_START == ENABLE)
	SET_BIT(ADCSRA,ADEN);
     c2c:	a6 e2       	ldi	r26, 0x26	; 38
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	e6 e2       	ldi	r30, 0x26	; 38
     c32:	f0 e0       	ldi	r31, 0x00	; 0
     c34:	80 81       	ld	r24, Z
     c36:	80 68       	ori	r24, 0x80	; 128
     c38:	8c 93       	st	X, r24
#else
	CLR_BIT(ADCSRA,ADEN);
#endif

#if ADSC_START == ENABLE
	SET_BIT(ADCSRA,ADSC);
     c3a:	a6 e2       	ldi	r26, 0x26	; 38
     c3c:	b0 e0       	ldi	r27, 0x00	; 0
     c3e:	e6 e2       	ldi	r30, 0x26	; 38
     c40:	f0 e0       	ldi	r31, 0x00	; 0
     c42:	80 81       	ld	r24, Z
     c44:	80 64       	ori	r24, 0x40	; 64
     c46:	8c 93       	st	X, r24


#if(ADC_INTERRUPT_ENABLE == ENABLE)
	SET_BIT(ADCSRA,ADIE);
#else
	CLR_BIT(ADCSRA,ADIE);
     c48:	a6 e2       	ldi	r26, 0x26	; 38
     c4a:	b0 e0       	ldi	r27, 0x00	; 0
     c4c:	e6 e2       	ldi	r30, 0x26	; 38
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	80 81       	ld	r24, Z
     c52:	87 7f       	andi	r24, 0xF7	; 247
     c54:	8c 93       	st	X, r24
#endif

#if(ADC_LeftAdjust == ENABLE)
	SET_BIT(ADMUX,ADLAR);
     c56:	a7 e2       	ldi	r26, 0x27	; 39
     c58:	b0 e0       	ldi	r27, 0x00	; 0
     c5a:	e7 e2       	ldi	r30, 0x27	; 39
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	80 81       	ld	r24, Z
     c60:	80 62       	ori	r24, 0x20	; 32
     c62:	8c 93       	st	X, r24
    CLR_BIT(ADMUX,REFS1);
	}

#elif(ADC_MODE == ADC_AVCC_VOLTAGE)
	{
		SET_BIT(ADMUX,REFS0);
     c64:	a7 e2       	ldi	r26, 0x27	; 39
     c66:	b0 e0       	ldi	r27, 0x00	; 0
     c68:	e7 e2       	ldi	r30, 0x27	; 39
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	80 81       	ld	r24, Z
     c6e:	80 64       	ori	r24, 0x40	; 64
     c70:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,REFS1);
     c72:	a7 e2       	ldi	r26, 0x27	; 39
     c74:	b0 e0       	ldi	r27, 0x00	; 0
     c76:	e7 e2       	ldi	r30, 0x27	; 39
     c78:	f0 e0       	ldi	r31, 0x00	; 0
     c7a:	80 81       	ld	r24, Z
     c7c:	8f 77       	andi	r24, 0x7F	; 127
     c7e:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADPS2);
	}

#elif(FREQ_PRESCALE == PRESCALE_64)
	{
		CLR_BIT(ADCSRA,ADPS0);
     c80:	a6 e2       	ldi	r26, 0x26	; 38
     c82:	b0 e0       	ldi	r27, 0x00	; 0
     c84:	e6 e2       	ldi	r30, 0x26	; 38
     c86:	f0 e0       	ldi	r31, 0x00	; 0
     c88:	80 81       	ld	r24, Z
     c8a:	8e 7f       	andi	r24, 0xFE	; 254
     c8c:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADPS1);
     c8e:	a6 e2       	ldi	r26, 0x26	; 38
     c90:	b0 e0       	ldi	r27, 0x00	; 0
     c92:	e6 e2       	ldi	r30, 0x26	; 38
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	80 81       	ld	r24, Z
     c98:	82 60       	ori	r24, 0x02	; 2
     c9a:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADPS2);
     c9c:	a6 e2       	ldi	r26, 0x26	; 38
     c9e:	b0 e0       	ldi	r27, 0x00	; 0
     ca0:	e6 e2       	ldi	r30, 0x26	; 38
     ca2:	f0 e0       	ldi	r31, 0x00	; 0
     ca4:	80 81       	ld	r24, Z
     ca6:	84 60       	ori	r24, 0x04	; 4
     ca8:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADPS0);
		SET_BIT(ADCSRA,ADPS1);
		SET_BIT(ADCSRA,ADPS2);
	}
#endif
}
     caa:	cf 91       	pop	r28
     cac:	df 91       	pop	r29
     cae:	08 95       	ret

00000cb0 <ADC_read>:

uint16 ADC_read(uint8 Channel){
     cb0:	df 93       	push	r29
     cb2:	cf 93       	push	r28
     cb4:	0f 92       	push	r0
     cb6:	cd b7       	in	r28, 0x3d	; 61
     cb8:	de b7       	in	r29, 0x3e	; 62
     cba:	89 83       	std	Y+1, r24	; 0x01

	ADMUX = (ADMUX & 0b11100000) | Channel;
     cbc:	a7 e2       	ldi	r26, 0x27	; 39
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	e7 e2       	ldi	r30, 0x27	; 39
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	98 2f       	mov	r25, r24
     cc8:	90 7e       	andi	r25, 0xE0	; 224
     cca:	89 81       	ldd	r24, Y+1	; 0x01
     ccc:	89 2b       	or	r24, r25
     cce:	8c 93       	st	X, r24

	SET_BIT(ADCSRA,ADSC); //Start Conversion
     cd0:	a6 e2       	ldi	r26, 0x26	; 38
     cd2:	b0 e0       	ldi	r27, 0x00	; 0
     cd4:	e6 e2       	ldi	r30, 0x26	; 38
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	80 81       	ld	r24, Z
     cda:	80 64       	ori	r24, 0x40	; 64
     cdc:	8c 93       	st	X, r24
	while(GET_BIT(ADCSRA,ADIF)==0); //Wait for Finishing Conversion
     cde:	e6 e2       	ldi	r30, 0x26	; 38
     ce0:	f0 e0       	ldi	r31, 0x00	; 0
     ce2:	80 81       	ld	r24, Z
     ce4:	82 95       	swap	r24
     ce6:	8f 70       	andi	r24, 0x0F	; 15
     ce8:	88 2f       	mov	r24, r24
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	81 70       	andi	r24, 0x01	; 1
     cee:	90 70       	andi	r25, 0x00	; 0
     cf0:	00 97       	sbiw	r24, 0x00	; 0
     cf2:	a9 f3       	breq	.-22     	; 0xcde <ADC_read+0x2e>
	SET_BIT(ADCSRA,ADIF);
     cf4:	a6 e2       	ldi	r26, 0x26	; 38
     cf6:	b0 e0       	ldi	r27, 0x00	; 0
     cf8:	e6 e2       	ldi	r30, 0x26	; 38
     cfa:	f0 e0       	ldi	r31, 0x00	; 0
     cfc:	80 81       	ld	r24, Z
     cfe:	80 61       	ori	r24, 0x10	; 16
     d00:	8c 93       	st	X, r24
	return ADC;
     d02:	e4 e2       	ldi	r30, 0x24	; 36
     d04:	f0 e0       	ldi	r31, 0x00	; 0
     d06:	80 81       	ld	r24, Z
     d08:	91 81       	ldd	r25, Z+1	; 0x01
}
     d0a:	0f 90       	pop	r0
     d0c:	cf 91       	pop	r28
     d0e:	df 91       	pop	r29
     d10:	08 95       	ret

00000d12 <steppermotor>:
 *  Created on: Sep 25, 2021
 *      Author: Ali Ehab
 */
#include "steppermotor.h"
void steppermotor(void)
{
     d12:	0f 93       	push	r16
     d14:	1f 93       	push	r17
     d16:	df 93       	push	r29
     d18:	cf 93       	push	r28
     d1a:	cd b7       	in	r28, 0x3d	; 61
     d1c:	de b7       	in	r29, 0x3e	; 62
     d1e:	c0 56       	subi	r28, 0x60	; 96
     d20:	d0 40       	sbci	r29, 0x00	; 0
     d22:	0f b6       	in	r0, 0x3f	; 63
     d24:	f8 94       	cli
     d26:	de bf       	out	0x3e, r29	; 62
     d28:	0f be       	out	0x3f, r0	; 63
     d2a:	cd bf       	out	0x3d, r28	; 61
	DIO_write(stepper_org_1,HIGH);
     d2c:	83 e1       	ldi	r24, 0x13	; 19
     d2e:	61 e0       	ldi	r22, 0x01	; 1
     d30:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_write>
	DIO_write(stepper_yel_2,LOW);
     d34:	84 e1       	ldi	r24, 0x14	; 20
     d36:	60 e0       	ldi	r22, 0x00	; 0
     d38:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_write>
	DIO_write(stepper_pink_3,LOW);
     d3c:	85 e1       	ldi	r24, 0x15	; 21
     d3e:	60 e0       	ldi	r22, 0x00	; 0
     d40:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_write>
	DIO_write(stepper_blu_4,LOW);
     d44:	86 e1       	ldi	r24, 0x16	; 22
     d46:	60 e0       	ldi	r22, 0x00	; 0
     d48:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_write>
     d4c:	fe 01       	movw	r30, r28
     d4e:	e3 5a       	subi	r30, 0xA3	; 163
     d50:	ff 4f       	sbci	r31, 0xFF	; 255
     d52:	80 e0       	ldi	r24, 0x00	; 0
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	a8 ec       	ldi	r26, 0xC8	; 200
     d58:	b2 e4       	ldi	r27, 0x42	; 66
     d5a:	80 83       	st	Z, r24
     d5c:	91 83       	std	Z+1, r25	; 0x01
     d5e:	a2 83       	std	Z+2, r26	; 0x02
     d60:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     d62:	8e 01       	movw	r16, r28
     d64:	07 5a       	subi	r16, 0xA7	; 167
     d66:	1f 4f       	sbci	r17, 0xFF	; 255
     d68:	fe 01       	movw	r30, r28
     d6a:	e3 5a       	subi	r30, 0xA3	; 163
     d6c:	ff 4f       	sbci	r31, 0xFF	; 255
     d6e:	60 81       	ld	r22, Z
     d70:	71 81       	ldd	r23, Z+1	; 0x01
     d72:	82 81       	ldd	r24, Z+2	; 0x02
     d74:	93 81       	ldd	r25, Z+3	; 0x03
     d76:	2b ea       	ldi	r18, 0xAB	; 171
     d78:	3a ea       	ldi	r19, 0xAA	; 170
     d7a:	4a ea       	ldi	r20, 0xAA	; 170
     d7c:	50 e4       	ldi	r21, 0x40	; 64
     d7e:	0e 94 59 21 	call	0x42b2	; 0x42b2 <__mulsf3>
     d82:	dc 01       	movw	r26, r24
     d84:	cb 01       	movw	r24, r22
     d86:	f8 01       	movw	r30, r16
     d88:	80 83       	st	Z, r24
     d8a:	91 83       	std	Z+1, r25	; 0x01
     d8c:	a2 83       	std	Z+2, r26	; 0x02
     d8e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     d90:	fe 01       	movw	r30, r28
     d92:	e7 5a       	subi	r30, 0xA7	; 167
     d94:	ff 4f       	sbci	r31, 0xFF	; 255
     d96:	60 81       	ld	r22, Z
     d98:	71 81       	ldd	r23, Z+1	; 0x01
     d9a:	82 81       	ldd	r24, Z+2	; 0x02
     d9c:	93 81       	ldd	r25, Z+3	; 0x03
     d9e:	20 e0       	ldi	r18, 0x00	; 0
     da0:	30 e0       	ldi	r19, 0x00	; 0
     da2:	40 e8       	ldi	r20, 0x80	; 128
     da4:	5f e3       	ldi	r21, 0x3F	; 63
     da6:	0e 94 5f 23 	call	0x46be	; 0x46be <__ltsf2>
     daa:	88 23       	and	r24, r24
     dac:	34 f4       	brge	.+12     	; 0xdba <steppermotor+0xa8>
		__ticks = 1;
     dae:	fe 01       	movw	r30, r28
     db0:	e8 5a       	subi	r30, 0xA8	; 168
     db2:	ff 4f       	sbci	r31, 0xFF	; 255
     db4:	81 e0       	ldi	r24, 0x01	; 1
     db6:	80 83       	st	Z, r24
     db8:	e0 c0       	rjmp	.+448    	; 0xf7a <steppermotor+0x268>
	else if (__tmp > 255)
     dba:	fe 01       	movw	r30, r28
     dbc:	e7 5a       	subi	r30, 0xA7	; 167
     dbe:	ff 4f       	sbci	r31, 0xFF	; 255
     dc0:	60 81       	ld	r22, Z
     dc2:	71 81       	ldd	r23, Z+1	; 0x01
     dc4:	82 81       	ldd	r24, Z+2	; 0x02
     dc6:	93 81       	ldd	r25, Z+3	; 0x03
     dc8:	20 e0       	ldi	r18, 0x00	; 0
     dca:	30 e0       	ldi	r19, 0x00	; 0
     dcc:	4f e7       	ldi	r20, 0x7F	; 127
     dce:	53 e4       	ldi	r21, 0x43	; 67
     dd0:	0e 94 ff 22 	call	0x45fe	; 0x45fe <__gtsf2>
     dd4:	18 16       	cp	r1, r24
     dd6:	0c f0       	brlt	.+2      	; 0xdda <steppermotor+0xc8>
     dd8:	c0 c0       	rjmp	.+384    	; 0xf5a <steppermotor+0x248>
	{
		_delay_ms(__us / 1000.0);
     dda:	fe 01       	movw	r30, r28
     ddc:	e3 5a       	subi	r30, 0xA3	; 163
     dde:	ff 4f       	sbci	r31, 0xFF	; 255
     de0:	60 81       	ld	r22, Z
     de2:	71 81       	ldd	r23, Z+1	; 0x01
     de4:	82 81       	ldd	r24, Z+2	; 0x02
     de6:	93 81       	ldd	r25, Z+3	; 0x03
     de8:	20 e0       	ldi	r18, 0x00	; 0
     dea:	30 e0       	ldi	r19, 0x00	; 0
     dec:	4a e7       	ldi	r20, 0x7A	; 122
     dee:	54 e4       	ldi	r21, 0x44	; 68
     df0:	0e 94 53 22 	call	0x44a6	; 0x44a6 <__divsf3>
     df4:	dc 01       	movw	r26, r24
     df6:	cb 01       	movw	r24, r22
     df8:	fe 01       	movw	r30, r28
     dfa:	ec 5a       	subi	r30, 0xAC	; 172
     dfc:	ff 4f       	sbci	r31, 0xFF	; 255
     dfe:	80 83       	st	Z, r24
     e00:	91 83       	std	Z+1, r25	; 0x01
     e02:	a2 83       	std	Z+2, r26	; 0x02
     e04:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e06:	8e 01       	movw	r16, r28
     e08:	00 5b       	subi	r16, 0xB0	; 176
     e0a:	1f 4f       	sbci	r17, 0xFF	; 255
     e0c:	fe 01       	movw	r30, r28
     e0e:	ec 5a       	subi	r30, 0xAC	; 172
     e10:	ff 4f       	sbci	r31, 0xFF	; 255
     e12:	60 81       	ld	r22, Z
     e14:	71 81       	ldd	r23, Z+1	; 0x01
     e16:	82 81       	ldd	r24, Z+2	; 0x02
     e18:	93 81       	ldd	r25, Z+3	; 0x03
     e1a:	20 e0       	ldi	r18, 0x00	; 0
     e1c:	30 e0       	ldi	r19, 0x00	; 0
     e1e:	4a e7       	ldi	r20, 0x7A	; 122
     e20:	55 e4       	ldi	r21, 0x45	; 69
     e22:	0e 94 59 21 	call	0x42b2	; 0x42b2 <__mulsf3>
     e26:	dc 01       	movw	r26, r24
     e28:	cb 01       	movw	r24, r22
     e2a:	f8 01       	movw	r30, r16
     e2c:	80 83       	st	Z, r24
     e2e:	91 83       	std	Z+1, r25	; 0x01
     e30:	a2 83       	std	Z+2, r26	; 0x02
     e32:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     e34:	fe 01       	movw	r30, r28
     e36:	e0 5b       	subi	r30, 0xB0	; 176
     e38:	ff 4f       	sbci	r31, 0xFF	; 255
     e3a:	60 81       	ld	r22, Z
     e3c:	71 81       	ldd	r23, Z+1	; 0x01
     e3e:	82 81       	ldd	r24, Z+2	; 0x02
     e40:	93 81       	ldd	r25, Z+3	; 0x03
     e42:	20 e0       	ldi	r18, 0x00	; 0
     e44:	30 e0       	ldi	r19, 0x00	; 0
     e46:	40 e8       	ldi	r20, 0x80	; 128
     e48:	5f e3       	ldi	r21, 0x3F	; 63
     e4a:	0e 94 5f 23 	call	0x46be	; 0x46be <__ltsf2>
     e4e:	88 23       	and	r24, r24
     e50:	44 f4       	brge	.+16     	; 0xe62 <steppermotor+0x150>
		__ticks = 1;
     e52:	fe 01       	movw	r30, r28
     e54:	e2 5b       	subi	r30, 0xB2	; 178
     e56:	ff 4f       	sbci	r31, 0xFF	; 255
     e58:	81 e0       	ldi	r24, 0x01	; 1
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	91 83       	std	Z+1, r25	; 0x01
     e5e:	80 83       	st	Z, r24
     e60:	64 c0       	rjmp	.+200    	; 0xf2a <steppermotor+0x218>
	else if (__tmp > 65535)
     e62:	fe 01       	movw	r30, r28
     e64:	e0 5b       	subi	r30, 0xB0	; 176
     e66:	ff 4f       	sbci	r31, 0xFF	; 255
     e68:	60 81       	ld	r22, Z
     e6a:	71 81       	ldd	r23, Z+1	; 0x01
     e6c:	82 81       	ldd	r24, Z+2	; 0x02
     e6e:	93 81       	ldd	r25, Z+3	; 0x03
     e70:	20 e0       	ldi	r18, 0x00	; 0
     e72:	3f ef       	ldi	r19, 0xFF	; 255
     e74:	4f e7       	ldi	r20, 0x7F	; 127
     e76:	57 e4       	ldi	r21, 0x47	; 71
     e78:	0e 94 ff 22 	call	0x45fe	; 0x45fe <__gtsf2>
     e7c:	18 16       	cp	r1, r24
     e7e:	0c f0       	brlt	.+2      	; 0xe82 <steppermotor+0x170>
     e80:	43 c0       	rjmp	.+134    	; 0xf08 <steppermotor+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e82:	fe 01       	movw	r30, r28
     e84:	ec 5a       	subi	r30, 0xAC	; 172
     e86:	ff 4f       	sbci	r31, 0xFF	; 255
     e88:	60 81       	ld	r22, Z
     e8a:	71 81       	ldd	r23, Z+1	; 0x01
     e8c:	82 81       	ldd	r24, Z+2	; 0x02
     e8e:	93 81       	ldd	r25, Z+3	; 0x03
     e90:	20 e0       	ldi	r18, 0x00	; 0
     e92:	30 e0       	ldi	r19, 0x00	; 0
     e94:	40 e2       	ldi	r20, 0x20	; 32
     e96:	51 e4       	ldi	r21, 0x41	; 65
     e98:	0e 94 59 21 	call	0x42b2	; 0x42b2 <__mulsf3>
     e9c:	dc 01       	movw	r26, r24
     e9e:	cb 01       	movw	r24, r22
     ea0:	8e 01       	movw	r16, r28
     ea2:	02 5b       	subi	r16, 0xB2	; 178
     ea4:	1f 4f       	sbci	r17, 0xFF	; 255
     ea6:	bc 01       	movw	r22, r24
     ea8:	cd 01       	movw	r24, r26
     eaa:	0e 94 32 18 	call	0x3064	; 0x3064 <__fixunssfsi>
     eae:	dc 01       	movw	r26, r24
     eb0:	cb 01       	movw	r24, r22
     eb2:	f8 01       	movw	r30, r16
     eb4:	91 83       	std	Z+1, r25	; 0x01
     eb6:	80 83       	st	Z, r24
     eb8:	1f c0       	rjmp	.+62     	; 0xef8 <steppermotor+0x1e6>
     eba:	fe 01       	movw	r30, r28
     ebc:	e4 5b       	subi	r30, 0xB4	; 180
     ebe:	ff 4f       	sbci	r31, 0xFF	; 255
     ec0:	80 e9       	ldi	r24, 0x90	; 144
     ec2:	91 e0       	ldi	r25, 0x01	; 1
     ec4:	91 83       	std	Z+1, r25	; 0x01
     ec6:	80 83       	st	Z, r24
     ec8:	fe 01       	movw	r30, r28
     eca:	e4 5b       	subi	r30, 0xB4	; 180
     ecc:	ff 4f       	sbci	r31, 0xFF	; 255
     ece:	80 81       	ld	r24, Z
     ed0:	91 81       	ldd	r25, Z+1	; 0x01
     ed2:	01 97       	sbiw	r24, 0x01	; 1
     ed4:	f1 f7       	brne	.-4      	; 0xed2 <steppermotor+0x1c0>
     ed6:	fe 01       	movw	r30, r28
     ed8:	e4 5b       	subi	r30, 0xB4	; 180
     eda:	ff 4f       	sbci	r31, 0xFF	; 255
     edc:	91 83       	std	Z+1, r25	; 0x01
     ede:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ee0:	de 01       	movw	r26, r28
     ee2:	a2 5b       	subi	r26, 0xB2	; 178
     ee4:	bf 4f       	sbci	r27, 0xFF	; 255
     ee6:	fe 01       	movw	r30, r28
     ee8:	e2 5b       	subi	r30, 0xB2	; 178
     eea:	ff 4f       	sbci	r31, 0xFF	; 255
     eec:	80 81       	ld	r24, Z
     eee:	91 81       	ldd	r25, Z+1	; 0x01
     ef0:	01 97       	sbiw	r24, 0x01	; 1
     ef2:	11 96       	adiw	r26, 0x01	; 1
     ef4:	9c 93       	st	X, r25
     ef6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ef8:	fe 01       	movw	r30, r28
     efa:	e2 5b       	subi	r30, 0xB2	; 178
     efc:	ff 4f       	sbci	r31, 0xFF	; 255
     efe:	80 81       	ld	r24, Z
     f00:	91 81       	ldd	r25, Z+1	; 0x01
     f02:	00 97       	sbiw	r24, 0x00	; 0
     f04:	d1 f6       	brne	.-76     	; 0xeba <steppermotor+0x1a8>
     f06:	4b c0       	rjmp	.+150    	; 0xf9e <steppermotor+0x28c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f08:	8e 01       	movw	r16, r28
     f0a:	02 5b       	subi	r16, 0xB2	; 178
     f0c:	1f 4f       	sbci	r17, 0xFF	; 255
     f0e:	fe 01       	movw	r30, r28
     f10:	e0 5b       	subi	r30, 0xB0	; 176
     f12:	ff 4f       	sbci	r31, 0xFF	; 255
     f14:	60 81       	ld	r22, Z
     f16:	71 81       	ldd	r23, Z+1	; 0x01
     f18:	82 81       	ldd	r24, Z+2	; 0x02
     f1a:	93 81       	ldd	r25, Z+3	; 0x03
     f1c:	0e 94 32 18 	call	0x3064	; 0x3064 <__fixunssfsi>
     f20:	dc 01       	movw	r26, r24
     f22:	cb 01       	movw	r24, r22
     f24:	f8 01       	movw	r30, r16
     f26:	91 83       	std	Z+1, r25	; 0x01
     f28:	80 83       	st	Z, r24
     f2a:	de 01       	movw	r26, r28
     f2c:	a6 5b       	subi	r26, 0xB6	; 182
     f2e:	bf 4f       	sbci	r27, 0xFF	; 255
     f30:	fe 01       	movw	r30, r28
     f32:	e2 5b       	subi	r30, 0xB2	; 178
     f34:	ff 4f       	sbci	r31, 0xFF	; 255
     f36:	80 81       	ld	r24, Z
     f38:	91 81       	ldd	r25, Z+1	; 0x01
     f3a:	11 96       	adiw	r26, 0x01	; 1
     f3c:	9c 93       	st	X, r25
     f3e:	8e 93       	st	-X, r24
     f40:	fe 01       	movw	r30, r28
     f42:	e6 5b       	subi	r30, 0xB6	; 182
     f44:	ff 4f       	sbci	r31, 0xFF	; 255
     f46:	80 81       	ld	r24, Z
     f48:	91 81       	ldd	r25, Z+1	; 0x01
     f4a:	01 97       	sbiw	r24, 0x01	; 1
     f4c:	f1 f7       	brne	.-4      	; 0xf4a <steppermotor+0x238>
     f4e:	fe 01       	movw	r30, r28
     f50:	e6 5b       	subi	r30, 0xB6	; 182
     f52:	ff 4f       	sbci	r31, 0xFF	; 255
     f54:	91 83       	std	Z+1, r25	; 0x01
     f56:	80 83       	st	Z, r24
     f58:	22 c0       	rjmp	.+68     	; 0xf9e <steppermotor+0x28c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     f5a:	8e 01       	movw	r16, r28
     f5c:	08 5a       	subi	r16, 0xA8	; 168
     f5e:	1f 4f       	sbci	r17, 0xFF	; 255
     f60:	fe 01       	movw	r30, r28
     f62:	e7 5a       	subi	r30, 0xA7	; 167
     f64:	ff 4f       	sbci	r31, 0xFF	; 255
     f66:	60 81       	ld	r22, Z
     f68:	71 81       	ldd	r23, Z+1	; 0x01
     f6a:	82 81       	ldd	r24, Z+2	; 0x02
     f6c:	93 81       	ldd	r25, Z+3	; 0x03
     f6e:	0e 94 32 18 	call	0x3064	; 0x3064 <__fixunssfsi>
     f72:	dc 01       	movw	r26, r24
     f74:	cb 01       	movw	r24, r22
     f76:	f8 01       	movw	r30, r16
     f78:	80 83       	st	Z, r24
     f7a:	de 01       	movw	r26, r28
     f7c:	a7 5b       	subi	r26, 0xB7	; 183
     f7e:	bf 4f       	sbci	r27, 0xFF	; 255
     f80:	fe 01       	movw	r30, r28
     f82:	e8 5a       	subi	r30, 0xA8	; 168
     f84:	ff 4f       	sbci	r31, 0xFF	; 255
     f86:	80 81       	ld	r24, Z
     f88:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     f8a:	fe 01       	movw	r30, r28
     f8c:	e7 5b       	subi	r30, 0xB7	; 183
     f8e:	ff 4f       	sbci	r31, 0xFF	; 255
     f90:	80 81       	ld	r24, Z
     f92:	8a 95       	dec	r24
     f94:	f1 f7       	brne	.-4      	; 0xf92 <steppermotor+0x280>
     f96:	fe 01       	movw	r30, r28
     f98:	e7 5b       	subi	r30, 0xB7	; 183
     f9a:	ff 4f       	sbci	r31, 0xFF	; 255
     f9c:	80 83       	st	Z, r24

	_delay_us(100);

	DIO_write(stepper_org_1,LOW);
     f9e:	83 e1       	ldi	r24, 0x13	; 19
     fa0:	60 e0       	ldi	r22, 0x00	; 0
     fa2:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_write>
	DIO_write(stepper_yel_2,HIGH);
     fa6:	84 e1       	ldi	r24, 0x14	; 20
     fa8:	61 e0       	ldi	r22, 0x01	; 1
     faa:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_write>
	DIO_write(stepper_pink_3,LOW);
     fae:	85 e1       	ldi	r24, 0x15	; 21
     fb0:	60 e0       	ldi	r22, 0x00	; 0
     fb2:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_write>
	DIO_write(stepper_blu_4,LOW);
     fb6:	86 e1       	ldi	r24, 0x16	; 22
     fb8:	60 e0       	ldi	r22, 0x00	; 0
     fba:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_write>
     fbe:	fe 01       	movw	r30, r28
     fc0:	eb 5b       	subi	r30, 0xBB	; 187
     fc2:	ff 4f       	sbci	r31, 0xFF	; 255
     fc4:	80 e0       	ldi	r24, 0x00	; 0
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	a8 ec       	ldi	r26, 0xC8	; 200
     fca:	b2 e4       	ldi	r27, 0x42	; 66
     fcc:	80 83       	st	Z, r24
     fce:	91 83       	std	Z+1, r25	; 0x01
     fd0:	a2 83       	std	Z+2, r26	; 0x02
     fd2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     fd4:	8e 01       	movw	r16, r28
     fd6:	0f 5b       	subi	r16, 0xBF	; 191
     fd8:	1f 4f       	sbci	r17, 0xFF	; 255
     fda:	fe 01       	movw	r30, r28
     fdc:	eb 5b       	subi	r30, 0xBB	; 187
     fde:	ff 4f       	sbci	r31, 0xFF	; 255
     fe0:	60 81       	ld	r22, Z
     fe2:	71 81       	ldd	r23, Z+1	; 0x01
     fe4:	82 81       	ldd	r24, Z+2	; 0x02
     fe6:	93 81       	ldd	r25, Z+3	; 0x03
     fe8:	2b ea       	ldi	r18, 0xAB	; 171
     fea:	3a ea       	ldi	r19, 0xAA	; 170
     fec:	4a ea       	ldi	r20, 0xAA	; 170
     fee:	50 e4       	ldi	r21, 0x40	; 64
     ff0:	0e 94 59 21 	call	0x42b2	; 0x42b2 <__mulsf3>
     ff4:	dc 01       	movw	r26, r24
     ff6:	cb 01       	movw	r24, r22
     ff8:	f8 01       	movw	r30, r16
     ffa:	80 83       	st	Z, r24
     ffc:	91 83       	std	Z+1, r25	; 0x01
     ffe:	a2 83       	std	Z+2, r26	; 0x02
    1000:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1002:	fe 01       	movw	r30, r28
    1004:	ef 5b       	subi	r30, 0xBF	; 191
    1006:	ff 4f       	sbci	r31, 0xFF	; 255
    1008:	60 81       	ld	r22, Z
    100a:	71 81       	ldd	r23, Z+1	; 0x01
    100c:	82 81       	ldd	r24, Z+2	; 0x02
    100e:	93 81       	ldd	r25, Z+3	; 0x03
    1010:	20 e0       	ldi	r18, 0x00	; 0
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	40 e8       	ldi	r20, 0x80	; 128
    1016:	5f e3       	ldi	r21, 0x3F	; 63
    1018:	0e 94 5f 23 	call	0x46be	; 0x46be <__ltsf2>
    101c:	88 23       	and	r24, r24
    101e:	34 f4       	brge	.+12     	; 0x102c <steppermotor+0x31a>
		__ticks = 1;
    1020:	81 e0       	ldi	r24, 0x01	; 1
    1022:	fe 01       	movw	r30, r28
    1024:	e0 5c       	subi	r30, 0xC0	; 192
    1026:	ff 4f       	sbci	r31, 0xFF	; 255
    1028:	80 83       	st	Z, r24
    102a:	9d c0       	rjmp	.+314    	; 0x1166 <steppermotor+0x454>
	else if (__tmp > 255)
    102c:	fe 01       	movw	r30, r28
    102e:	ef 5b       	subi	r30, 0xBF	; 191
    1030:	ff 4f       	sbci	r31, 0xFF	; 255
    1032:	60 81       	ld	r22, Z
    1034:	71 81       	ldd	r23, Z+1	; 0x01
    1036:	82 81       	ldd	r24, Z+2	; 0x02
    1038:	93 81       	ldd	r25, Z+3	; 0x03
    103a:	20 e0       	ldi	r18, 0x00	; 0
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	4f e7       	ldi	r20, 0x7F	; 127
    1040:	53 e4       	ldi	r21, 0x43	; 67
    1042:	0e 94 ff 22 	call	0x45fe	; 0x45fe <__gtsf2>
    1046:	18 16       	cp	r1, r24
    1048:	0c f0       	brlt	.+2      	; 0x104c <steppermotor+0x33a>
    104a:	7e c0       	rjmp	.+252    	; 0x1148 <steppermotor+0x436>
	{
		_delay_ms(__us / 1000.0);
    104c:	fe 01       	movw	r30, r28
    104e:	eb 5b       	subi	r30, 0xBB	; 187
    1050:	ff 4f       	sbci	r31, 0xFF	; 255
    1052:	60 81       	ld	r22, Z
    1054:	71 81       	ldd	r23, Z+1	; 0x01
    1056:	82 81       	ldd	r24, Z+2	; 0x02
    1058:	93 81       	ldd	r25, Z+3	; 0x03
    105a:	20 e0       	ldi	r18, 0x00	; 0
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	4a e7       	ldi	r20, 0x7A	; 122
    1060:	54 e4       	ldi	r21, 0x44	; 68
    1062:	0e 94 53 22 	call	0x44a6	; 0x44a6 <__divsf3>
    1066:	dc 01       	movw	r26, r24
    1068:	cb 01       	movw	r24, r22
    106a:	8c af       	std	Y+60, r24	; 0x3c
    106c:	9d af       	std	Y+61, r25	; 0x3d
    106e:	ae af       	std	Y+62, r26	; 0x3e
    1070:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1072:	6c ad       	ldd	r22, Y+60	; 0x3c
    1074:	7d ad       	ldd	r23, Y+61	; 0x3d
    1076:	8e ad       	ldd	r24, Y+62	; 0x3e
    1078:	9f ad       	ldd	r25, Y+63	; 0x3f
    107a:	20 e0       	ldi	r18, 0x00	; 0
    107c:	30 e0       	ldi	r19, 0x00	; 0
    107e:	4a e7       	ldi	r20, 0x7A	; 122
    1080:	55 e4       	ldi	r21, 0x45	; 69
    1082:	0e 94 59 21 	call	0x42b2	; 0x42b2 <__mulsf3>
    1086:	dc 01       	movw	r26, r24
    1088:	cb 01       	movw	r24, r22
    108a:	88 af       	std	Y+56, r24	; 0x38
    108c:	99 af       	std	Y+57, r25	; 0x39
    108e:	aa af       	std	Y+58, r26	; 0x3a
    1090:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    1092:	68 ad       	ldd	r22, Y+56	; 0x38
    1094:	79 ad       	ldd	r23, Y+57	; 0x39
    1096:	8a ad       	ldd	r24, Y+58	; 0x3a
    1098:	9b ad       	ldd	r25, Y+59	; 0x3b
    109a:	20 e0       	ldi	r18, 0x00	; 0
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	40 e8       	ldi	r20, 0x80	; 128
    10a0:	5f e3       	ldi	r21, 0x3F	; 63
    10a2:	0e 94 5f 23 	call	0x46be	; 0x46be <__ltsf2>
    10a6:	88 23       	and	r24, r24
    10a8:	2c f4       	brge	.+10     	; 0x10b4 <steppermotor+0x3a2>
		__ticks = 1;
    10aa:	81 e0       	ldi	r24, 0x01	; 1
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	9f ab       	std	Y+55, r25	; 0x37
    10b0:	8e ab       	std	Y+54, r24	; 0x36
    10b2:	3f c0       	rjmp	.+126    	; 0x1132 <steppermotor+0x420>
	else if (__tmp > 65535)
    10b4:	68 ad       	ldd	r22, Y+56	; 0x38
    10b6:	79 ad       	ldd	r23, Y+57	; 0x39
    10b8:	8a ad       	ldd	r24, Y+58	; 0x3a
    10ba:	9b ad       	ldd	r25, Y+59	; 0x3b
    10bc:	20 e0       	ldi	r18, 0x00	; 0
    10be:	3f ef       	ldi	r19, 0xFF	; 255
    10c0:	4f e7       	ldi	r20, 0x7F	; 127
    10c2:	57 e4       	ldi	r21, 0x47	; 71
    10c4:	0e 94 ff 22 	call	0x45fe	; 0x45fe <__gtsf2>
    10c8:	18 16       	cp	r1, r24
    10ca:	4c f5       	brge	.+82     	; 0x111e <steppermotor+0x40c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10cc:	6c ad       	ldd	r22, Y+60	; 0x3c
    10ce:	7d ad       	ldd	r23, Y+61	; 0x3d
    10d0:	8e ad       	ldd	r24, Y+62	; 0x3e
    10d2:	9f ad       	ldd	r25, Y+63	; 0x3f
    10d4:	20 e0       	ldi	r18, 0x00	; 0
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	40 e2       	ldi	r20, 0x20	; 32
    10da:	51 e4       	ldi	r21, 0x41	; 65
    10dc:	0e 94 59 21 	call	0x42b2	; 0x42b2 <__mulsf3>
    10e0:	dc 01       	movw	r26, r24
    10e2:	cb 01       	movw	r24, r22
    10e4:	bc 01       	movw	r22, r24
    10e6:	cd 01       	movw	r24, r26
    10e8:	0e 94 32 18 	call	0x3064	; 0x3064 <__fixunssfsi>
    10ec:	dc 01       	movw	r26, r24
    10ee:	cb 01       	movw	r24, r22
    10f0:	9f ab       	std	Y+55, r25	; 0x37
    10f2:	8e ab       	std	Y+54, r24	; 0x36
    10f4:	0f c0       	rjmp	.+30     	; 0x1114 <steppermotor+0x402>
    10f6:	80 e9       	ldi	r24, 0x90	; 144
    10f8:	91 e0       	ldi	r25, 0x01	; 1
    10fa:	9d ab       	std	Y+53, r25	; 0x35
    10fc:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    10fe:	8c a9       	ldd	r24, Y+52	; 0x34
    1100:	9d a9       	ldd	r25, Y+53	; 0x35
    1102:	01 97       	sbiw	r24, 0x01	; 1
    1104:	f1 f7       	brne	.-4      	; 0x1102 <steppermotor+0x3f0>
    1106:	9d ab       	std	Y+53, r25	; 0x35
    1108:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    110a:	8e a9       	ldd	r24, Y+54	; 0x36
    110c:	9f a9       	ldd	r25, Y+55	; 0x37
    110e:	01 97       	sbiw	r24, 0x01	; 1
    1110:	9f ab       	std	Y+55, r25	; 0x37
    1112:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1114:	8e a9       	ldd	r24, Y+54	; 0x36
    1116:	9f a9       	ldd	r25, Y+55	; 0x37
    1118:	00 97       	sbiw	r24, 0x00	; 0
    111a:	69 f7       	brne	.-38     	; 0x10f6 <steppermotor+0x3e4>
    111c:	2d c0       	rjmp	.+90     	; 0x1178 <steppermotor+0x466>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    111e:	68 ad       	ldd	r22, Y+56	; 0x38
    1120:	79 ad       	ldd	r23, Y+57	; 0x39
    1122:	8a ad       	ldd	r24, Y+58	; 0x3a
    1124:	9b ad       	ldd	r25, Y+59	; 0x3b
    1126:	0e 94 32 18 	call	0x3064	; 0x3064 <__fixunssfsi>
    112a:	dc 01       	movw	r26, r24
    112c:	cb 01       	movw	r24, r22
    112e:	9f ab       	std	Y+55, r25	; 0x37
    1130:	8e ab       	std	Y+54, r24	; 0x36
    1132:	8e a9       	ldd	r24, Y+54	; 0x36
    1134:	9f a9       	ldd	r25, Y+55	; 0x37
    1136:	9b ab       	std	Y+51, r25	; 0x33
    1138:	8a ab       	std	Y+50, r24	; 0x32
    113a:	8a a9       	ldd	r24, Y+50	; 0x32
    113c:	9b a9       	ldd	r25, Y+51	; 0x33
    113e:	01 97       	sbiw	r24, 0x01	; 1
    1140:	f1 f7       	brne	.-4      	; 0x113e <steppermotor+0x42c>
    1142:	9b ab       	std	Y+51, r25	; 0x33
    1144:	8a ab       	std	Y+50, r24	; 0x32
    1146:	18 c0       	rjmp	.+48     	; 0x1178 <steppermotor+0x466>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1148:	fe 01       	movw	r30, r28
    114a:	ef 5b       	subi	r30, 0xBF	; 191
    114c:	ff 4f       	sbci	r31, 0xFF	; 255
    114e:	60 81       	ld	r22, Z
    1150:	71 81       	ldd	r23, Z+1	; 0x01
    1152:	82 81       	ldd	r24, Z+2	; 0x02
    1154:	93 81       	ldd	r25, Z+3	; 0x03
    1156:	0e 94 32 18 	call	0x3064	; 0x3064 <__fixunssfsi>
    115a:	dc 01       	movw	r26, r24
    115c:	cb 01       	movw	r24, r22
    115e:	fe 01       	movw	r30, r28
    1160:	e0 5c       	subi	r30, 0xC0	; 192
    1162:	ff 4f       	sbci	r31, 0xFF	; 255
    1164:	80 83       	st	Z, r24
    1166:	fe 01       	movw	r30, r28
    1168:	e0 5c       	subi	r30, 0xC0	; 192
    116a:	ff 4f       	sbci	r31, 0xFF	; 255
    116c:	80 81       	ld	r24, Z
    116e:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1170:	89 a9       	ldd	r24, Y+49	; 0x31
    1172:	8a 95       	dec	r24
    1174:	f1 f7       	brne	.-4      	; 0x1172 <steppermotor+0x460>
    1176:	89 ab       	std	Y+49, r24	; 0x31

	_delay_us(100);

	DIO_write(stepper_org_1,LOW);
    1178:	83 e1       	ldi	r24, 0x13	; 19
    117a:	60 e0       	ldi	r22, 0x00	; 0
    117c:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_write>
	DIO_write(stepper_yel_2,LOW);
    1180:	84 e1       	ldi	r24, 0x14	; 20
    1182:	60 e0       	ldi	r22, 0x00	; 0
    1184:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_write>
	DIO_write(stepper_pink_3,HIGH);
    1188:	85 e1       	ldi	r24, 0x15	; 21
    118a:	61 e0       	ldi	r22, 0x01	; 1
    118c:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_write>
	DIO_write(stepper_blu_4,LOW);
    1190:	86 e1       	ldi	r24, 0x16	; 22
    1192:	60 e0       	ldi	r22, 0x00	; 0
    1194:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_write>
    1198:	80 e0       	ldi	r24, 0x00	; 0
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	a8 ec       	ldi	r26, 0xC8	; 200
    119e:	b2 e4       	ldi	r27, 0x42	; 66
    11a0:	8d a7       	std	Y+45, r24	; 0x2d
    11a2:	9e a7       	std	Y+46, r25	; 0x2e
    11a4:	af a7       	std	Y+47, r26	; 0x2f
    11a6:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    11a8:	6d a5       	ldd	r22, Y+45	; 0x2d
    11aa:	7e a5       	ldd	r23, Y+46	; 0x2e
    11ac:	8f a5       	ldd	r24, Y+47	; 0x2f
    11ae:	98 a9       	ldd	r25, Y+48	; 0x30
    11b0:	2b ea       	ldi	r18, 0xAB	; 171
    11b2:	3a ea       	ldi	r19, 0xAA	; 170
    11b4:	4a ea       	ldi	r20, 0xAA	; 170
    11b6:	50 e4       	ldi	r21, 0x40	; 64
    11b8:	0e 94 59 21 	call	0x42b2	; 0x42b2 <__mulsf3>
    11bc:	dc 01       	movw	r26, r24
    11be:	cb 01       	movw	r24, r22
    11c0:	89 a7       	std	Y+41, r24	; 0x29
    11c2:	9a a7       	std	Y+42, r25	; 0x2a
    11c4:	ab a7       	std	Y+43, r26	; 0x2b
    11c6:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    11c8:	69 a5       	ldd	r22, Y+41	; 0x29
    11ca:	7a a5       	ldd	r23, Y+42	; 0x2a
    11cc:	8b a5       	ldd	r24, Y+43	; 0x2b
    11ce:	9c a5       	ldd	r25, Y+44	; 0x2c
    11d0:	20 e0       	ldi	r18, 0x00	; 0
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	40 e8       	ldi	r20, 0x80	; 128
    11d6:	5f e3       	ldi	r21, 0x3F	; 63
    11d8:	0e 94 5f 23 	call	0x46be	; 0x46be <__ltsf2>
    11dc:	88 23       	and	r24, r24
    11de:	1c f4       	brge	.+6      	; 0x11e6 <steppermotor+0x4d4>
		__ticks = 1;
    11e0:	81 e0       	ldi	r24, 0x01	; 1
    11e2:	88 a7       	std	Y+40, r24	; 0x28
    11e4:	91 c0       	rjmp	.+290    	; 0x1308 <steppermotor+0x5f6>
	else if (__tmp > 255)
    11e6:	69 a5       	ldd	r22, Y+41	; 0x29
    11e8:	7a a5       	ldd	r23, Y+42	; 0x2a
    11ea:	8b a5       	ldd	r24, Y+43	; 0x2b
    11ec:	9c a5       	ldd	r25, Y+44	; 0x2c
    11ee:	20 e0       	ldi	r18, 0x00	; 0
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	4f e7       	ldi	r20, 0x7F	; 127
    11f4:	53 e4       	ldi	r21, 0x43	; 67
    11f6:	0e 94 ff 22 	call	0x45fe	; 0x45fe <__gtsf2>
    11fa:	18 16       	cp	r1, r24
    11fc:	0c f0       	brlt	.+2      	; 0x1200 <steppermotor+0x4ee>
    11fe:	7b c0       	rjmp	.+246    	; 0x12f6 <steppermotor+0x5e4>
	{
		_delay_ms(__us / 1000.0);
    1200:	6d a5       	ldd	r22, Y+45	; 0x2d
    1202:	7e a5       	ldd	r23, Y+46	; 0x2e
    1204:	8f a5       	ldd	r24, Y+47	; 0x2f
    1206:	98 a9       	ldd	r25, Y+48	; 0x30
    1208:	20 e0       	ldi	r18, 0x00	; 0
    120a:	30 e0       	ldi	r19, 0x00	; 0
    120c:	4a e7       	ldi	r20, 0x7A	; 122
    120e:	54 e4       	ldi	r21, 0x44	; 68
    1210:	0e 94 53 22 	call	0x44a6	; 0x44a6 <__divsf3>
    1214:	dc 01       	movw	r26, r24
    1216:	cb 01       	movw	r24, r22
    1218:	8c a3       	std	Y+36, r24	; 0x24
    121a:	9d a3       	std	Y+37, r25	; 0x25
    121c:	ae a3       	std	Y+38, r26	; 0x26
    121e:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1220:	6c a1       	ldd	r22, Y+36	; 0x24
    1222:	7d a1       	ldd	r23, Y+37	; 0x25
    1224:	8e a1       	ldd	r24, Y+38	; 0x26
    1226:	9f a1       	ldd	r25, Y+39	; 0x27
    1228:	20 e0       	ldi	r18, 0x00	; 0
    122a:	30 e0       	ldi	r19, 0x00	; 0
    122c:	4a e7       	ldi	r20, 0x7A	; 122
    122e:	55 e4       	ldi	r21, 0x45	; 69
    1230:	0e 94 59 21 	call	0x42b2	; 0x42b2 <__mulsf3>
    1234:	dc 01       	movw	r26, r24
    1236:	cb 01       	movw	r24, r22
    1238:	88 a3       	std	Y+32, r24	; 0x20
    123a:	99 a3       	std	Y+33, r25	; 0x21
    123c:	aa a3       	std	Y+34, r26	; 0x22
    123e:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1240:	68 a1       	ldd	r22, Y+32	; 0x20
    1242:	79 a1       	ldd	r23, Y+33	; 0x21
    1244:	8a a1       	ldd	r24, Y+34	; 0x22
    1246:	9b a1       	ldd	r25, Y+35	; 0x23
    1248:	20 e0       	ldi	r18, 0x00	; 0
    124a:	30 e0       	ldi	r19, 0x00	; 0
    124c:	40 e8       	ldi	r20, 0x80	; 128
    124e:	5f e3       	ldi	r21, 0x3F	; 63
    1250:	0e 94 5f 23 	call	0x46be	; 0x46be <__ltsf2>
    1254:	88 23       	and	r24, r24
    1256:	2c f4       	brge	.+10     	; 0x1262 <steppermotor+0x550>
		__ticks = 1;
    1258:	81 e0       	ldi	r24, 0x01	; 1
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	9f 8f       	std	Y+31, r25	; 0x1f
    125e:	8e 8f       	std	Y+30, r24	; 0x1e
    1260:	3f c0       	rjmp	.+126    	; 0x12e0 <steppermotor+0x5ce>
	else if (__tmp > 65535)
    1262:	68 a1       	ldd	r22, Y+32	; 0x20
    1264:	79 a1       	ldd	r23, Y+33	; 0x21
    1266:	8a a1       	ldd	r24, Y+34	; 0x22
    1268:	9b a1       	ldd	r25, Y+35	; 0x23
    126a:	20 e0       	ldi	r18, 0x00	; 0
    126c:	3f ef       	ldi	r19, 0xFF	; 255
    126e:	4f e7       	ldi	r20, 0x7F	; 127
    1270:	57 e4       	ldi	r21, 0x47	; 71
    1272:	0e 94 ff 22 	call	0x45fe	; 0x45fe <__gtsf2>
    1276:	18 16       	cp	r1, r24
    1278:	4c f5       	brge	.+82     	; 0x12cc <steppermotor+0x5ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    127a:	6c a1       	ldd	r22, Y+36	; 0x24
    127c:	7d a1       	ldd	r23, Y+37	; 0x25
    127e:	8e a1       	ldd	r24, Y+38	; 0x26
    1280:	9f a1       	ldd	r25, Y+39	; 0x27
    1282:	20 e0       	ldi	r18, 0x00	; 0
    1284:	30 e0       	ldi	r19, 0x00	; 0
    1286:	40 e2       	ldi	r20, 0x20	; 32
    1288:	51 e4       	ldi	r21, 0x41	; 65
    128a:	0e 94 59 21 	call	0x42b2	; 0x42b2 <__mulsf3>
    128e:	dc 01       	movw	r26, r24
    1290:	cb 01       	movw	r24, r22
    1292:	bc 01       	movw	r22, r24
    1294:	cd 01       	movw	r24, r26
    1296:	0e 94 32 18 	call	0x3064	; 0x3064 <__fixunssfsi>
    129a:	dc 01       	movw	r26, r24
    129c:	cb 01       	movw	r24, r22
    129e:	9f 8f       	std	Y+31, r25	; 0x1f
    12a0:	8e 8f       	std	Y+30, r24	; 0x1e
    12a2:	0f c0       	rjmp	.+30     	; 0x12c2 <steppermotor+0x5b0>
    12a4:	80 e9       	ldi	r24, 0x90	; 144
    12a6:	91 e0       	ldi	r25, 0x01	; 1
    12a8:	9d 8f       	std	Y+29, r25	; 0x1d
    12aa:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    12ac:	8c 8d       	ldd	r24, Y+28	; 0x1c
    12ae:	9d 8d       	ldd	r25, Y+29	; 0x1d
    12b0:	01 97       	sbiw	r24, 0x01	; 1
    12b2:	f1 f7       	brne	.-4      	; 0x12b0 <steppermotor+0x59e>
    12b4:	9d 8f       	std	Y+29, r25	; 0x1d
    12b6:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12b8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    12ba:	9f 8d       	ldd	r25, Y+31	; 0x1f
    12bc:	01 97       	sbiw	r24, 0x01	; 1
    12be:	9f 8f       	std	Y+31, r25	; 0x1f
    12c0:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12c2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    12c4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    12c6:	00 97       	sbiw	r24, 0x00	; 0
    12c8:	69 f7       	brne	.-38     	; 0x12a4 <steppermotor+0x592>
    12ca:	24 c0       	rjmp	.+72     	; 0x1314 <steppermotor+0x602>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12cc:	68 a1       	ldd	r22, Y+32	; 0x20
    12ce:	79 a1       	ldd	r23, Y+33	; 0x21
    12d0:	8a a1       	ldd	r24, Y+34	; 0x22
    12d2:	9b a1       	ldd	r25, Y+35	; 0x23
    12d4:	0e 94 32 18 	call	0x3064	; 0x3064 <__fixunssfsi>
    12d8:	dc 01       	movw	r26, r24
    12da:	cb 01       	movw	r24, r22
    12dc:	9f 8f       	std	Y+31, r25	; 0x1f
    12de:	8e 8f       	std	Y+30, r24	; 0x1e
    12e0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    12e2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    12e4:	9b 8f       	std	Y+27, r25	; 0x1b
    12e6:	8a 8f       	std	Y+26, r24	; 0x1a
    12e8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    12ea:	9b 8d       	ldd	r25, Y+27	; 0x1b
    12ec:	01 97       	sbiw	r24, 0x01	; 1
    12ee:	f1 f7       	brne	.-4      	; 0x12ec <steppermotor+0x5da>
    12f0:	9b 8f       	std	Y+27, r25	; 0x1b
    12f2:	8a 8f       	std	Y+26, r24	; 0x1a
    12f4:	0f c0       	rjmp	.+30     	; 0x1314 <steppermotor+0x602>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    12f6:	69 a5       	ldd	r22, Y+41	; 0x29
    12f8:	7a a5       	ldd	r23, Y+42	; 0x2a
    12fa:	8b a5       	ldd	r24, Y+43	; 0x2b
    12fc:	9c a5       	ldd	r25, Y+44	; 0x2c
    12fe:	0e 94 32 18 	call	0x3064	; 0x3064 <__fixunssfsi>
    1302:	dc 01       	movw	r26, r24
    1304:	cb 01       	movw	r24, r22
    1306:	88 a7       	std	Y+40, r24	; 0x28
    1308:	88 a5       	ldd	r24, Y+40	; 0x28
    130a:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    130c:	89 8d       	ldd	r24, Y+25	; 0x19
    130e:	8a 95       	dec	r24
    1310:	f1 f7       	brne	.-4      	; 0x130e <steppermotor+0x5fc>
    1312:	89 8f       	std	Y+25, r24	; 0x19

	_delay_us(100);

	DIO_write(stepper_org_1,LOW);
    1314:	83 e1       	ldi	r24, 0x13	; 19
    1316:	60 e0       	ldi	r22, 0x00	; 0
    1318:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_write>
	DIO_write(stepper_yel_2,LOW);
    131c:	84 e1       	ldi	r24, 0x14	; 20
    131e:	60 e0       	ldi	r22, 0x00	; 0
    1320:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_write>
	DIO_write(stepper_pink_3,LOW);
    1324:	85 e1       	ldi	r24, 0x15	; 21
    1326:	60 e0       	ldi	r22, 0x00	; 0
    1328:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_write>
	DIO_write(stepper_blu_4,HIGH);
    132c:	86 e1       	ldi	r24, 0x16	; 22
    132e:	61 e0       	ldi	r22, 0x01	; 1
    1330:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_write>
    1334:	80 e0       	ldi	r24, 0x00	; 0
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	a8 ec       	ldi	r26, 0xC8	; 200
    133a:	b2 e4       	ldi	r27, 0x42	; 66
    133c:	8d 8b       	std	Y+21, r24	; 0x15
    133e:	9e 8b       	std	Y+22, r25	; 0x16
    1340:	af 8b       	std	Y+23, r26	; 0x17
    1342:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1344:	6d 89       	ldd	r22, Y+21	; 0x15
    1346:	7e 89       	ldd	r23, Y+22	; 0x16
    1348:	8f 89       	ldd	r24, Y+23	; 0x17
    134a:	98 8d       	ldd	r25, Y+24	; 0x18
    134c:	2b ea       	ldi	r18, 0xAB	; 171
    134e:	3a ea       	ldi	r19, 0xAA	; 170
    1350:	4a ea       	ldi	r20, 0xAA	; 170
    1352:	50 e4       	ldi	r21, 0x40	; 64
    1354:	0e 94 59 21 	call	0x42b2	; 0x42b2 <__mulsf3>
    1358:	dc 01       	movw	r26, r24
    135a:	cb 01       	movw	r24, r22
    135c:	89 8b       	std	Y+17, r24	; 0x11
    135e:	9a 8b       	std	Y+18, r25	; 0x12
    1360:	ab 8b       	std	Y+19, r26	; 0x13
    1362:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1364:	69 89       	ldd	r22, Y+17	; 0x11
    1366:	7a 89       	ldd	r23, Y+18	; 0x12
    1368:	8b 89       	ldd	r24, Y+19	; 0x13
    136a:	9c 89       	ldd	r25, Y+20	; 0x14
    136c:	20 e0       	ldi	r18, 0x00	; 0
    136e:	30 e0       	ldi	r19, 0x00	; 0
    1370:	40 e8       	ldi	r20, 0x80	; 128
    1372:	5f e3       	ldi	r21, 0x3F	; 63
    1374:	0e 94 5f 23 	call	0x46be	; 0x46be <__ltsf2>
    1378:	88 23       	and	r24, r24
    137a:	1c f4       	brge	.+6      	; 0x1382 <steppermotor+0x670>
		__ticks = 1;
    137c:	81 e0       	ldi	r24, 0x01	; 1
    137e:	88 8b       	std	Y+16, r24	; 0x10
    1380:	91 c0       	rjmp	.+290    	; 0x14a4 <steppermotor+0x792>
	else if (__tmp > 255)
    1382:	69 89       	ldd	r22, Y+17	; 0x11
    1384:	7a 89       	ldd	r23, Y+18	; 0x12
    1386:	8b 89       	ldd	r24, Y+19	; 0x13
    1388:	9c 89       	ldd	r25, Y+20	; 0x14
    138a:	20 e0       	ldi	r18, 0x00	; 0
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	4f e7       	ldi	r20, 0x7F	; 127
    1390:	53 e4       	ldi	r21, 0x43	; 67
    1392:	0e 94 ff 22 	call	0x45fe	; 0x45fe <__gtsf2>
    1396:	18 16       	cp	r1, r24
    1398:	0c f0       	brlt	.+2      	; 0x139c <steppermotor+0x68a>
    139a:	7b c0       	rjmp	.+246    	; 0x1492 <steppermotor+0x780>
	{
		_delay_ms(__us / 1000.0);
    139c:	6d 89       	ldd	r22, Y+21	; 0x15
    139e:	7e 89       	ldd	r23, Y+22	; 0x16
    13a0:	8f 89       	ldd	r24, Y+23	; 0x17
    13a2:	98 8d       	ldd	r25, Y+24	; 0x18
    13a4:	20 e0       	ldi	r18, 0x00	; 0
    13a6:	30 e0       	ldi	r19, 0x00	; 0
    13a8:	4a e7       	ldi	r20, 0x7A	; 122
    13aa:	54 e4       	ldi	r21, 0x44	; 68
    13ac:	0e 94 53 22 	call	0x44a6	; 0x44a6 <__divsf3>
    13b0:	dc 01       	movw	r26, r24
    13b2:	cb 01       	movw	r24, r22
    13b4:	8c 87       	std	Y+12, r24	; 0x0c
    13b6:	9d 87       	std	Y+13, r25	; 0x0d
    13b8:	ae 87       	std	Y+14, r26	; 0x0e
    13ba:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13bc:	6c 85       	ldd	r22, Y+12	; 0x0c
    13be:	7d 85       	ldd	r23, Y+13	; 0x0d
    13c0:	8e 85       	ldd	r24, Y+14	; 0x0e
    13c2:	9f 85       	ldd	r25, Y+15	; 0x0f
    13c4:	20 e0       	ldi	r18, 0x00	; 0
    13c6:	30 e0       	ldi	r19, 0x00	; 0
    13c8:	4a e7       	ldi	r20, 0x7A	; 122
    13ca:	55 e4       	ldi	r21, 0x45	; 69
    13cc:	0e 94 59 21 	call	0x42b2	; 0x42b2 <__mulsf3>
    13d0:	dc 01       	movw	r26, r24
    13d2:	cb 01       	movw	r24, r22
    13d4:	88 87       	std	Y+8, r24	; 0x08
    13d6:	99 87       	std	Y+9, r25	; 0x09
    13d8:	aa 87       	std	Y+10, r26	; 0x0a
    13da:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    13dc:	68 85       	ldd	r22, Y+8	; 0x08
    13de:	79 85       	ldd	r23, Y+9	; 0x09
    13e0:	8a 85       	ldd	r24, Y+10	; 0x0a
    13e2:	9b 85       	ldd	r25, Y+11	; 0x0b
    13e4:	20 e0       	ldi	r18, 0x00	; 0
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	40 e8       	ldi	r20, 0x80	; 128
    13ea:	5f e3       	ldi	r21, 0x3F	; 63
    13ec:	0e 94 5f 23 	call	0x46be	; 0x46be <__ltsf2>
    13f0:	88 23       	and	r24, r24
    13f2:	2c f4       	brge	.+10     	; 0x13fe <steppermotor+0x6ec>
		__ticks = 1;
    13f4:	81 e0       	ldi	r24, 0x01	; 1
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	9f 83       	std	Y+7, r25	; 0x07
    13fa:	8e 83       	std	Y+6, r24	; 0x06
    13fc:	3f c0       	rjmp	.+126    	; 0x147c <steppermotor+0x76a>
	else if (__tmp > 65535)
    13fe:	68 85       	ldd	r22, Y+8	; 0x08
    1400:	79 85       	ldd	r23, Y+9	; 0x09
    1402:	8a 85       	ldd	r24, Y+10	; 0x0a
    1404:	9b 85       	ldd	r25, Y+11	; 0x0b
    1406:	20 e0       	ldi	r18, 0x00	; 0
    1408:	3f ef       	ldi	r19, 0xFF	; 255
    140a:	4f e7       	ldi	r20, 0x7F	; 127
    140c:	57 e4       	ldi	r21, 0x47	; 71
    140e:	0e 94 ff 22 	call	0x45fe	; 0x45fe <__gtsf2>
    1412:	18 16       	cp	r1, r24
    1414:	4c f5       	brge	.+82     	; 0x1468 <steppermotor+0x756>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1416:	6c 85       	ldd	r22, Y+12	; 0x0c
    1418:	7d 85       	ldd	r23, Y+13	; 0x0d
    141a:	8e 85       	ldd	r24, Y+14	; 0x0e
    141c:	9f 85       	ldd	r25, Y+15	; 0x0f
    141e:	20 e0       	ldi	r18, 0x00	; 0
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	40 e2       	ldi	r20, 0x20	; 32
    1424:	51 e4       	ldi	r21, 0x41	; 65
    1426:	0e 94 59 21 	call	0x42b2	; 0x42b2 <__mulsf3>
    142a:	dc 01       	movw	r26, r24
    142c:	cb 01       	movw	r24, r22
    142e:	bc 01       	movw	r22, r24
    1430:	cd 01       	movw	r24, r26
    1432:	0e 94 32 18 	call	0x3064	; 0x3064 <__fixunssfsi>
    1436:	dc 01       	movw	r26, r24
    1438:	cb 01       	movw	r24, r22
    143a:	9f 83       	std	Y+7, r25	; 0x07
    143c:	8e 83       	std	Y+6, r24	; 0x06
    143e:	0f c0       	rjmp	.+30     	; 0x145e <steppermotor+0x74c>
    1440:	80 e9       	ldi	r24, 0x90	; 144
    1442:	91 e0       	ldi	r25, 0x01	; 1
    1444:	9d 83       	std	Y+5, r25	; 0x05
    1446:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1448:	8c 81       	ldd	r24, Y+4	; 0x04
    144a:	9d 81       	ldd	r25, Y+5	; 0x05
    144c:	01 97       	sbiw	r24, 0x01	; 1
    144e:	f1 f7       	brne	.-4      	; 0x144c <steppermotor+0x73a>
    1450:	9d 83       	std	Y+5, r25	; 0x05
    1452:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1454:	8e 81       	ldd	r24, Y+6	; 0x06
    1456:	9f 81       	ldd	r25, Y+7	; 0x07
    1458:	01 97       	sbiw	r24, 0x01	; 1
    145a:	9f 83       	std	Y+7, r25	; 0x07
    145c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    145e:	8e 81       	ldd	r24, Y+6	; 0x06
    1460:	9f 81       	ldd	r25, Y+7	; 0x07
    1462:	00 97       	sbiw	r24, 0x00	; 0
    1464:	69 f7       	brne	.-38     	; 0x1440 <steppermotor+0x72e>
    1466:	24 c0       	rjmp	.+72     	; 0x14b0 <steppermotor+0x79e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1468:	68 85       	ldd	r22, Y+8	; 0x08
    146a:	79 85       	ldd	r23, Y+9	; 0x09
    146c:	8a 85       	ldd	r24, Y+10	; 0x0a
    146e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1470:	0e 94 32 18 	call	0x3064	; 0x3064 <__fixunssfsi>
    1474:	dc 01       	movw	r26, r24
    1476:	cb 01       	movw	r24, r22
    1478:	9f 83       	std	Y+7, r25	; 0x07
    147a:	8e 83       	std	Y+6, r24	; 0x06
    147c:	8e 81       	ldd	r24, Y+6	; 0x06
    147e:	9f 81       	ldd	r25, Y+7	; 0x07
    1480:	9b 83       	std	Y+3, r25	; 0x03
    1482:	8a 83       	std	Y+2, r24	; 0x02
    1484:	8a 81       	ldd	r24, Y+2	; 0x02
    1486:	9b 81       	ldd	r25, Y+3	; 0x03
    1488:	01 97       	sbiw	r24, 0x01	; 1
    148a:	f1 f7       	brne	.-4      	; 0x1488 <steppermotor+0x776>
    148c:	9b 83       	std	Y+3, r25	; 0x03
    148e:	8a 83       	std	Y+2, r24	; 0x02
    1490:	0f c0       	rjmp	.+30     	; 0x14b0 <steppermotor+0x79e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1492:	69 89       	ldd	r22, Y+17	; 0x11
    1494:	7a 89       	ldd	r23, Y+18	; 0x12
    1496:	8b 89       	ldd	r24, Y+19	; 0x13
    1498:	9c 89       	ldd	r25, Y+20	; 0x14
    149a:	0e 94 32 18 	call	0x3064	; 0x3064 <__fixunssfsi>
    149e:	dc 01       	movw	r26, r24
    14a0:	cb 01       	movw	r24, r22
    14a2:	88 8b       	std	Y+16, r24	; 0x10
    14a4:	88 89       	ldd	r24, Y+16	; 0x10
    14a6:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    14a8:	89 81       	ldd	r24, Y+1	; 0x01
    14aa:	8a 95       	dec	r24
    14ac:	f1 f7       	brne	.-4      	; 0x14aa <steppermotor+0x798>
    14ae:	89 83       	std	Y+1, r24	; 0x01

	_delay_us(100);

}
    14b0:	c0 5a       	subi	r28, 0xA0	; 160
    14b2:	df 4f       	sbci	r29, 0xFF	; 255
    14b4:	0f b6       	in	r0, 0x3f	; 63
    14b6:	f8 94       	cli
    14b8:	de bf       	out	0x3e, r29	; 62
    14ba:	0f be       	out	0x3f, r0	; 63
    14bc:	cd bf       	out	0x3d, r28	; 61
    14be:	cf 91       	pop	r28
    14c0:	df 91       	pop	r29
    14c2:	1f 91       	pop	r17
    14c4:	0f 91       	pop	r16
    14c6:	08 95       	ret

000014c8 <getkeypress>:




unsigned char getkeypress(void)
{
    14c8:	df 93       	push	r29
    14ca:	cf 93       	push	r28
    14cc:	0f 92       	push	r0
    14ce:	cd b7       	in	r28, 0x3d	; 61
    14d0:	de b7       	in	r29, 0x3e	; 62
	//pullup
	DIO_write(col0,HIGH);
    14d2:	8c e1       	ldi	r24, 0x1C	; 28
    14d4:	61 e0       	ldi	r22, 0x01	; 1
    14d6:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_write>
	DIO_write(col1,HIGH);
    14da:	8d e1       	ldi	r24, 0x1D	; 29
    14dc:	61 e0       	ldi	r22, 0x01	; 1
    14de:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_write>
	DIO_write(col2,HIGH);
    14e2:	8e e1       	ldi	r24, 0x1E	; 30
    14e4:	61 e0       	ldi	r22, 0x01	; 1
    14e6:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_write>
	DIO_write(col3,HIGH);
    14ea:	8f e1       	ldi	r24, 0x1F	; 31
    14ec:	61 e0       	ldi	r22, 0x01	; 1
    14ee:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_write>


	DIO_write(row0,LOW);
    14f2:	88 e1       	ldi	r24, 0x18	; 24
    14f4:	60 e0       	ldi	r22, 0x00	; 0
    14f6:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_write>
	DIO_write(row1,LOW);
    14fa:	89 e1       	ldi	r24, 0x19	; 25
    14fc:	60 e0       	ldi	r22, 0x00	; 0
    14fe:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_write>
	DIO_write(row2,LOW);
    1502:	8a e1       	ldi	r24, 0x1A	; 26
    1504:	60 e0       	ldi	r22, 0x00	; 0
    1506:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_write>
	DIO_write(row3,LOW);
    150a:	8b e1       	ldi	r24, 0x1B	; 27
    150c:	60 e0       	ldi	r22, 0x00	; 0
    150e:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_write>

	if(DIO_read(col0) && DIO_read(col1) && DIO_read(col2) && DIO_read(col3))
    1512:	8c e1       	ldi	r24, 0x1C	; 28
    1514:	0e 94 34 04 	call	0x868	; 0x868 <DIO_read>
    1518:	00 97       	sbiw	r24, 0x00	; 0
    151a:	91 f0       	breq	.+36     	; 0x1540 <getkeypress+0x78>
    151c:	8d e1       	ldi	r24, 0x1D	; 29
    151e:	0e 94 34 04 	call	0x868	; 0x868 <DIO_read>
    1522:	00 97       	sbiw	r24, 0x00	; 0
    1524:	69 f0       	breq	.+26     	; 0x1540 <getkeypress+0x78>
    1526:	8e e1       	ldi	r24, 0x1E	; 30
    1528:	0e 94 34 04 	call	0x868	; 0x868 <DIO_read>
    152c:	00 97       	sbiw	r24, 0x00	; 0
    152e:	41 f0       	breq	.+16     	; 0x1540 <getkeypress+0x78>
    1530:	8f e1       	ldi	r24, 0x1F	; 31
    1532:	0e 94 34 04 	call	0x868	; 0x868 <DIO_read>
    1536:	00 97       	sbiw	r24, 0x00	; 0
    1538:	19 f0       	breq	.+6      	; 0x1540 <getkeypress+0x78>
	{
		return 1;
    153a:	81 e0       	ldi	r24, 0x01	; 1
    153c:	89 83       	std	Y+1, r24	; 0x01
    153e:	01 c0       	rjmp	.+2      	; 0x1542 <getkeypress+0x7a>
	}
	return 0;
    1540:	19 82       	std	Y+1, r1	; 0x01
    1542:	89 81       	ldd	r24, Y+1	; 0x01

}
    1544:	0f 90       	pop	r0
    1546:	cf 91       	pop	r28
    1548:	df 91       	pop	r29
    154a:	08 95       	ret

0000154c <lcd_init>:
 *      Author: Ali Ehab
 */
#include "LCD.h"

void lcd_init(void)
{
    154c:	df 93       	push	r29
    154e:	cf 93       	push	r28
    1550:	cd b7       	in	r28, 0x3d	; 61
    1552:	de b7       	in	r29, 0x3e	; 62
    1554:	2e 97       	sbiw	r28, 0x0e	; 14
    1556:	0f b6       	in	r0, 0x3f	; 63
    1558:	f8 94       	cli
    155a:	de bf       	out	0x3e, r29	; 62
    155c:	0f be       	out	0x3f, r0	; 63
    155e:	cd bf       	out	0x3d, r28	; 61
    1560:	80 e0       	ldi	r24, 0x00	; 0
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	a8 e4       	ldi	r26, 0x48	; 72
    1566:	b3 e4       	ldi	r27, 0x43	; 67
    1568:	8b 87       	std	Y+11, r24	; 0x0b
    156a:	9c 87       	std	Y+12, r25	; 0x0c
    156c:	ad 87       	std	Y+13, r26	; 0x0d
    156e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1570:	6b 85       	ldd	r22, Y+11	; 0x0b
    1572:	7c 85       	ldd	r23, Y+12	; 0x0c
    1574:	8d 85       	ldd	r24, Y+13	; 0x0d
    1576:	9e 85       	ldd	r25, Y+14	; 0x0e
    1578:	20 e0       	ldi	r18, 0x00	; 0
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	4a e7       	ldi	r20, 0x7A	; 122
    157e:	55 e4       	ldi	r21, 0x45	; 69
    1580:	0e 94 59 21 	call	0x42b2	; 0x42b2 <__mulsf3>
    1584:	dc 01       	movw	r26, r24
    1586:	cb 01       	movw	r24, r22
    1588:	8f 83       	std	Y+7, r24	; 0x07
    158a:	98 87       	std	Y+8, r25	; 0x08
    158c:	a9 87       	std	Y+9, r26	; 0x09
    158e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1590:	6f 81       	ldd	r22, Y+7	; 0x07
    1592:	78 85       	ldd	r23, Y+8	; 0x08
    1594:	89 85       	ldd	r24, Y+9	; 0x09
    1596:	9a 85       	ldd	r25, Y+10	; 0x0a
    1598:	20 e0       	ldi	r18, 0x00	; 0
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	40 e8       	ldi	r20, 0x80	; 128
    159e:	5f e3       	ldi	r21, 0x3F	; 63
    15a0:	0e 94 5f 23 	call	0x46be	; 0x46be <__ltsf2>
    15a4:	88 23       	and	r24, r24
    15a6:	2c f4       	brge	.+10     	; 0x15b2 <lcd_init+0x66>
		__ticks = 1;
    15a8:	81 e0       	ldi	r24, 0x01	; 1
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	9e 83       	std	Y+6, r25	; 0x06
    15ae:	8d 83       	std	Y+5, r24	; 0x05
    15b0:	3f c0       	rjmp	.+126    	; 0x1630 <lcd_init+0xe4>
	else if (__tmp > 65535)
    15b2:	6f 81       	ldd	r22, Y+7	; 0x07
    15b4:	78 85       	ldd	r23, Y+8	; 0x08
    15b6:	89 85       	ldd	r24, Y+9	; 0x09
    15b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    15ba:	20 e0       	ldi	r18, 0x00	; 0
    15bc:	3f ef       	ldi	r19, 0xFF	; 255
    15be:	4f e7       	ldi	r20, 0x7F	; 127
    15c0:	57 e4       	ldi	r21, 0x47	; 71
    15c2:	0e 94 ff 22 	call	0x45fe	; 0x45fe <__gtsf2>
    15c6:	18 16       	cp	r1, r24
    15c8:	4c f5       	brge	.+82     	; 0x161c <lcd_init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    15cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    15ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    15d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    15d2:	20 e0       	ldi	r18, 0x00	; 0
    15d4:	30 e0       	ldi	r19, 0x00	; 0
    15d6:	40 e2       	ldi	r20, 0x20	; 32
    15d8:	51 e4       	ldi	r21, 0x41	; 65
    15da:	0e 94 59 21 	call	0x42b2	; 0x42b2 <__mulsf3>
    15de:	dc 01       	movw	r26, r24
    15e0:	cb 01       	movw	r24, r22
    15e2:	bc 01       	movw	r22, r24
    15e4:	cd 01       	movw	r24, r26
    15e6:	0e 94 32 18 	call	0x3064	; 0x3064 <__fixunssfsi>
    15ea:	dc 01       	movw	r26, r24
    15ec:	cb 01       	movw	r24, r22
    15ee:	9e 83       	std	Y+6, r25	; 0x06
    15f0:	8d 83       	std	Y+5, r24	; 0x05
    15f2:	0f c0       	rjmp	.+30     	; 0x1612 <lcd_init+0xc6>
    15f4:	80 e9       	ldi	r24, 0x90	; 144
    15f6:	91 e0       	ldi	r25, 0x01	; 1
    15f8:	9c 83       	std	Y+4, r25	; 0x04
    15fa:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    15fc:	8b 81       	ldd	r24, Y+3	; 0x03
    15fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1600:	01 97       	sbiw	r24, 0x01	; 1
    1602:	f1 f7       	brne	.-4      	; 0x1600 <lcd_init+0xb4>
    1604:	9c 83       	std	Y+4, r25	; 0x04
    1606:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1608:	8d 81       	ldd	r24, Y+5	; 0x05
    160a:	9e 81       	ldd	r25, Y+6	; 0x06
    160c:	01 97       	sbiw	r24, 0x01	; 1
    160e:	9e 83       	std	Y+6, r25	; 0x06
    1610:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1612:	8d 81       	ldd	r24, Y+5	; 0x05
    1614:	9e 81       	ldd	r25, Y+6	; 0x06
    1616:	00 97       	sbiw	r24, 0x00	; 0
    1618:	69 f7       	brne	.-38     	; 0x15f4 <lcd_init+0xa8>
    161a:	14 c0       	rjmp	.+40     	; 0x1644 <lcd_init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    161c:	6f 81       	ldd	r22, Y+7	; 0x07
    161e:	78 85       	ldd	r23, Y+8	; 0x08
    1620:	89 85       	ldd	r24, Y+9	; 0x09
    1622:	9a 85       	ldd	r25, Y+10	; 0x0a
    1624:	0e 94 32 18 	call	0x3064	; 0x3064 <__fixunssfsi>
    1628:	dc 01       	movw	r26, r24
    162a:	cb 01       	movw	r24, r22
    162c:	9e 83       	std	Y+6, r25	; 0x06
    162e:	8d 83       	std	Y+5, r24	; 0x05
    1630:	8d 81       	ldd	r24, Y+5	; 0x05
    1632:	9e 81       	ldd	r25, Y+6	; 0x06
    1634:	9a 83       	std	Y+2, r25	; 0x02
    1636:	89 83       	std	Y+1, r24	; 0x01
    1638:	89 81       	ldd	r24, Y+1	; 0x01
    163a:	9a 81       	ldd	r25, Y+2	; 0x02
    163c:	01 97       	sbiw	r24, 0x01	; 1
    163e:	f1 f7       	brne	.-4      	; 0x163c <lcd_init+0xf0>
    1640:	9a 83       	std	Y+2, r25	; 0x02
    1642:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(200);
	lcd_sendcmd(0x33);
    1644:	83 e3       	ldi	r24, 0x33	; 51
    1646:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <lcd_sendcmd>
	lcd_sendcmd(0x32);
    164a:	82 e3       	ldi	r24, 0x32	; 50
    164c:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <lcd_sendcmd>
	lcd_sendcmd(0x28);
    1650:	88 e2       	ldi	r24, 0x28	; 40
    1652:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <lcd_sendcmd>
	lcd_sendcmd(0x0f);
    1656:	8f e0       	ldi	r24, 0x0F	; 15
    1658:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <lcd_sendcmd>
	lcd_sendcmd(0x06);
    165c:	86 e0       	ldi	r24, 0x06	; 6
    165e:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <lcd_sendcmd>
	lcd_sendcmd(0x01);
    1662:	81 e0       	ldi	r24, 0x01	; 1
    1664:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <lcd_sendcmd>


}
    1668:	2e 96       	adiw	r28, 0x0e	; 14
    166a:	0f b6       	in	r0, 0x3f	; 63
    166c:	f8 94       	cli
    166e:	de bf       	out	0x3e, r29	; 62
    1670:	0f be       	out	0x3f, r0	; 63
    1672:	cd bf       	out	0x3d, r28	; 61
    1674:	cf 91       	pop	r28
    1676:	df 91       	pop	r29
    1678:	08 95       	ret

0000167a <lcd_sendchar>:

void lcd_sendchar(unsigned char data)
{
    167a:	0f 93       	push	r16
    167c:	1f 93       	push	r17
    167e:	df 93       	push	r29
    1680:	cf 93       	push	r28
    1682:	cd b7       	in	r28, 0x3d	; 61
    1684:	de b7       	in	r29, 0x3e	; 62
    1686:	c1 56       	subi	r28, 0x61	; 97
    1688:	d0 40       	sbci	r29, 0x00	; 0
    168a:	0f b6       	in	r0, 0x3f	; 63
    168c:	f8 94       	cli
    168e:	de bf       	out	0x3e, r29	; 62
    1690:	0f be       	out	0x3f, r0	; 63
    1692:	cd bf       	out	0x3d, r28	; 61
    1694:	fe 01       	movw	r30, r28
    1696:	ef 59       	subi	r30, 0x9F	; 159
    1698:	ff 4f       	sbci	r31, 0xFF	; 255
    169a:	80 83       	st	Z, r24
	SET_BIT(PORTB,1);
    169c:	a8 e3       	ldi	r26, 0x38	; 56
    169e:	b0 e0       	ldi	r27, 0x00	; 0
    16a0:	e8 e3       	ldi	r30, 0x38	; 56
    16a2:	f0 e0       	ldi	r31, 0x00	; 0
    16a4:	80 81       	ld	r24, Z
    16a6:	82 60       	ori	r24, 0x02	; 2
    16a8:	8c 93       	st	X, r24
	CLR_BIT(PORTB,2);
    16aa:	a8 e3       	ldi	r26, 0x38	; 56
    16ac:	b0 e0       	ldi	r27, 0x00	; 0
    16ae:	e8 e3       	ldi	r30, 0x38	; 56
    16b0:	f0 e0       	ldi	r31, 0x00	; 0
    16b2:	80 81       	ld	r24, Z
    16b4:	8b 7f       	andi	r24, 0xFB	; 251
    16b6:	8c 93       	st	X, r24
	if(GET_BIT(data,4)){DIO_write(LCD_D4,HIGH);}else {DIO_write(LCD_D4,LOW);}
    16b8:	fe 01       	movw	r30, r28
    16ba:	ef 59       	subi	r30, 0x9F	; 159
    16bc:	ff 4f       	sbci	r31, 0xFF	; 255
    16be:	80 81       	ld	r24, Z
    16c0:	82 95       	swap	r24
    16c2:	8f 70       	andi	r24, 0x0F	; 15
    16c4:	88 2f       	mov	r24, r24
    16c6:	90 e0       	ldi	r25, 0x00	; 0
    16c8:	81 70       	andi	r24, 0x01	; 1
    16ca:	90 70       	andi	r25, 0x00	; 0
    16cc:	88 23       	and	r24, r24
    16ce:	29 f0       	breq	.+10     	; 0x16da <lcd_sendchar+0x60>
    16d0:	84 e0       	ldi	r24, 0x04	; 4
    16d2:	61 e0       	ldi	r22, 0x01	; 1
    16d4:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_write>
    16d8:	04 c0       	rjmp	.+8      	; 0x16e2 <lcd_sendchar+0x68>
    16da:	84 e0       	ldi	r24, 0x04	; 4
    16dc:	60 e0       	ldi	r22, 0x00	; 0
    16de:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_write>
	if(GET_BIT(data,5)){DIO_write(LCD_D5,HIGH);}else {DIO_write(LCD_D5,LOW);}
    16e2:	fe 01       	movw	r30, r28
    16e4:	ef 59       	subi	r30, 0x9F	; 159
    16e6:	ff 4f       	sbci	r31, 0xFF	; 255
    16e8:	80 81       	ld	r24, Z
    16ea:	82 95       	swap	r24
    16ec:	86 95       	lsr	r24
    16ee:	87 70       	andi	r24, 0x07	; 7
    16f0:	88 2f       	mov	r24, r24
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	81 70       	andi	r24, 0x01	; 1
    16f6:	90 70       	andi	r25, 0x00	; 0
    16f8:	88 23       	and	r24, r24
    16fa:	29 f0       	breq	.+10     	; 0x1706 <lcd_sendchar+0x8c>
    16fc:	85 e0       	ldi	r24, 0x05	; 5
    16fe:	61 e0       	ldi	r22, 0x01	; 1
    1700:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_write>
    1704:	04 c0       	rjmp	.+8      	; 0x170e <lcd_sendchar+0x94>
    1706:	85 e0       	ldi	r24, 0x05	; 5
    1708:	60 e0       	ldi	r22, 0x00	; 0
    170a:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_write>
	if(GET_BIT(data,6)){DIO_write(LCD_D6,HIGH);}else {DIO_write(LCD_D6,LOW);}
    170e:	fe 01       	movw	r30, r28
    1710:	ef 59       	subi	r30, 0x9F	; 159
    1712:	ff 4f       	sbci	r31, 0xFF	; 255
    1714:	80 81       	ld	r24, Z
    1716:	82 95       	swap	r24
    1718:	86 95       	lsr	r24
    171a:	86 95       	lsr	r24
    171c:	83 70       	andi	r24, 0x03	; 3
    171e:	88 2f       	mov	r24, r24
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	81 70       	andi	r24, 0x01	; 1
    1724:	90 70       	andi	r25, 0x00	; 0
    1726:	88 23       	and	r24, r24
    1728:	29 f0       	breq	.+10     	; 0x1734 <lcd_sendchar+0xba>
    172a:	86 e0       	ldi	r24, 0x06	; 6
    172c:	61 e0       	ldi	r22, 0x01	; 1
    172e:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_write>
    1732:	04 c0       	rjmp	.+8      	; 0x173c <lcd_sendchar+0xc2>
    1734:	86 e0       	ldi	r24, 0x06	; 6
    1736:	60 e0       	ldi	r22, 0x00	; 0
    1738:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_write>
	if(GET_BIT(data,7)){DIO_write(LCD_D7,HIGH);}else {DIO_write(LCD_D7,LOW);}
    173c:	fe 01       	movw	r30, r28
    173e:	ef 59       	subi	r30, 0x9F	; 159
    1740:	ff 4f       	sbci	r31, 0xFF	; 255
    1742:	80 81       	ld	r24, Z
    1744:	88 23       	and	r24, r24
    1746:	2c f4       	brge	.+10     	; 0x1752 <lcd_sendchar+0xd8>
    1748:	87 e0       	ldi	r24, 0x07	; 7
    174a:	61 e0       	ldi	r22, 0x01	; 1
    174c:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_write>
    1750:	04 c0       	rjmp	.+8      	; 0x175a <lcd_sendchar+0xe0>
    1752:	87 e0       	ldi	r24, 0x07	; 7
    1754:	60 e0       	ldi	r22, 0x00	; 0
    1756:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_write>

	SET_BIT(PORTB,6);
    175a:	a8 e3       	ldi	r26, 0x38	; 56
    175c:	b0 e0       	ldi	r27, 0x00	; 0
    175e:	e8 e3       	ldi	r30, 0x38	; 56
    1760:	f0 e0       	ldi	r31, 0x00	; 0
    1762:	80 81       	ld	r24, Z
    1764:	80 64       	ori	r24, 0x40	; 64
    1766:	8c 93       	st	X, r24
    1768:	fe 01       	movw	r30, r28
    176a:	e3 5a       	subi	r30, 0xA3	; 163
    176c:	ff 4f       	sbci	r31, 0xFF	; 255
    176e:	80 e0       	ldi	r24, 0x00	; 0
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	a0 e2       	ldi	r26, 0x20	; 32
    1774:	b1 e4       	ldi	r27, 0x41	; 65
    1776:	80 83       	st	Z, r24
    1778:	91 83       	std	Z+1, r25	; 0x01
    177a:	a2 83       	std	Z+2, r26	; 0x02
    177c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    177e:	8e 01       	movw	r16, r28
    1780:	07 5a       	subi	r16, 0xA7	; 167
    1782:	1f 4f       	sbci	r17, 0xFF	; 255
    1784:	fe 01       	movw	r30, r28
    1786:	e3 5a       	subi	r30, 0xA3	; 163
    1788:	ff 4f       	sbci	r31, 0xFF	; 255
    178a:	60 81       	ld	r22, Z
    178c:	71 81       	ldd	r23, Z+1	; 0x01
    178e:	82 81       	ldd	r24, Z+2	; 0x02
    1790:	93 81       	ldd	r25, Z+3	; 0x03
    1792:	2b ea       	ldi	r18, 0xAB	; 171
    1794:	3a ea       	ldi	r19, 0xAA	; 170
    1796:	4a ea       	ldi	r20, 0xAA	; 170
    1798:	50 e4       	ldi	r21, 0x40	; 64
    179a:	0e 94 59 21 	call	0x42b2	; 0x42b2 <__mulsf3>
    179e:	dc 01       	movw	r26, r24
    17a0:	cb 01       	movw	r24, r22
    17a2:	f8 01       	movw	r30, r16
    17a4:	80 83       	st	Z, r24
    17a6:	91 83       	std	Z+1, r25	; 0x01
    17a8:	a2 83       	std	Z+2, r26	; 0x02
    17aa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    17ac:	fe 01       	movw	r30, r28
    17ae:	e7 5a       	subi	r30, 0xA7	; 167
    17b0:	ff 4f       	sbci	r31, 0xFF	; 255
    17b2:	60 81       	ld	r22, Z
    17b4:	71 81       	ldd	r23, Z+1	; 0x01
    17b6:	82 81       	ldd	r24, Z+2	; 0x02
    17b8:	93 81       	ldd	r25, Z+3	; 0x03
    17ba:	20 e0       	ldi	r18, 0x00	; 0
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    17be:	40 e8       	ldi	r20, 0x80	; 128
    17c0:	5f e3       	ldi	r21, 0x3F	; 63
    17c2:	0e 94 5f 23 	call	0x46be	; 0x46be <__ltsf2>
    17c6:	88 23       	and	r24, r24
    17c8:	34 f4       	brge	.+12     	; 0x17d6 <lcd_sendchar+0x15c>
		__ticks = 1;
    17ca:	fe 01       	movw	r30, r28
    17cc:	e8 5a       	subi	r30, 0xA8	; 168
    17ce:	ff 4f       	sbci	r31, 0xFF	; 255
    17d0:	81 e0       	ldi	r24, 0x01	; 1
    17d2:	80 83       	st	Z, r24
    17d4:	e0 c0       	rjmp	.+448    	; 0x1996 <lcd_sendchar+0x31c>
	else if (__tmp > 255)
    17d6:	fe 01       	movw	r30, r28
    17d8:	e7 5a       	subi	r30, 0xA7	; 167
    17da:	ff 4f       	sbci	r31, 0xFF	; 255
    17dc:	60 81       	ld	r22, Z
    17de:	71 81       	ldd	r23, Z+1	; 0x01
    17e0:	82 81       	ldd	r24, Z+2	; 0x02
    17e2:	93 81       	ldd	r25, Z+3	; 0x03
    17e4:	20 e0       	ldi	r18, 0x00	; 0
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	4f e7       	ldi	r20, 0x7F	; 127
    17ea:	53 e4       	ldi	r21, 0x43	; 67
    17ec:	0e 94 ff 22 	call	0x45fe	; 0x45fe <__gtsf2>
    17f0:	18 16       	cp	r1, r24
    17f2:	0c f0       	brlt	.+2      	; 0x17f6 <lcd_sendchar+0x17c>
    17f4:	c0 c0       	rjmp	.+384    	; 0x1976 <lcd_sendchar+0x2fc>
	{
		_delay_ms(__us / 1000.0);
    17f6:	fe 01       	movw	r30, r28
    17f8:	e3 5a       	subi	r30, 0xA3	; 163
    17fa:	ff 4f       	sbci	r31, 0xFF	; 255
    17fc:	60 81       	ld	r22, Z
    17fe:	71 81       	ldd	r23, Z+1	; 0x01
    1800:	82 81       	ldd	r24, Z+2	; 0x02
    1802:	93 81       	ldd	r25, Z+3	; 0x03
    1804:	20 e0       	ldi	r18, 0x00	; 0
    1806:	30 e0       	ldi	r19, 0x00	; 0
    1808:	4a e7       	ldi	r20, 0x7A	; 122
    180a:	54 e4       	ldi	r21, 0x44	; 68
    180c:	0e 94 53 22 	call	0x44a6	; 0x44a6 <__divsf3>
    1810:	dc 01       	movw	r26, r24
    1812:	cb 01       	movw	r24, r22
    1814:	fe 01       	movw	r30, r28
    1816:	ec 5a       	subi	r30, 0xAC	; 172
    1818:	ff 4f       	sbci	r31, 0xFF	; 255
    181a:	80 83       	st	Z, r24
    181c:	91 83       	std	Z+1, r25	; 0x01
    181e:	a2 83       	std	Z+2, r26	; 0x02
    1820:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1822:	8e 01       	movw	r16, r28
    1824:	00 5b       	subi	r16, 0xB0	; 176
    1826:	1f 4f       	sbci	r17, 0xFF	; 255
    1828:	fe 01       	movw	r30, r28
    182a:	ec 5a       	subi	r30, 0xAC	; 172
    182c:	ff 4f       	sbci	r31, 0xFF	; 255
    182e:	60 81       	ld	r22, Z
    1830:	71 81       	ldd	r23, Z+1	; 0x01
    1832:	82 81       	ldd	r24, Z+2	; 0x02
    1834:	93 81       	ldd	r25, Z+3	; 0x03
    1836:	20 e0       	ldi	r18, 0x00	; 0
    1838:	30 e0       	ldi	r19, 0x00	; 0
    183a:	4a e7       	ldi	r20, 0x7A	; 122
    183c:	55 e4       	ldi	r21, 0x45	; 69
    183e:	0e 94 59 21 	call	0x42b2	; 0x42b2 <__mulsf3>
    1842:	dc 01       	movw	r26, r24
    1844:	cb 01       	movw	r24, r22
    1846:	f8 01       	movw	r30, r16
    1848:	80 83       	st	Z, r24
    184a:	91 83       	std	Z+1, r25	; 0x01
    184c:	a2 83       	std	Z+2, r26	; 0x02
    184e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1850:	fe 01       	movw	r30, r28
    1852:	e0 5b       	subi	r30, 0xB0	; 176
    1854:	ff 4f       	sbci	r31, 0xFF	; 255
    1856:	60 81       	ld	r22, Z
    1858:	71 81       	ldd	r23, Z+1	; 0x01
    185a:	82 81       	ldd	r24, Z+2	; 0x02
    185c:	93 81       	ldd	r25, Z+3	; 0x03
    185e:	20 e0       	ldi	r18, 0x00	; 0
    1860:	30 e0       	ldi	r19, 0x00	; 0
    1862:	40 e8       	ldi	r20, 0x80	; 128
    1864:	5f e3       	ldi	r21, 0x3F	; 63
    1866:	0e 94 5f 23 	call	0x46be	; 0x46be <__ltsf2>
    186a:	88 23       	and	r24, r24
    186c:	44 f4       	brge	.+16     	; 0x187e <lcd_sendchar+0x204>
		__ticks = 1;
    186e:	fe 01       	movw	r30, r28
    1870:	e2 5b       	subi	r30, 0xB2	; 178
    1872:	ff 4f       	sbci	r31, 0xFF	; 255
    1874:	81 e0       	ldi	r24, 0x01	; 1
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	91 83       	std	Z+1, r25	; 0x01
    187a:	80 83       	st	Z, r24
    187c:	64 c0       	rjmp	.+200    	; 0x1946 <lcd_sendchar+0x2cc>
	else if (__tmp > 65535)
    187e:	fe 01       	movw	r30, r28
    1880:	e0 5b       	subi	r30, 0xB0	; 176
    1882:	ff 4f       	sbci	r31, 0xFF	; 255
    1884:	60 81       	ld	r22, Z
    1886:	71 81       	ldd	r23, Z+1	; 0x01
    1888:	82 81       	ldd	r24, Z+2	; 0x02
    188a:	93 81       	ldd	r25, Z+3	; 0x03
    188c:	20 e0       	ldi	r18, 0x00	; 0
    188e:	3f ef       	ldi	r19, 0xFF	; 255
    1890:	4f e7       	ldi	r20, 0x7F	; 127
    1892:	57 e4       	ldi	r21, 0x47	; 71
    1894:	0e 94 ff 22 	call	0x45fe	; 0x45fe <__gtsf2>
    1898:	18 16       	cp	r1, r24
    189a:	0c f0       	brlt	.+2      	; 0x189e <lcd_sendchar+0x224>
    189c:	43 c0       	rjmp	.+134    	; 0x1924 <lcd_sendchar+0x2aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    189e:	fe 01       	movw	r30, r28
    18a0:	ec 5a       	subi	r30, 0xAC	; 172
    18a2:	ff 4f       	sbci	r31, 0xFF	; 255
    18a4:	60 81       	ld	r22, Z
    18a6:	71 81       	ldd	r23, Z+1	; 0x01
    18a8:	82 81       	ldd	r24, Z+2	; 0x02
    18aa:	93 81       	ldd	r25, Z+3	; 0x03
    18ac:	20 e0       	ldi	r18, 0x00	; 0
    18ae:	30 e0       	ldi	r19, 0x00	; 0
    18b0:	40 e2       	ldi	r20, 0x20	; 32
    18b2:	51 e4       	ldi	r21, 0x41	; 65
    18b4:	0e 94 59 21 	call	0x42b2	; 0x42b2 <__mulsf3>
    18b8:	dc 01       	movw	r26, r24
    18ba:	cb 01       	movw	r24, r22
    18bc:	8e 01       	movw	r16, r28
    18be:	02 5b       	subi	r16, 0xB2	; 178
    18c0:	1f 4f       	sbci	r17, 0xFF	; 255
    18c2:	bc 01       	movw	r22, r24
    18c4:	cd 01       	movw	r24, r26
    18c6:	0e 94 32 18 	call	0x3064	; 0x3064 <__fixunssfsi>
    18ca:	dc 01       	movw	r26, r24
    18cc:	cb 01       	movw	r24, r22
    18ce:	f8 01       	movw	r30, r16
    18d0:	91 83       	std	Z+1, r25	; 0x01
    18d2:	80 83       	st	Z, r24
    18d4:	1f c0       	rjmp	.+62     	; 0x1914 <lcd_sendchar+0x29a>
    18d6:	fe 01       	movw	r30, r28
    18d8:	e4 5b       	subi	r30, 0xB4	; 180
    18da:	ff 4f       	sbci	r31, 0xFF	; 255
    18dc:	80 e9       	ldi	r24, 0x90	; 144
    18de:	91 e0       	ldi	r25, 0x01	; 1
    18e0:	91 83       	std	Z+1, r25	; 0x01
    18e2:	80 83       	st	Z, r24
    18e4:	fe 01       	movw	r30, r28
    18e6:	e4 5b       	subi	r30, 0xB4	; 180
    18e8:	ff 4f       	sbci	r31, 0xFF	; 255
    18ea:	80 81       	ld	r24, Z
    18ec:	91 81       	ldd	r25, Z+1	; 0x01
    18ee:	01 97       	sbiw	r24, 0x01	; 1
    18f0:	f1 f7       	brne	.-4      	; 0x18ee <lcd_sendchar+0x274>
    18f2:	fe 01       	movw	r30, r28
    18f4:	e4 5b       	subi	r30, 0xB4	; 180
    18f6:	ff 4f       	sbci	r31, 0xFF	; 255
    18f8:	91 83       	std	Z+1, r25	; 0x01
    18fa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18fc:	de 01       	movw	r26, r28
    18fe:	a2 5b       	subi	r26, 0xB2	; 178
    1900:	bf 4f       	sbci	r27, 0xFF	; 255
    1902:	fe 01       	movw	r30, r28
    1904:	e2 5b       	subi	r30, 0xB2	; 178
    1906:	ff 4f       	sbci	r31, 0xFF	; 255
    1908:	80 81       	ld	r24, Z
    190a:	91 81       	ldd	r25, Z+1	; 0x01
    190c:	01 97       	sbiw	r24, 0x01	; 1
    190e:	11 96       	adiw	r26, 0x01	; 1
    1910:	9c 93       	st	X, r25
    1912:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1914:	fe 01       	movw	r30, r28
    1916:	e2 5b       	subi	r30, 0xB2	; 178
    1918:	ff 4f       	sbci	r31, 0xFF	; 255
    191a:	80 81       	ld	r24, Z
    191c:	91 81       	ldd	r25, Z+1	; 0x01
    191e:	00 97       	sbiw	r24, 0x00	; 0
    1920:	d1 f6       	brne	.-76     	; 0x18d6 <lcd_sendchar+0x25c>
    1922:	4b c0       	rjmp	.+150    	; 0x19ba <lcd_sendchar+0x340>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1924:	8e 01       	movw	r16, r28
    1926:	02 5b       	subi	r16, 0xB2	; 178
    1928:	1f 4f       	sbci	r17, 0xFF	; 255
    192a:	fe 01       	movw	r30, r28
    192c:	e0 5b       	subi	r30, 0xB0	; 176
    192e:	ff 4f       	sbci	r31, 0xFF	; 255
    1930:	60 81       	ld	r22, Z
    1932:	71 81       	ldd	r23, Z+1	; 0x01
    1934:	82 81       	ldd	r24, Z+2	; 0x02
    1936:	93 81       	ldd	r25, Z+3	; 0x03
    1938:	0e 94 32 18 	call	0x3064	; 0x3064 <__fixunssfsi>
    193c:	dc 01       	movw	r26, r24
    193e:	cb 01       	movw	r24, r22
    1940:	f8 01       	movw	r30, r16
    1942:	91 83       	std	Z+1, r25	; 0x01
    1944:	80 83       	st	Z, r24
    1946:	de 01       	movw	r26, r28
    1948:	a6 5b       	subi	r26, 0xB6	; 182
    194a:	bf 4f       	sbci	r27, 0xFF	; 255
    194c:	fe 01       	movw	r30, r28
    194e:	e2 5b       	subi	r30, 0xB2	; 178
    1950:	ff 4f       	sbci	r31, 0xFF	; 255
    1952:	80 81       	ld	r24, Z
    1954:	91 81       	ldd	r25, Z+1	; 0x01
    1956:	11 96       	adiw	r26, 0x01	; 1
    1958:	9c 93       	st	X, r25
    195a:	8e 93       	st	-X, r24
    195c:	fe 01       	movw	r30, r28
    195e:	e6 5b       	subi	r30, 0xB6	; 182
    1960:	ff 4f       	sbci	r31, 0xFF	; 255
    1962:	80 81       	ld	r24, Z
    1964:	91 81       	ldd	r25, Z+1	; 0x01
    1966:	01 97       	sbiw	r24, 0x01	; 1
    1968:	f1 f7       	brne	.-4      	; 0x1966 <lcd_sendchar+0x2ec>
    196a:	fe 01       	movw	r30, r28
    196c:	e6 5b       	subi	r30, 0xB6	; 182
    196e:	ff 4f       	sbci	r31, 0xFF	; 255
    1970:	91 83       	std	Z+1, r25	; 0x01
    1972:	80 83       	st	Z, r24
    1974:	22 c0       	rjmp	.+68     	; 0x19ba <lcd_sendchar+0x340>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1976:	8e 01       	movw	r16, r28
    1978:	08 5a       	subi	r16, 0xA8	; 168
    197a:	1f 4f       	sbci	r17, 0xFF	; 255
    197c:	fe 01       	movw	r30, r28
    197e:	e7 5a       	subi	r30, 0xA7	; 167
    1980:	ff 4f       	sbci	r31, 0xFF	; 255
    1982:	60 81       	ld	r22, Z
    1984:	71 81       	ldd	r23, Z+1	; 0x01
    1986:	82 81       	ldd	r24, Z+2	; 0x02
    1988:	93 81       	ldd	r25, Z+3	; 0x03
    198a:	0e 94 32 18 	call	0x3064	; 0x3064 <__fixunssfsi>
    198e:	dc 01       	movw	r26, r24
    1990:	cb 01       	movw	r24, r22
    1992:	f8 01       	movw	r30, r16
    1994:	80 83       	st	Z, r24
    1996:	de 01       	movw	r26, r28
    1998:	a7 5b       	subi	r26, 0xB7	; 183
    199a:	bf 4f       	sbci	r27, 0xFF	; 255
    199c:	fe 01       	movw	r30, r28
    199e:	e8 5a       	subi	r30, 0xA8	; 168
    19a0:	ff 4f       	sbci	r31, 0xFF	; 255
    19a2:	80 81       	ld	r24, Z
    19a4:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    19a6:	fe 01       	movw	r30, r28
    19a8:	e7 5b       	subi	r30, 0xB7	; 183
    19aa:	ff 4f       	sbci	r31, 0xFF	; 255
    19ac:	80 81       	ld	r24, Z
    19ae:	8a 95       	dec	r24
    19b0:	f1 f7       	brne	.-4      	; 0x19ae <lcd_sendchar+0x334>
    19b2:	fe 01       	movw	r30, r28
    19b4:	e7 5b       	subi	r30, 0xB7	; 183
    19b6:	ff 4f       	sbci	r31, 0xFF	; 255
    19b8:	80 83       	st	Z, r24
	_delay_us(10);
	CLR_BIT(PORTB,6);
    19ba:	a8 e3       	ldi	r26, 0x38	; 56
    19bc:	b0 e0       	ldi	r27, 0x00	; 0
    19be:	e8 e3       	ldi	r30, 0x38	; 56
    19c0:	f0 e0       	ldi	r31, 0x00	; 0
    19c2:	80 81       	ld	r24, Z
    19c4:	8f 7b       	andi	r24, 0xBF	; 191
    19c6:	8c 93       	st	X, r24
    19c8:	fe 01       	movw	r30, r28
    19ca:	eb 5b       	subi	r30, 0xBB	; 187
    19cc:	ff 4f       	sbci	r31, 0xFF	; 255
    19ce:	80 e0       	ldi	r24, 0x00	; 0
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	a8 e4       	ldi	r26, 0x48	; 72
    19d4:	b3 e4       	ldi	r27, 0x43	; 67
    19d6:	80 83       	st	Z, r24
    19d8:	91 83       	std	Z+1, r25	; 0x01
    19da:	a2 83       	std	Z+2, r26	; 0x02
    19dc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    19de:	8e 01       	movw	r16, r28
    19e0:	0f 5b       	subi	r16, 0xBF	; 191
    19e2:	1f 4f       	sbci	r17, 0xFF	; 255
    19e4:	fe 01       	movw	r30, r28
    19e6:	eb 5b       	subi	r30, 0xBB	; 187
    19e8:	ff 4f       	sbci	r31, 0xFF	; 255
    19ea:	60 81       	ld	r22, Z
    19ec:	71 81       	ldd	r23, Z+1	; 0x01
    19ee:	82 81       	ldd	r24, Z+2	; 0x02
    19f0:	93 81       	ldd	r25, Z+3	; 0x03
    19f2:	2b ea       	ldi	r18, 0xAB	; 171
    19f4:	3a ea       	ldi	r19, 0xAA	; 170
    19f6:	4a ea       	ldi	r20, 0xAA	; 170
    19f8:	50 e4       	ldi	r21, 0x40	; 64
    19fa:	0e 94 59 21 	call	0x42b2	; 0x42b2 <__mulsf3>
    19fe:	dc 01       	movw	r26, r24
    1a00:	cb 01       	movw	r24, r22
    1a02:	f8 01       	movw	r30, r16
    1a04:	80 83       	st	Z, r24
    1a06:	91 83       	std	Z+1, r25	; 0x01
    1a08:	a2 83       	std	Z+2, r26	; 0x02
    1a0a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a0c:	fe 01       	movw	r30, r28
    1a0e:	ef 5b       	subi	r30, 0xBF	; 191
    1a10:	ff 4f       	sbci	r31, 0xFF	; 255
    1a12:	60 81       	ld	r22, Z
    1a14:	71 81       	ldd	r23, Z+1	; 0x01
    1a16:	82 81       	ldd	r24, Z+2	; 0x02
    1a18:	93 81       	ldd	r25, Z+3	; 0x03
    1a1a:	20 e0       	ldi	r18, 0x00	; 0
    1a1c:	30 e0       	ldi	r19, 0x00	; 0
    1a1e:	40 e8       	ldi	r20, 0x80	; 128
    1a20:	5f e3       	ldi	r21, 0x3F	; 63
    1a22:	0e 94 5f 23 	call	0x46be	; 0x46be <__ltsf2>
    1a26:	88 23       	and	r24, r24
    1a28:	34 f4       	brge	.+12     	; 0x1a36 <lcd_sendchar+0x3bc>
		__ticks = 1;
    1a2a:	81 e0       	ldi	r24, 0x01	; 1
    1a2c:	fe 01       	movw	r30, r28
    1a2e:	e0 5c       	subi	r30, 0xC0	; 192
    1a30:	ff 4f       	sbci	r31, 0xFF	; 255
    1a32:	80 83       	st	Z, r24
    1a34:	9d c0       	rjmp	.+314    	; 0x1b70 <lcd_sendchar+0x4f6>
	else if (__tmp > 255)
    1a36:	fe 01       	movw	r30, r28
    1a38:	ef 5b       	subi	r30, 0xBF	; 191
    1a3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a3c:	60 81       	ld	r22, Z
    1a3e:	71 81       	ldd	r23, Z+1	; 0x01
    1a40:	82 81       	ldd	r24, Z+2	; 0x02
    1a42:	93 81       	ldd	r25, Z+3	; 0x03
    1a44:	20 e0       	ldi	r18, 0x00	; 0
    1a46:	30 e0       	ldi	r19, 0x00	; 0
    1a48:	4f e7       	ldi	r20, 0x7F	; 127
    1a4a:	53 e4       	ldi	r21, 0x43	; 67
    1a4c:	0e 94 ff 22 	call	0x45fe	; 0x45fe <__gtsf2>
    1a50:	18 16       	cp	r1, r24
    1a52:	0c f0       	brlt	.+2      	; 0x1a56 <lcd_sendchar+0x3dc>
    1a54:	7e c0       	rjmp	.+252    	; 0x1b52 <lcd_sendchar+0x4d8>
	{
		_delay_ms(__us / 1000.0);
    1a56:	fe 01       	movw	r30, r28
    1a58:	eb 5b       	subi	r30, 0xBB	; 187
    1a5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a5c:	60 81       	ld	r22, Z
    1a5e:	71 81       	ldd	r23, Z+1	; 0x01
    1a60:	82 81       	ldd	r24, Z+2	; 0x02
    1a62:	93 81       	ldd	r25, Z+3	; 0x03
    1a64:	20 e0       	ldi	r18, 0x00	; 0
    1a66:	30 e0       	ldi	r19, 0x00	; 0
    1a68:	4a e7       	ldi	r20, 0x7A	; 122
    1a6a:	54 e4       	ldi	r21, 0x44	; 68
    1a6c:	0e 94 53 22 	call	0x44a6	; 0x44a6 <__divsf3>
    1a70:	dc 01       	movw	r26, r24
    1a72:	cb 01       	movw	r24, r22
    1a74:	8c af       	std	Y+60, r24	; 0x3c
    1a76:	9d af       	std	Y+61, r25	; 0x3d
    1a78:	ae af       	std	Y+62, r26	; 0x3e
    1a7a:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a7c:	6c ad       	ldd	r22, Y+60	; 0x3c
    1a7e:	7d ad       	ldd	r23, Y+61	; 0x3d
    1a80:	8e ad       	ldd	r24, Y+62	; 0x3e
    1a82:	9f ad       	ldd	r25, Y+63	; 0x3f
    1a84:	20 e0       	ldi	r18, 0x00	; 0
    1a86:	30 e0       	ldi	r19, 0x00	; 0
    1a88:	4a e7       	ldi	r20, 0x7A	; 122
    1a8a:	55 e4       	ldi	r21, 0x45	; 69
    1a8c:	0e 94 59 21 	call	0x42b2	; 0x42b2 <__mulsf3>
    1a90:	dc 01       	movw	r26, r24
    1a92:	cb 01       	movw	r24, r22
    1a94:	88 af       	std	Y+56, r24	; 0x38
    1a96:	99 af       	std	Y+57, r25	; 0x39
    1a98:	aa af       	std	Y+58, r26	; 0x3a
    1a9a:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    1a9c:	68 ad       	ldd	r22, Y+56	; 0x38
    1a9e:	79 ad       	ldd	r23, Y+57	; 0x39
    1aa0:	8a ad       	ldd	r24, Y+58	; 0x3a
    1aa2:	9b ad       	ldd	r25, Y+59	; 0x3b
    1aa4:	20 e0       	ldi	r18, 0x00	; 0
    1aa6:	30 e0       	ldi	r19, 0x00	; 0
    1aa8:	40 e8       	ldi	r20, 0x80	; 128
    1aaa:	5f e3       	ldi	r21, 0x3F	; 63
    1aac:	0e 94 5f 23 	call	0x46be	; 0x46be <__ltsf2>
    1ab0:	88 23       	and	r24, r24
    1ab2:	2c f4       	brge	.+10     	; 0x1abe <lcd_sendchar+0x444>
		__ticks = 1;
    1ab4:	81 e0       	ldi	r24, 0x01	; 1
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
    1ab8:	9f ab       	std	Y+55, r25	; 0x37
    1aba:	8e ab       	std	Y+54, r24	; 0x36
    1abc:	3f c0       	rjmp	.+126    	; 0x1b3c <lcd_sendchar+0x4c2>
	else if (__tmp > 65535)
    1abe:	68 ad       	ldd	r22, Y+56	; 0x38
    1ac0:	79 ad       	ldd	r23, Y+57	; 0x39
    1ac2:	8a ad       	ldd	r24, Y+58	; 0x3a
    1ac4:	9b ad       	ldd	r25, Y+59	; 0x3b
    1ac6:	20 e0       	ldi	r18, 0x00	; 0
    1ac8:	3f ef       	ldi	r19, 0xFF	; 255
    1aca:	4f e7       	ldi	r20, 0x7F	; 127
    1acc:	57 e4       	ldi	r21, 0x47	; 71
    1ace:	0e 94 ff 22 	call	0x45fe	; 0x45fe <__gtsf2>
    1ad2:	18 16       	cp	r1, r24
    1ad4:	4c f5       	brge	.+82     	; 0x1b28 <lcd_sendchar+0x4ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ad6:	6c ad       	ldd	r22, Y+60	; 0x3c
    1ad8:	7d ad       	ldd	r23, Y+61	; 0x3d
    1ada:	8e ad       	ldd	r24, Y+62	; 0x3e
    1adc:	9f ad       	ldd	r25, Y+63	; 0x3f
    1ade:	20 e0       	ldi	r18, 0x00	; 0
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	40 e2       	ldi	r20, 0x20	; 32
    1ae4:	51 e4       	ldi	r21, 0x41	; 65
    1ae6:	0e 94 59 21 	call	0x42b2	; 0x42b2 <__mulsf3>
    1aea:	dc 01       	movw	r26, r24
    1aec:	cb 01       	movw	r24, r22
    1aee:	bc 01       	movw	r22, r24
    1af0:	cd 01       	movw	r24, r26
    1af2:	0e 94 32 18 	call	0x3064	; 0x3064 <__fixunssfsi>
    1af6:	dc 01       	movw	r26, r24
    1af8:	cb 01       	movw	r24, r22
    1afa:	9f ab       	std	Y+55, r25	; 0x37
    1afc:	8e ab       	std	Y+54, r24	; 0x36
    1afe:	0f c0       	rjmp	.+30     	; 0x1b1e <lcd_sendchar+0x4a4>
    1b00:	80 e9       	ldi	r24, 0x90	; 144
    1b02:	91 e0       	ldi	r25, 0x01	; 1
    1b04:	9d ab       	std	Y+53, r25	; 0x35
    1b06:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b08:	8c a9       	ldd	r24, Y+52	; 0x34
    1b0a:	9d a9       	ldd	r25, Y+53	; 0x35
    1b0c:	01 97       	sbiw	r24, 0x01	; 1
    1b0e:	f1 f7       	brne	.-4      	; 0x1b0c <lcd_sendchar+0x492>
    1b10:	9d ab       	std	Y+53, r25	; 0x35
    1b12:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b14:	8e a9       	ldd	r24, Y+54	; 0x36
    1b16:	9f a9       	ldd	r25, Y+55	; 0x37
    1b18:	01 97       	sbiw	r24, 0x01	; 1
    1b1a:	9f ab       	std	Y+55, r25	; 0x37
    1b1c:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b1e:	8e a9       	ldd	r24, Y+54	; 0x36
    1b20:	9f a9       	ldd	r25, Y+55	; 0x37
    1b22:	00 97       	sbiw	r24, 0x00	; 0
    1b24:	69 f7       	brne	.-38     	; 0x1b00 <lcd_sendchar+0x486>
    1b26:	2d c0       	rjmp	.+90     	; 0x1b82 <lcd_sendchar+0x508>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b28:	68 ad       	ldd	r22, Y+56	; 0x38
    1b2a:	79 ad       	ldd	r23, Y+57	; 0x39
    1b2c:	8a ad       	ldd	r24, Y+58	; 0x3a
    1b2e:	9b ad       	ldd	r25, Y+59	; 0x3b
    1b30:	0e 94 32 18 	call	0x3064	; 0x3064 <__fixunssfsi>
    1b34:	dc 01       	movw	r26, r24
    1b36:	cb 01       	movw	r24, r22
    1b38:	9f ab       	std	Y+55, r25	; 0x37
    1b3a:	8e ab       	std	Y+54, r24	; 0x36
    1b3c:	8e a9       	ldd	r24, Y+54	; 0x36
    1b3e:	9f a9       	ldd	r25, Y+55	; 0x37
    1b40:	9b ab       	std	Y+51, r25	; 0x33
    1b42:	8a ab       	std	Y+50, r24	; 0x32
    1b44:	8a a9       	ldd	r24, Y+50	; 0x32
    1b46:	9b a9       	ldd	r25, Y+51	; 0x33
    1b48:	01 97       	sbiw	r24, 0x01	; 1
    1b4a:	f1 f7       	brne	.-4      	; 0x1b48 <lcd_sendchar+0x4ce>
    1b4c:	9b ab       	std	Y+51, r25	; 0x33
    1b4e:	8a ab       	std	Y+50, r24	; 0x32
    1b50:	18 c0       	rjmp	.+48     	; 0x1b82 <lcd_sendchar+0x508>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1b52:	fe 01       	movw	r30, r28
    1b54:	ef 5b       	subi	r30, 0xBF	; 191
    1b56:	ff 4f       	sbci	r31, 0xFF	; 255
    1b58:	60 81       	ld	r22, Z
    1b5a:	71 81       	ldd	r23, Z+1	; 0x01
    1b5c:	82 81       	ldd	r24, Z+2	; 0x02
    1b5e:	93 81       	ldd	r25, Z+3	; 0x03
    1b60:	0e 94 32 18 	call	0x3064	; 0x3064 <__fixunssfsi>
    1b64:	dc 01       	movw	r26, r24
    1b66:	cb 01       	movw	r24, r22
    1b68:	fe 01       	movw	r30, r28
    1b6a:	e0 5c       	subi	r30, 0xC0	; 192
    1b6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6e:	80 83       	st	Z, r24
    1b70:	fe 01       	movw	r30, r28
    1b72:	e0 5c       	subi	r30, 0xC0	; 192
    1b74:	ff 4f       	sbci	r31, 0xFF	; 255
    1b76:	80 81       	ld	r24, Z
    1b78:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1b7a:	89 a9       	ldd	r24, Y+49	; 0x31
    1b7c:	8a 95       	dec	r24
    1b7e:	f1 f7       	brne	.-4      	; 0x1b7c <lcd_sendchar+0x502>
    1b80:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(200);

	if(GET_BIT(data,0)){DIO_write(LCD_D4,HIGH);}else {DIO_write(LCD_D4,LOW);}
    1b82:	fe 01       	movw	r30, r28
    1b84:	ef 59       	subi	r30, 0x9F	; 159
    1b86:	ff 4f       	sbci	r31, 0xFF	; 255
    1b88:	80 81       	ld	r24, Z
    1b8a:	88 2f       	mov	r24, r24
    1b8c:	90 e0       	ldi	r25, 0x00	; 0
    1b8e:	81 70       	andi	r24, 0x01	; 1
    1b90:	90 70       	andi	r25, 0x00	; 0
    1b92:	88 23       	and	r24, r24
    1b94:	29 f0       	breq	.+10     	; 0x1ba0 <lcd_sendchar+0x526>
    1b96:	84 e0       	ldi	r24, 0x04	; 4
    1b98:	61 e0       	ldi	r22, 0x01	; 1
    1b9a:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_write>
    1b9e:	04 c0       	rjmp	.+8      	; 0x1ba8 <lcd_sendchar+0x52e>
    1ba0:	84 e0       	ldi	r24, 0x04	; 4
    1ba2:	60 e0       	ldi	r22, 0x00	; 0
    1ba4:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_write>
	if(GET_BIT(data,1)){DIO_write(LCD_D5,HIGH);}else {DIO_write(LCD_D5,LOW);}
    1ba8:	fe 01       	movw	r30, r28
    1baa:	ef 59       	subi	r30, 0x9F	; 159
    1bac:	ff 4f       	sbci	r31, 0xFF	; 255
    1bae:	80 81       	ld	r24, Z
    1bb0:	86 95       	lsr	r24
    1bb2:	88 2f       	mov	r24, r24
    1bb4:	90 e0       	ldi	r25, 0x00	; 0
    1bb6:	81 70       	andi	r24, 0x01	; 1
    1bb8:	90 70       	andi	r25, 0x00	; 0
    1bba:	88 23       	and	r24, r24
    1bbc:	29 f0       	breq	.+10     	; 0x1bc8 <lcd_sendchar+0x54e>
    1bbe:	85 e0       	ldi	r24, 0x05	; 5
    1bc0:	61 e0       	ldi	r22, 0x01	; 1
    1bc2:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_write>
    1bc6:	04 c0       	rjmp	.+8      	; 0x1bd0 <lcd_sendchar+0x556>
    1bc8:	85 e0       	ldi	r24, 0x05	; 5
    1bca:	60 e0       	ldi	r22, 0x00	; 0
    1bcc:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_write>
	if(GET_BIT(data,2)){DIO_write(LCD_D6,HIGH);}else {DIO_write(LCD_D6,LOW);}
    1bd0:	fe 01       	movw	r30, r28
    1bd2:	ef 59       	subi	r30, 0x9F	; 159
    1bd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd6:	80 81       	ld	r24, Z
    1bd8:	86 95       	lsr	r24
    1bda:	86 95       	lsr	r24
    1bdc:	88 2f       	mov	r24, r24
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	81 70       	andi	r24, 0x01	; 1
    1be2:	90 70       	andi	r25, 0x00	; 0
    1be4:	88 23       	and	r24, r24
    1be6:	29 f0       	breq	.+10     	; 0x1bf2 <lcd_sendchar+0x578>
    1be8:	86 e0       	ldi	r24, 0x06	; 6
    1bea:	61 e0       	ldi	r22, 0x01	; 1
    1bec:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_write>
    1bf0:	04 c0       	rjmp	.+8      	; 0x1bfa <lcd_sendchar+0x580>
    1bf2:	86 e0       	ldi	r24, 0x06	; 6
    1bf4:	60 e0       	ldi	r22, 0x00	; 0
    1bf6:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_write>
	if(GET_BIT(data,3)){DIO_write(LCD_D7,HIGH);}else {DIO_write(LCD_D7,LOW);}
    1bfa:	fe 01       	movw	r30, r28
    1bfc:	ef 59       	subi	r30, 0x9F	; 159
    1bfe:	ff 4f       	sbci	r31, 0xFF	; 255
    1c00:	80 81       	ld	r24, Z
    1c02:	86 95       	lsr	r24
    1c04:	86 95       	lsr	r24
    1c06:	86 95       	lsr	r24
    1c08:	88 2f       	mov	r24, r24
    1c0a:	90 e0       	ldi	r25, 0x00	; 0
    1c0c:	81 70       	andi	r24, 0x01	; 1
    1c0e:	90 70       	andi	r25, 0x00	; 0
    1c10:	88 23       	and	r24, r24
    1c12:	29 f0       	breq	.+10     	; 0x1c1e <lcd_sendchar+0x5a4>
    1c14:	87 e0       	ldi	r24, 0x07	; 7
    1c16:	61 e0       	ldi	r22, 0x01	; 1
    1c18:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_write>
    1c1c:	04 c0       	rjmp	.+8      	; 0x1c26 <lcd_sendchar+0x5ac>
    1c1e:	87 e0       	ldi	r24, 0x07	; 7
    1c20:	60 e0       	ldi	r22, 0x00	; 0
    1c22:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_write>

	SET_BIT(PORTB,6);
    1c26:	a8 e3       	ldi	r26, 0x38	; 56
    1c28:	b0 e0       	ldi	r27, 0x00	; 0
    1c2a:	e8 e3       	ldi	r30, 0x38	; 56
    1c2c:	f0 e0       	ldi	r31, 0x00	; 0
    1c2e:	80 81       	ld	r24, Z
    1c30:	80 64       	ori	r24, 0x40	; 64
    1c32:	8c 93       	st	X, r24
    1c34:	80 e0       	ldi	r24, 0x00	; 0
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	a0 e2       	ldi	r26, 0x20	; 32
    1c3a:	b1 e4       	ldi	r27, 0x41	; 65
    1c3c:	8d a7       	std	Y+45, r24	; 0x2d
    1c3e:	9e a7       	std	Y+46, r25	; 0x2e
    1c40:	af a7       	std	Y+47, r26	; 0x2f
    1c42:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1c44:	6d a5       	ldd	r22, Y+45	; 0x2d
    1c46:	7e a5       	ldd	r23, Y+46	; 0x2e
    1c48:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c4a:	98 a9       	ldd	r25, Y+48	; 0x30
    1c4c:	2b ea       	ldi	r18, 0xAB	; 171
    1c4e:	3a ea       	ldi	r19, 0xAA	; 170
    1c50:	4a ea       	ldi	r20, 0xAA	; 170
    1c52:	50 e4       	ldi	r21, 0x40	; 64
    1c54:	0e 94 59 21 	call	0x42b2	; 0x42b2 <__mulsf3>
    1c58:	dc 01       	movw	r26, r24
    1c5a:	cb 01       	movw	r24, r22
    1c5c:	89 a7       	std	Y+41, r24	; 0x29
    1c5e:	9a a7       	std	Y+42, r25	; 0x2a
    1c60:	ab a7       	std	Y+43, r26	; 0x2b
    1c62:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1c64:	69 a5       	ldd	r22, Y+41	; 0x29
    1c66:	7a a5       	ldd	r23, Y+42	; 0x2a
    1c68:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c6a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c6c:	20 e0       	ldi	r18, 0x00	; 0
    1c6e:	30 e0       	ldi	r19, 0x00	; 0
    1c70:	40 e8       	ldi	r20, 0x80	; 128
    1c72:	5f e3       	ldi	r21, 0x3F	; 63
    1c74:	0e 94 5f 23 	call	0x46be	; 0x46be <__ltsf2>
    1c78:	88 23       	and	r24, r24
    1c7a:	1c f4       	brge	.+6      	; 0x1c82 <lcd_sendchar+0x608>
		__ticks = 1;
    1c7c:	81 e0       	ldi	r24, 0x01	; 1
    1c7e:	88 a7       	std	Y+40, r24	; 0x28
    1c80:	91 c0       	rjmp	.+290    	; 0x1da4 <lcd_sendchar+0x72a>
	else if (__tmp > 255)
    1c82:	69 a5       	ldd	r22, Y+41	; 0x29
    1c84:	7a a5       	ldd	r23, Y+42	; 0x2a
    1c86:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c88:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c8a:	20 e0       	ldi	r18, 0x00	; 0
    1c8c:	30 e0       	ldi	r19, 0x00	; 0
    1c8e:	4f e7       	ldi	r20, 0x7F	; 127
    1c90:	53 e4       	ldi	r21, 0x43	; 67
    1c92:	0e 94 ff 22 	call	0x45fe	; 0x45fe <__gtsf2>
    1c96:	18 16       	cp	r1, r24
    1c98:	0c f0       	brlt	.+2      	; 0x1c9c <lcd_sendchar+0x622>
    1c9a:	7b c0       	rjmp	.+246    	; 0x1d92 <lcd_sendchar+0x718>
	{
		_delay_ms(__us / 1000.0);
    1c9c:	6d a5       	ldd	r22, Y+45	; 0x2d
    1c9e:	7e a5       	ldd	r23, Y+46	; 0x2e
    1ca0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ca2:	98 a9       	ldd	r25, Y+48	; 0x30
    1ca4:	20 e0       	ldi	r18, 0x00	; 0
    1ca6:	30 e0       	ldi	r19, 0x00	; 0
    1ca8:	4a e7       	ldi	r20, 0x7A	; 122
    1caa:	54 e4       	ldi	r21, 0x44	; 68
    1cac:	0e 94 53 22 	call	0x44a6	; 0x44a6 <__divsf3>
    1cb0:	dc 01       	movw	r26, r24
    1cb2:	cb 01       	movw	r24, r22
    1cb4:	8c a3       	std	Y+36, r24	; 0x24
    1cb6:	9d a3       	std	Y+37, r25	; 0x25
    1cb8:	ae a3       	std	Y+38, r26	; 0x26
    1cba:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cbc:	6c a1       	ldd	r22, Y+36	; 0x24
    1cbe:	7d a1       	ldd	r23, Y+37	; 0x25
    1cc0:	8e a1       	ldd	r24, Y+38	; 0x26
    1cc2:	9f a1       	ldd	r25, Y+39	; 0x27
    1cc4:	20 e0       	ldi	r18, 0x00	; 0
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	4a e7       	ldi	r20, 0x7A	; 122
    1cca:	55 e4       	ldi	r21, 0x45	; 69
    1ccc:	0e 94 59 21 	call	0x42b2	; 0x42b2 <__mulsf3>
    1cd0:	dc 01       	movw	r26, r24
    1cd2:	cb 01       	movw	r24, r22
    1cd4:	88 a3       	std	Y+32, r24	; 0x20
    1cd6:	99 a3       	std	Y+33, r25	; 0x21
    1cd8:	aa a3       	std	Y+34, r26	; 0x22
    1cda:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1cdc:	68 a1       	ldd	r22, Y+32	; 0x20
    1cde:	79 a1       	ldd	r23, Y+33	; 0x21
    1ce0:	8a a1       	ldd	r24, Y+34	; 0x22
    1ce2:	9b a1       	ldd	r25, Y+35	; 0x23
    1ce4:	20 e0       	ldi	r18, 0x00	; 0
    1ce6:	30 e0       	ldi	r19, 0x00	; 0
    1ce8:	40 e8       	ldi	r20, 0x80	; 128
    1cea:	5f e3       	ldi	r21, 0x3F	; 63
    1cec:	0e 94 5f 23 	call	0x46be	; 0x46be <__ltsf2>
    1cf0:	88 23       	and	r24, r24
    1cf2:	2c f4       	brge	.+10     	; 0x1cfe <lcd_sendchar+0x684>
		__ticks = 1;
    1cf4:	81 e0       	ldi	r24, 0x01	; 1
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	9f 8f       	std	Y+31, r25	; 0x1f
    1cfa:	8e 8f       	std	Y+30, r24	; 0x1e
    1cfc:	3f c0       	rjmp	.+126    	; 0x1d7c <lcd_sendchar+0x702>
	else if (__tmp > 65535)
    1cfe:	68 a1       	ldd	r22, Y+32	; 0x20
    1d00:	79 a1       	ldd	r23, Y+33	; 0x21
    1d02:	8a a1       	ldd	r24, Y+34	; 0x22
    1d04:	9b a1       	ldd	r25, Y+35	; 0x23
    1d06:	20 e0       	ldi	r18, 0x00	; 0
    1d08:	3f ef       	ldi	r19, 0xFF	; 255
    1d0a:	4f e7       	ldi	r20, 0x7F	; 127
    1d0c:	57 e4       	ldi	r21, 0x47	; 71
    1d0e:	0e 94 ff 22 	call	0x45fe	; 0x45fe <__gtsf2>
    1d12:	18 16       	cp	r1, r24
    1d14:	4c f5       	brge	.+82     	; 0x1d68 <lcd_sendchar+0x6ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d16:	6c a1       	ldd	r22, Y+36	; 0x24
    1d18:	7d a1       	ldd	r23, Y+37	; 0x25
    1d1a:	8e a1       	ldd	r24, Y+38	; 0x26
    1d1c:	9f a1       	ldd	r25, Y+39	; 0x27
    1d1e:	20 e0       	ldi	r18, 0x00	; 0
    1d20:	30 e0       	ldi	r19, 0x00	; 0
    1d22:	40 e2       	ldi	r20, 0x20	; 32
    1d24:	51 e4       	ldi	r21, 0x41	; 65
    1d26:	0e 94 59 21 	call	0x42b2	; 0x42b2 <__mulsf3>
    1d2a:	dc 01       	movw	r26, r24
    1d2c:	cb 01       	movw	r24, r22
    1d2e:	bc 01       	movw	r22, r24
    1d30:	cd 01       	movw	r24, r26
    1d32:	0e 94 32 18 	call	0x3064	; 0x3064 <__fixunssfsi>
    1d36:	dc 01       	movw	r26, r24
    1d38:	cb 01       	movw	r24, r22
    1d3a:	9f 8f       	std	Y+31, r25	; 0x1f
    1d3c:	8e 8f       	std	Y+30, r24	; 0x1e
    1d3e:	0f c0       	rjmp	.+30     	; 0x1d5e <lcd_sendchar+0x6e4>
    1d40:	80 e9       	ldi	r24, 0x90	; 144
    1d42:	91 e0       	ldi	r25, 0x01	; 1
    1d44:	9d 8f       	std	Y+29, r25	; 0x1d
    1d46:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d48:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1d4a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1d4c:	01 97       	sbiw	r24, 0x01	; 1
    1d4e:	f1 f7       	brne	.-4      	; 0x1d4c <lcd_sendchar+0x6d2>
    1d50:	9d 8f       	std	Y+29, r25	; 0x1d
    1d52:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d54:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1d56:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1d58:	01 97       	sbiw	r24, 0x01	; 1
    1d5a:	9f 8f       	std	Y+31, r25	; 0x1f
    1d5c:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d5e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1d60:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1d62:	00 97       	sbiw	r24, 0x00	; 0
    1d64:	69 f7       	brne	.-38     	; 0x1d40 <lcd_sendchar+0x6c6>
    1d66:	24 c0       	rjmp	.+72     	; 0x1db0 <lcd_sendchar+0x736>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d68:	68 a1       	ldd	r22, Y+32	; 0x20
    1d6a:	79 a1       	ldd	r23, Y+33	; 0x21
    1d6c:	8a a1       	ldd	r24, Y+34	; 0x22
    1d6e:	9b a1       	ldd	r25, Y+35	; 0x23
    1d70:	0e 94 32 18 	call	0x3064	; 0x3064 <__fixunssfsi>
    1d74:	dc 01       	movw	r26, r24
    1d76:	cb 01       	movw	r24, r22
    1d78:	9f 8f       	std	Y+31, r25	; 0x1f
    1d7a:	8e 8f       	std	Y+30, r24	; 0x1e
    1d7c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1d7e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1d80:	9b 8f       	std	Y+27, r25	; 0x1b
    1d82:	8a 8f       	std	Y+26, r24	; 0x1a
    1d84:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1d86:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1d88:	01 97       	sbiw	r24, 0x01	; 1
    1d8a:	f1 f7       	brne	.-4      	; 0x1d88 <lcd_sendchar+0x70e>
    1d8c:	9b 8f       	std	Y+27, r25	; 0x1b
    1d8e:	8a 8f       	std	Y+26, r24	; 0x1a
    1d90:	0f c0       	rjmp	.+30     	; 0x1db0 <lcd_sendchar+0x736>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1d92:	69 a5       	ldd	r22, Y+41	; 0x29
    1d94:	7a a5       	ldd	r23, Y+42	; 0x2a
    1d96:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d98:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d9a:	0e 94 32 18 	call	0x3064	; 0x3064 <__fixunssfsi>
    1d9e:	dc 01       	movw	r26, r24
    1da0:	cb 01       	movw	r24, r22
    1da2:	88 a7       	std	Y+40, r24	; 0x28
    1da4:	88 a5       	ldd	r24, Y+40	; 0x28
    1da6:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1da8:	89 8d       	ldd	r24, Y+25	; 0x19
    1daa:	8a 95       	dec	r24
    1dac:	f1 f7       	brne	.-4      	; 0x1daa <lcd_sendchar+0x730>
    1dae:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(10);
	CLR_BIT(PORTB,6);
    1db0:	a8 e3       	ldi	r26, 0x38	; 56
    1db2:	b0 e0       	ldi	r27, 0x00	; 0
    1db4:	e8 e3       	ldi	r30, 0x38	; 56
    1db6:	f0 e0       	ldi	r31, 0x00	; 0
    1db8:	80 81       	ld	r24, Z
    1dba:	8f 7b       	andi	r24, 0xBF	; 191
    1dbc:	8c 93       	st	X, r24
    1dbe:	80 e0       	ldi	r24, 0x00	; 0
    1dc0:	90 e0       	ldi	r25, 0x00	; 0
    1dc2:	a8 e4       	ldi	r26, 0x48	; 72
    1dc4:	b3 e4       	ldi	r27, 0x43	; 67
    1dc6:	8d 8b       	std	Y+21, r24	; 0x15
    1dc8:	9e 8b       	std	Y+22, r25	; 0x16
    1dca:	af 8b       	std	Y+23, r26	; 0x17
    1dcc:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1dce:	6d 89       	ldd	r22, Y+21	; 0x15
    1dd0:	7e 89       	ldd	r23, Y+22	; 0x16
    1dd2:	8f 89       	ldd	r24, Y+23	; 0x17
    1dd4:	98 8d       	ldd	r25, Y+24	; 0x18
    1dd6:	2b ea       	ldi	r18, 0xAB	; 171
    1dd8:	3a ea       	ldi	r19, 0xAA	; 170
    1dda:	4a ea       	ldi	r20, 0xAA	; 170
    1ddc:	50 e4       	ldi	r21, 0x40	; 64
    1dde:	0e 94 59 21 	call	0x42b2	; 0x42b2 <__mulsf3>
    1de2:	dc 01       	movw	r26, r24
    1de4:	cb 01       	movw	r24, r22
    1de6:	89 8b       	std	Y+17, r24	; 0x11
    1de8:	9a 8b       	std	Y+18, r25	; 0x12
    1dea:	ab 8b       	std	Y+19, r26	; 0x13
    1dec:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1dee:	69 89       	ldd	r22, Y+17	; 0x11
    1df0:	7a 89       	ldd	r23, Y+18	; 0x12
    1df2:	8b 89       	ldd	r24, Y+19	; 0x13
    1df4:	9c 89       	ldd	r25, Y+20	; 0x14
    1df6:	20 e0       	ldi	r18, 0x00	; 0
    1df8:	30 e0       	ldi	r19, 0x00	; 0
    1dfa:	40 e8       	ldi	r20, 0x80	; 128
    1dfc:	5f e3       	ldi	r21, 0x3F	; 63
    1dfe:	0e 94 5f 23 	call	0x46be	; 0x46be <__ltsf2>
    1e02:	88 23       	and	r24, r24
    1e04:	1c f4       	brge	.+6      	; 0x1e0c <lcd_sendchar+0x792>
		__ticks = 1;
    1e06:	81 e0       	ldi	r24, 0x01	; 1
    1e08:	88 8b       	std	Y+16, r24	; 0x10
    1e0a:	91 c0       	rjmp	.+290    	; 0x1f2e <lcd_sendchar+0x8b4>
	else if (__tmp > 255)
    1e0c:	69 89       	ldd	r22, Y+17	; 0x11
    1e0e:	7a 89       	ldd	r23, Y+18	; 0x12
    1e10:	8b 89       	ldd	r24, Y+19	; 0x13
    1e12:	9c 89       	ldd	r25, Y+20	; 0x14
    1e14:	20 e0       	ldi	r18, 0x00	; 0
    1e16:	30 e0       	ldi	r19, 0x00	; 0
    1e18:	4f e7       	ldi	r20, 0x7F	; 127
    1e1a:	53 e4       	ldi	r21, 0x43	; 67
    1e1c:	0e 94 ff 22 	call	0x45fe	; 0x45fe <__gtsf2>
    1e20:	18 16       	cp	r1, r24
    1e22:	0c f0       	brlt	.+2      	; 0x1e26 <lcd_sendchar+0x7ac>
    1e24:	7b c0       	rjmp	.+246    	; 0x1f1c <lcd_sendchar+0x8a2>
	{
		_delay_ms(__us / 1000.0);
    1e26:	6d 89       	ldd	r22, Y+21	; 0x15
    1e28:	7e 89       	ldd	r23, Y+22	; 0x16
    1e2a:	8f 89       	ldd	r24, Y+23	; 0x17
    1e2c:	98 8d       	ldd	r25, Y+24	; 0x18
    1e2e:	20 e0       	ldi	r18, 0x00	; 0
    1e30:	30 e0       	ldi	r19, 0x00	; 0
    1e32:	4a e7       	ldi	r20, 0x7A	; 122
    1e34:	54 e4       	ldi	r21, 0x44	; 68
    1e36:	0e 94 53 22 	call	0x44a6	; 0x44a6 <__divsf3>
    1e3a:	dc 01       	movw	r26, r24
    1e3c:	cb 01       	movw	r24, r22
    1e3e:	8c 87       	std	Y+12, r24	; 0x0c
    1e40:	9d 87       	std	Y+13, r25	; 0x0d
    1e42:	ae 87       	std	Y+14, r26	; 0x0e
    1e44:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e46:	6c 85       	ldd	r22, Y+12	; 0x0c
    1e48:	7d 85       	ldd	r23, Y+13	; 0x0d
    1e4a:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e4c:	9f 85       	ldd	r25, Y+15	; 0x0f
    1e4e:	20 e0       	ldi	r18, 0x00	; 0
    1e50:	30 e0       	ldi	r19, 0x00	; 0
    1e52:	4a e7       	ldi	r20, 0x7A	; 122
    1e54:	55 e4       	ldi	r21, 0x45	; 69
    1e56:	0e 94 59 21 	call	0x42b2	; 0x42b2 <__mulsf3>
    1e5a:	dc 01       	movw	r26, r24
    1e5c:	cb 01       	movw	r24, r22
    1e5e:	88 87       	std	Y+8, r24	; 0x08
    1e60:	99 87       	std	Y+9, r25	; 0x09
    1e62:	aa 87       	std	Y+10, r26	; 0x0a
    1e64:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1e66:	68 85       	ldd	r22, Y+8	; 0x08
    1e68:	79 85       	ldd	r23, Y+9	; 0x09
    1e6a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e6c:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e6e:	20 e0       	ldi	r18, 0x00	; 0
    1e70:	30 e0       	ldi	r19, 0x00	; 0
    1e72:	40 e8       	ldi	r20, 0x80	; 128
    1e74:	5f e3       	ldi	r21, 0x3F	; 63
    1e76:	0e 94 5f 23 	call	0x46be	; 0x46be <__ltsf2>
    1e7a:	88 23       	and	r24, r24
    1e7c:	2c f4       	brge	.+10     	; 0x1e88 <lcd_sendchar+0x80e>
		__ticks = 1;
    1e7e:	81 e0       	ldi	r24, 0x01	; 1
    1e80:	90 e0       	ldi	r25, 0x00	; 0
    1e82:	9f 83       	std	Y+7, r25	; 0x07
    1e84:	8e 83       	std	Y+6, r24	; 0x06
    1e86:	3f c0       	rjmp	.+126    	; 0x1f06 <lcd_sendchar+0x88c>
	else if (__tmp > 65535)
    1e88:	68 85       	ldd	r22, Y+8	; 0x08
    1e8a:	79 85       	ldd	r23, Y+9	; 0x09
    1e8c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e8e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e90:	20 e0       	ldi	r18, 0x00	; 0
    1e92:	3f ef       	ldi	r19, 0xFF	; 255
    1e94:	4f e7       	ldi	r20, 0x7F	; 127
    1e96:	57 e4       	ldi	r21, 0x47	; 71
    1e98:	0e 94 ff 22 	call	0x45fe	; 0x45fe <__gtsf2>
    1e9c:	18 16       	cp	r1, r24
    1e9e:	4c f5       	brge	.+82     	; 0x1ef2 <lcd_sendchar+0x878>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ea0:	6c 85       	ldd	r22, Y+12	; 0x0c
    1ea2:	7d 85       	ldd	r23, Y+13	; 0x0d
    1ea4:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ea6:	9f 85       	ldd	r25, Y+15	; 0x0f
    1ea8:	20 e0       	ldi	r18, 0x00	; 0
    1eaa:	30 e0       	ldi	r19, 0x00	; 0
    1eac:	40 e2       	ldi	r20, 0x20	; 32
    1eae:	51 e4       	ldi	r21, 0x41	; 65
    1eb0:	0e 94 59 21 	call	0x42b2	; 0x42b2 <__mulsf3>
    1eb4:	dc 01       	movw	r26, r24
    1eb6:	cb 01       	movw	r24, r22
    1eb8:	bc 01       	movw	r22, r24
    1eba:	cd 01       	movw	r24, r26
    1ebc:	0e 94 32 18 	call	0x3064	; 0x3064 <__fixunssfsi>
    1ec0:	dc 01       	movw	r26, r24
    1ec2:	cb 01       	movw	r24, r22
    1ec4:	9f 83       	std	Y+7, r25	; 0x07
    1ec6:	8e 83       	std	Y+6, r24	; 0x06
    1ec8:	0f c0       	rjmp	.+30     	; 0x1ee8 <lcd_sendchar+0x86e>
    1eca:	80 e9       	ldi	r24, 0x90	; 144
    1ecc:	91 e0       	ldi	r25, 0x01	; 1
    1ece:	9d 83       	std	Y+5, r25	; 0x05
    1ed0:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ed2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ed4:	9d 81       	ldd	r25, Y+5	; 0x05
    1ed6:	01 97       	sbiw	r24, 0x01	; 1
    1ed8:	f1 f7       	brne	.-4      	; 0x1ed6 <lcd_sendchar+0x85c>
    1eda:	9d 83       	std	Y+5, r25	; 0x05
    1edc:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ede:	8e 81       	ldd	r24, Y+6	; 0x06
    1ee0:	9f 81       	ldd	r25, Y+7	; 0x07
    1ee2:	01 97       	sbiw	r24, 0x01	; 1
    1ee4:	9f 83       	std	Y+7, r25	; 0x07
    1ee6:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ee8:	8e 81       	ldd	r24, Y+6	; 0x06
    1eea:	9f 81       	ldd	r25, Y+7	; 0x07
    1eec:	00 97       	sbiw	r24, 0x00	; 0
    1eee:	69 f7       	brne	.-38     	; 0x1eca <lcd_sendchar+0x850>
    1ef0:	24 c0       	rjmp	.+72     	; 0x1f3a <lcd_sendchar+0x8c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ef2:	68 85       	ldd	r22, Y+8	; 0x08
    1ef4:	79 85       	ldd	r23, Y+9	; 0x09
    1ef6:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ef8:	9b 85       	ldd	r25, Y+11	; 0x0b
    1efa:	0e 94 32 18 	call	0x3064	; 0x3064 <__fixunssfsi>
    1efe:	dc 01       	movw	r26, r24
    1f00:	cb 01       	movw	r24, r22
    1f02:	9f 83       	std	Y+7, r25	; 0x07
    1f04:	8e 83       	std	Y+6, r24	; 0x06
    1f06:	8e 81       	ldd	r24, Y+6	; 0x06
    1f08:	9f 81       	ldd	r25, Y+7	; 0x07
    1f0a:	9b 83       	std	Y+3, r25	; 0x03
    1f0c:	8a 83       	std	Y+2, r24	; 0x02
    1f0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f10:	9b 81       	ldd	r25, Y+3	; 0x03
    1f12:	01 97       	sbiw	r24, 0x01	; 1
    1f14:	f1 f7       	brne	.-4      	; 0x1f12 <lcd_sendchar+0x898>
    1f16:	9b 83       	std	Y+3, r25	; 0x03
    1f18:	8a 83       	std	Y+2, r24	; 0x02
    1f1a:	0f c0       	rjmp	.+30     	; 0x1f3a <lcd_sendchar+0x8c0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1f1c:	69 89       	ldd	r22, Y+17	; 0x11
    1f1e:	7a 89       	ldd	r23, Y+18	; 0x12
    1f20:	8b 89       	ldd	r24, Y+19	; 0x13
    1f22:	9c 89       	ldd	r25, Y+20	; 0x14
    1f24:	0e 94 32 18 	call	0x3064	; 0x3064 <__fixunssfsi>
    1f28:	dc 01       	movw	r26, r24
    1f2a:	cb 01       	movw	r24, r22
    1f2c:	88 8b       	std	Y+16, r24	; 0x10
    1f2e:	88 89       	ldd	r24, Y+16	; 0x10
    1f30:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1f32:	89 81       	ldd	r24, Y+1	; 0x01
    1f34:	8a 95       	dec	r24
    1f36:	f1 f7       	brne	.-4      	; 0x1f34 <lcd_sendchar+0x8ba>
    1f38:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(200);
}
    1f3a:	cf 59       	subi	r28, 0x9F	; 159
    1f3c:	df 4f       	sbci	r29, 0xFF	; 255
    1f3e:	0f b6       	in	r0, 0x3f	; 63
    1f40:	f8 94       	cli
    1f42:	de bf       	out	0x3e, r29	; 62
    1f44:	0f be       	out	0x3f, r0	; 63
    1f46:	cd bf       	out	0x3d, r28	; 61
    1f48:	cf 91       	pop	r28
    1f4a:	df 91       	pop	r29
    1f4c:	1f 91       	pop	r17
    1f4e:	0f 91       	pop	r16
    1f50:	08 95       	ret

00001f52 <lcd_sendcmd>:

void lcd_sendcmd(unsigned char cmd)
{
    1f52:	0f 93       	push	r16
    1f54:	1f 93       	push	r17
    1f56:	df 93       	push	r29
    1f58:	cf 93       	push	r28
    1f5a:	cd b7       	in	r28, 0x3d	; 61
    1f5c:	de b7       	in	r29, 0x3e	; 62
    1f5e:	c1 56       	subi	r28, 0x61	; 97
    1f60:	d0 40       	sbci	r29, 0x00	; 0
    1f62:	0f b6       	in	r0, 0x3f	; 63
    1f64:	f8 94       	cli
    1f66:	de bf       	out	0x3e, r29	; 62
    1f68:	0f be       	out	0x3f, r0	; 63
    1f6a:	cd bf       	out	0x3d, r28	; 61
    1f6c:	fe 01       	movw	r30, r28
    1f6e:	ef 59       	subi	r30, 0x9F	; 159
    1f70:	ff 4f       	sbci	r31, 0xFF	; 255
    1f72:	80 83       	st	Z, r24
	CLR_BIT(PORTB,1);
    1f74:	a8 e3       	ldi	r26, 0x38	; 56
    1f76:	b0 e0       	ldi	r27, 0x00	; 0
    1f78:	e8 e3       	ldi	r30, 0x38	; 56
    1f7a:	f0 e0       	ldi	r31, 0x00	; 0
    1f7c:	80 81       	ld	r24, Z
    1f7e:	8d 7f       	andi	r24, 0xFD	; 253
    1f80:	8c 93       	st	X, r24
	CLR_BIT(PORTB,2);
    1f82:	a8 e3       	ldi	r26, 0x38	; 56
    1f84:	b0 e0       	ldi	r27, 0x00	; 0
    1f86:	e8 e3       	ldi	r30, 0x38	; 56
    1f88:	f0 e0       	ldi	r31, 0x00	; 0
    1f8a:	80 81       	ld	r24, Z
    1f8c:	8b 7f       	andi	r24, 0xFB	; 251
    1f8e:	8c 93       	st	X, r24
		if(GET_BIT(cmd,4)){DIO_write(LCD_D4,HIGH);}else {DIO_write(LCD_D4,LOW);}
    1f90:	fe 01       	movw	r30, r28
    1f92:	ef 59       	subi	r30, 0x9F	; 159
    1f94:	ff 4f       	sbci	r31, 0xFF	; 255
    1f96:	80 81       	ld	r24, Z
    1f98:	82 95       	swap	r24
    1f9a:	8f 70       	andi	r24, 0x0F	; 15
    1f9c:	88 2f       	mov	r24, r24
    1f9e:	90 e0       	ldi	r25, 0x00	; 0
    1fa0:	81 70       	andi	r24, 0x01	; 1
    1fa2:	90 70       	andi	r25, 0x00	; 0
    1fa4:	88 23       	and	r24, r24
    1fa6:	29 f0       	breq	.+10     	; 0x1fb2 <lcd_sendcmd+0x60>
    1fa8:	84 e0       	ldi	r24, 0x04	; 4
    1faa:	61 e0       	ldi	r22, 0x01	; 1
    1fac:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_write>
    1fb0:	04 c0       	rjmp	.+8      	; 0x1fba <lcd_sendcmd+0x68>
    1fb2:	84 e0       	ldi	r24, 0x04	; 4
    1fb4:	60 e0       	ldi	r22, 0x00	; 0
    1fb6:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_write>
		if(GET_BIT(cmd,5)){DIO_write(LCD_D5,HIGH);}else {DIO_write(LCD_D5,LOW);}
    1fba:	fe 01       	movw	r30, r28
    1fbc:	ef 59       	subi	r30, 0x9F	; 159
    1fbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc0:	80 81       	ld	r24, Z
    1fc2:	82 95       	swap	r24
    1fc4:	86 95       	lsr	r24
    1fc6:	87 70       	andi	r24, 0x07	; 7
    1fc8:	88 2f       	mov	r24, r24
    1fca:	90 e0       	ldi	r25, 0x00	; 0
    1fcc:	81 70       	andi	r24, 0x01	; 1
    1fce:	90 70       	andi	r25, 0x00	; 0
    1fd0:	88 23       	and	r24, r24
    1fd2:	29 f0       	breq	.+10     	; 0x1fde <lcd_sendcmd+0x8c>
    1fd4:	85 e0       	ldi	r24, 0x05	; 5
    1fd6:	61 e0       	ldi	r22, 0x01	; 1
    1fd8:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_write>
    1fdc:	04 c0       	rjmp	.+8      	; 0x1fe6 <lcd_sendcmd+0x94>
    1fde:	85 e0       	ldi	r24, 0x05	; 5
    1fe0:	60 e0       	ldi	r22, 0x00	; 0
    1fe2:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_write>
		if(GET_BIT(cmd,6)){DIO_write(LCD_D6,HIGH);}else {DIO_write(LCD_D6,LOW);}
    1fe6:	fe 01       	movw	r30, r28
    1fe8:	ef 59       	subi	r30, 0x9F	; 159
    1fea:	ff 4f       	sbci	r31, 0xFF	; 255
    1fec:	80 81       	ld	r24, Z
    1fee:	82 95       	swap	r24
    1ff0:	86 95       	lsr	r24
    1ff2:	86 95       	lsr	r24
    1ff4:	83 70       	andi	r24, 0x03	; 3
    1ff6:	88 2f       	mov	r24, r24
    1ff8:	90 e0       	ldi	r25, 0x00	; 0
    1ffa:	81 70       	andi	r24, 0x01	; 1
    1ffc:	90 70       	andi	r25, 0x00	; 0
    1ffe:	88 23       	and	r24, r24
    2000:	29 f0       	breq	.+10     	; 0x200c <lcd_sendcmd+0xba>
    2002:	86 e0       	ldi	r24, 0x06	; 6
    2004:	61 e0       	ldi	r22, 0x01	; 1
    2006:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_write>
    200a:	04 c0       	rjmp	.+8      	; 0x2014 <lcd_sendcmd+0xc2>
    200c:	86 e0       	ldi	r24, 0x06	; 6
    200e:	60 e0       	ldi	r22, 0x00	; 0
    2010:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_write>
		if(GET_BIT(cmd,7)){DIO_write(LCD_D7,HIGH);}else {DIO_write(LCD_D7,LOW);}
    2014:	fe 01       	movw	r30, r28
    2016:	ef 59       	subi	r30, 0x9F	; 159
    2018:	ff 4f       	sbci	r31, 0xFF	; 255
    201a:	80 81       	ld	r24, Z
    201c:	88 23       	and	r24, r24
    201e:	2c f4       	brge	.+10     	; 0x202a <lcd_sendcmd+0xd8>
    2020:	87 e0       	ldi	r24, 0x07	; 7
    2022:	61 e0       	ldi	r22, 0x01	; 1
    2024:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_write>
    2028:	04 c0       	rjmp	.+8      	; 0x2032 <lcd_sendcmd+0xe0>
    202a:	87 e0       	ldi	r24, 0x07	; 7
    202c:	60 e0       	ldi	r22, 0x00	; 0
    202e:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_write>

		SET_BIT(PORTB,6);
    2032:	a8 e3       	ldi	r26, 0x38	; 56
    2034:	b0 e0       	ldi	r27, 0x00	; 0
    2036:	e8 e3       	ldi	r30, 0x38	; 56
    2038:	f0 e0       	ldi	r31, 0x00	; 0
    203a:	80 81       	ld	r24, Z
    203c:	80 64       	ori	r24, 0x40	; 64
    203e:	8c 93       	st	X, r24
    2040:	fe 01       	movw	r30, r28
    2042:	e3 5a       	subi	r30, 0xA3	; 163
    2044:	ff 4f       	sbci	r31, 0xFF	; 255
    2046:	80 e0       	ldi	r24, 0x00	; 0
    2048:	90 e0       	ldi	r25, 0x00	; 0
    204a:	a0 e2       	ldi	r26, 0x20	; 32
    204c:	b1 e4       	ldi	r27, 0x41	; 65
    204e:	80 83       	st	Z, r24
    2050:	91 83       	std	Z+1, r25	; 0x01
    2052:	a2 83       	std	Z+2, r26	; 0x02
    2054:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2056:	8e 01       	movw	r16, r28
    2058:	07 5a       	subi	r16, 0xA7	; 167
    205a:	1f 4f       	sbci	r17, 0xFF	; 255
    205c:	fe 01       	movw	r30, r28
    205e:	e3 5a       	subi	r30, 0xA3	; 163
    2060:	ff 4f       	sbci	r31, 0xFF	; 255
    2062:	60 81       	ld	r22, Z
    2064:	71 81       	ldd	r23, Z+1	; 0x01
    2066:	82 81       	ldd	r24, Z+2	; 0x02
    2068:	93 81       	ldd	r25, Z+3	; 0x03
    206a:	2b ea       	ldi	r18, 0xAB	; 171
    206c:	3a ea       	ldi	r19, 0xAA	; 170
    206e:	4a ea       	ldi	r20, 0xAA	; 170
    2070:	50 e4       	ldi	r21, 0x40	; 64
    2072:	0e 94 59 21 	call	0x42b2	; 0x42b2 <__mulsf3>
    2076:	dc 01       	movw	r26, r24
    2078:	cb 01       	movw	r24, r22
    207a:	f8 01       	movw	r30, r16
    207c:	80 83       	st	Z, r24
    207e:	91 83       	std	Z+1, r25	; 0x01
    2080:	a2 83       	std	Z+2, r26	; 0x02
    2082:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2084:	fe 01       	movw	r30, r28
    2086:	e7 5a       	subi	r30, 0xA7	; 167
    2088:	ff 4f       	sbci	r31, 0xFF	; 255
    208a:	60 81       	ld	r22, Z
    208c:	71 81       	ldd	r23, Z+1	; 0x01
    208e:	82 81       	ldd	r24, Z+2	; 0x02
    2090:	93 81       	ldd	r25, Z+3	; 0x03
    2092:	20 e0       	ldi	r18, 0x00	; 0
    2094:	30 e0       	ldi	r19, 0x00	; 0
    2096:	40 e8       	ldi	r20, 0x80	; 128
    2098:	5f e3       	ldi	r21, 0x3F	; 63
    209a:	0e 94 5f 23 	call	0x46be	; 0x46be <__ltsf2>
    209e:	88 23       	and	r24, r24
    20a0:	34 f4       	brge	.+12     	; 0x20ae <lcd_sendcmd+0x15c>
		__ticks = 1;
    20a2:	fe 01       	movw	r30, r28
    20a4:	e8 5a       	subi	r30, 0xA8	; 168
    20a6:	ff 4f       	sbci	r31, 0xFF	; 255
    20a8:	81 e0       	ldi	r24, 0x01	; 1
    20aa:	80 83       	st	Z, r24
    20ac:	e0 c0       	rjmp	.+448    	; 0x226e <lcd_sendcmd+0x31c>
	else if (__tmp > 255)
    20ae:	fe 01       	movw	r30, r28
    20b0:	e7 5a       	subi	r30, 0xA7	; 167
    20b2:	ff 4f       	sbci	r31, 0xFF	; 255
    20b4:	60 81       	ld	r22, Z
    20b6:	71 81       	ldd	r23, Z+1	; 0x01
    20b8:	82 81       	ldd	r24, Z+2	; 0x02
    20ba:	93 81       	ldd	r25, Z+3	; 0x03
    20bc:	20 e0       	ldi	r18, 0x00	; 0
    20be:	30 e0       	ldi	r19, 0x00	; 0
    20c0:	4f e7       	ldi	r20, 0x7F	; 127
    20c2:	53 e4       	ldi	r21, 0x43	; 67
    20c4:	0e 94 ff 22 	call	0x45fe	; 0x45fe <__gtsf2>
    20c8:	18 16       	cp	r1, r24
    20ca:	0c f0       	brlt	.+2      	; 0x20ce <lcd_sendcmd+0x17c>
    20cc:	c0 c0       	rjmp	.+384    	; 0x224e <lcd_sendcmd+0x2fc>
	{
		_delay_ms(__us / 1000.0);
    20ce:	fe 01       	movw	r30, r28
    20d0:	e3 5a       	subi	r30, 0xA3	; 163
    20d2:	ff 4f       	sbci	r31, 0xFF	; 255
    20d4:	60 81       	ld	r22, Z
    20d6:	71 81       	ldd	r23, Z+1	; 0x01
    20d8:	82 81       	ldd	r24, Z+2	; 0x02
    20da:	93 81       	ldd	r25, Z+3	; 0x03
    20dc:	20 e0       	ldi	r18, 0x00	; 0
    20de:	30 e0       	ldi	r19, 0x00	; 0
    20e0:	4a e7       	ldi	r20, 0x7A	; 122
    20e2:	54 e4       	ldi	r21, 0x44	; 68
    20e4:	0e 94 53 22 	call	0x44a6	; 0x44a6 <__divsf3>
    20e8:	dc 01       	movw	r26, r24
    20ea:	cb 01       	movw	r24, r22
    20ec:	fe 01       	movw	r30, r28
    20ee:	ec 5a       	subi	r30, 0xAC	; 172
    20f0:	ff 4f       	sbci	r31, 0xFF	; 255
    20f2:	80 83       	st	Z, r24
    20f4:	91 83       	std	Z+1, r25	; 0x01
    20f6:	a2 83       	std	Z+2, r26	; 0x02
    20f8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20fa:	8e 01       	movw	r16, r28
    20fc:	00 5b       	subi	r16, 0xB0	; 176
    20fe:	1f 4f       	sbci	r17, 0xFF	; 255
    2100:	fe 01       	movw	r30, r28
    2102:	ec 5a       	subi	r30, 0xAC	; 172
    2104:	ff 4f       	sbci	r31, 0xFF	; 255
    2106:	60 81       	ld	r22, Z
    2108:	71 81       	ldd	r23, Z+1	; 0x01
    210a:	82 81       	ldd	r24, Z+2	; 0x02
    210c:	93 81       	ldd	r25, Z+3	; 0x03
    210e:	20 e0       	ldi	r18, 0x00	; 0
    2110:	30 e0       	ldi	r19, 0x00	; 0
    2112:	4a e7       	ldi	r20, 0x7A	; 122
    2114:	55 e4       	ldi	r21, 0x45	; 69
    2116:	0e 94 59 21 	call	0x42b2	; 0x42b2 <__mulsf3>
    211a:	dc 01       	movw	r26, r24
    211c:	cb 01       	movw	r24, r22
    211e:	f8 01       	movw	r30, r16
    2120:	80 83       	st	Z, r24
    2122:	91 83       	std	Z+1, r25	; 0x01
    2124:	a2 83       	std	Z+2, r26	; 0x02
    2126:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2128:	fe 01       	movw	r30, r28
    212a:	e0 5b       	subi	r30, 0xB0	; 176
    212c:	ff 4f       	sbci	r31, 0xFF	; 255
    212e:	60 81       	ld	r22, Z
    2130:	71 81       	ldd	r23, Z+1	; 0x01
    2132:	82 81       	ldd	r24, Z+2	; 0x02
    2134:	93 81       	ldd	r25, Z+3	; 0x03
    2136:	20 e0       	ldi	r18, 0x00	; 0
    2138:	30 e0       	ldi	r19, 0x00	; 0
    213a:	40 e8       	ldi	r20, 0x80	; 128
    213c:	5f e3       	ldi	r21, 0x3F	; 63
    213e:	0e 94 5f 23 	call	0x46be	; 0x46be <__ltsf2>
    2142:	88 23       	and	r24, r24
    2144:	44 f4       	brge	.+16     	; 0x2156 <lcd_sendcmd+0x204>
		__ticks = 1;
    2146:	fe 01       	movw	r30, r28
    2148:	e2 5b       	subi	r30, 0xB2	; 178
    214a:	ff 4f       	sbci	r31, 0xFF	; 255
    214c:	81 e0       	ldi	r24, 0x01	; 1
    214e:	90 e0       	ldi	r25, 0x00	; 0
    2150:	91 83       	std	Z+1, r25	; 0x01
    2152:	80 83       	st	Z, r24
    2154:	64 c0       	rjmp	.+200    	; 0x221e <lcd_sendcmd+0x2cc>
	else if (__tmp > 65535)
    2156:	fe 01       	movw	r30, r28
    2158:	e0 5b       	subi	r30, 0xB0	; 176
    215a:	ff 4f       	sbci	r31, 0xFF	; 255
    215c:	60 81       	ld	r22, Z
    215e:	71 81       	ldd	r23, Z+1	; 0x01
    2160:	82 81       	ldd	r24, Z+2	; 0x02
    2162:	93 81       	ldd	r25, Z+3	; 0x03
    2164:	20 e0       	ldi	r18, 0x00	; 0
    2166:	3f ef       	ldi	r19, 0xFF	; 255
    2168:	4f e7       	ldi	r20, 0x7F	; 127
    216a:	57 e4       	ldi	r21, 0x47	; 71
    216c:	0e 94 ff 22 	call	0x45fe	; 0x45fe <__gtsf2>
    2170:	18 16       	cp	r1, r24
    2172:	0c f0       	brlt	.+2      	; 0x2176 <lcd_sendcmd+0x224>
    2174:	43 c0       	rjmp	.+134    	; 0x21fc <lcd_sendcmd+0x2aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2176:	fe 01       	movw	r30, r28
    2178:	ec 5a       	subi	r30, 0xAC	; 172
    217a:	ff 4f       	sbci	r31, 0xFF	; 255
    217c:	60 81       	ld	r22, Z
    217e:	71 81       	ldd	r23, Z+1	; 0x01
    2180:	82 81       	ldd	r24, Z+2	; 0x02
    2182:	93 81       	ldd	r25, Z+3	; 0x03
    2184:	20 e0       	ldi	r18, 0x00	; 0
    2186:	30 e0       	ldi	r19, 0x00	; 0
    2188:	40 e2       	ldi	r20, 0x20	; 32
    218a:	51 e4       	ldi	r21, 0x41	; 65
    218c:	0e 94 59 21 	call	0x42b2	; 0x42b2 <__mulsf3>
    2190:	dc 01       	movw	r26, r24
    2192:	cb 01       	movw	r24, r22
    2194:	8e 01       	movw	r16, r28
    2196:	02 5b       	subi	r16, 0xB2	; 178
    2198:	1f 4f       	sbci	r17, 0xFF	; 255
    219a:	bc 01       	movw	r22, r24
    219c:	cd 01       	movw	r24, r26
    219e:	0e 94 32 18 	call	0x3064	; 0x3064 <__fixunssfsi>
    21a2:	dc 01       	movw	r26, r24
    21a4:	cb 01       	movw	r24, r22
    21a6:	f8 01       	movw	r30, r16
    21a8:	91 83       	std	Z+1, r25	; 0x01
    21aa:	80 83       	st	Z, r24
    21ac:	1f c0       	rjmp	.+62     	; 0x21ec <lcd_sendcmd+0x29a>
    21ae:	fe 01       	movw	r30, r28
    21b0:	e4 5b       	subi	r30, 0xB4	; 180
    21b2:	ff 4f       	sbci	r31, 0xFF	; 255
    21b4:	80 e9       	ldi	r24, 0x90	; 144
    21b6:	91 e0       	ldi	r25, 0x01	; 1
    21b8:	91 83       	std	Z+1, r25	; 0x01
    21ba:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    21bc:	fe 01       	movw	r30, r28
    21be:	e4 5b       	subi	r30, 0xB4	; 180
    21c0:	ff 4f       	sbci	r31, 0xFF	; 255
    21c2:	80 81       	ld	r24, Z
    21c4:	91 81       	ldd	r25, Z+1	; 0x01
    21c6:	01 97       	sbiw	r24, 0x01	; 1
    21c8:	f1 f7       	brne	.-4      	; 0x21c6 <lcd_sendcmd+0x274>
    21ca:	fe 01       	movw	r30, r28
    21cc:	e4 5b       	subi	r30, 0xB4	; 180
    21ce:	ff 4f       	sbci	r31, 0xFF	; 255
    21d0:	91 83       	std	Z+1, r25	; 0x01
    21d2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21d4:	de 01       	movw	r26, r28
    21d6:	a2 5b       	subi	r26, 0xB2	; 178
    21d8:	bf 4f       	sbci	r27, 0xFF	; 255
    21da:	fe 01       	movw	r30, r28
    21dc:	e2 5b       	subi	r30, 0xB2	; 178
    21de:	ff 4f       	sbci	r31, 0xFF	; 255
    21e0:	80 81       	ld	r24, Z
    21e2:	91 81       	ldd	r25, Z+1	; 0x01
    21e4:	01 97       	sbiw	r24, 0x01	; 1
    21e6:	11 96       	adiw	r26, 0x01	; 1
    21e8:	9c 93       	st	X, r25
    21ea:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21ec:	fe 01       	movw	r30, r28
    21ee:	e2 5b       	subi	r30, 0xB2	; 178
    21f0:	ff 4f       	sbci	r31, 0xFF	; 255
    21f2:	80 81       	ld	r24, Z
    21f4:	91 81       	ldd	r25, Z+1	; 0x01
    21f6:	00 97       	sbiw	r24, 0x00	; 0
    21f8:	d1 f6       	brne	.-76     	; 0x21ae <lcd_sendcmd+0x25c>
    21fa:	4b c0       	rjmp	.+150    	; 0x2292 <lcd_sendcmd+0x340>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21fc:	8e 01       	movw	r16, r28
    21fe:	02 5b       	subi	r16, 0xB2	; 178
    2200:	1f 4f       	sbci	r17, 0xFF	; 255
    2202:	fe 01       	movw	r30, r28
    2204:	e0 5b       	subi	r30, 0xB0	; 176
    2206:	ff 4f       	sbci	r31, 0xFF	; 255
    2208:	60 81       	ld	r22, Z
    220a:	71 81       	ldd	r23, Z+1	; 0x01
    220c:	82 81       	ldd	r24, Z+2	; 0x02
    220e:	93 81       	ldd	r25, Z+3	; 0x03
    2210:	0e 94 32 18 	call	0x3064	; 0x3064 <__fixunssfsi>
    2214:	dc 01       	movw	r26, r24
    2216:	cb 01       	movw	r24, r22
    2218:	f8 01       	movw	r30, r16
    221a:	91 83       	std	Z+1, r25	; 0x01
    221c:	80 83       	st	Z, r24
    221e:	de 01       	movw	r26, r28
    2220:	a6 5b       	subi	r26, 0xB6	; 182
    2222:	bf 4f       	sbci	r27, 0xFF	; 255
    2224:	fe 01       	movw	r30, r28
    2226:	e2 5b       	subi	r30, 0xB2	; 178
    2228:	ff 4f       	sbci	r31, 0xFF	; 255
    222a:	80 81       	ld	r24, Z
    222c:	91 81       	ldd	r25, Z+1	; 0x01
    222e:	11 96       	adiw	r26, 0x01	; 1
    2230:	9c 93       	st	X, r25
    2232:	8e 93       	st	-X, r24
    2234:	fe 01       	movw	r30, r28
    2236:	e6 5b       	subi	r30, 0xB6	; 182
    2238:	ff 4f       	sbci	r31, 0xFF	; 255
    223a:	80 81       	ld	r24, Z
    223c:	91 81       	ldd	r25, Z+1	; 0x01
    223e:	01 97       	sbiw	r24, 0x01	; 1
    2240:	f1 f7       	brne	.-4      	; 0x223e <lcd_sendcmd+0x2ec>
    2242:	fe 01       	movw	r30, r28
    2244:	e6 5b       	subi	r30, 0xB6	; 182
    2246:	ff 4f       	sbci	r31, 0xFF	; 255
    2248:	91 83       	std	Z+1, r25	; 0x01
    224a:	80 83       	st	Z, r24
    224c:	22 c0       	rjmp	.+68     	; 0x2292 <lcd_sendcmd+0x340>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    224e:	8e 01       	movw	r16, r28
    2250:	08 5a       	subi	r16, 0xA8	; 168
    2252:	1f 4f       	sbci	r17, 0xFF	; 255
    2254:	fe 01       	movw	r30, r28
    2256:	e7 5a       	subi	r30, 0xA7	; 167
    2258:	ff 4f       	sbci	r31, 0xFF	; 255
    225a:	60 81       	ld	r22, Z
    225c:	71 81       	ldd	r23, Z+1	; 0x01
    225e:	82 81       	ldd	r24, Z+2	; 0x02
    2260:	93 81       	ldd	r25, Z+3	; 0x03
    2262:	0e 94 32 18 	call	0x3064	; 0x3064 <__fixunssfsi>
    2266:	dc 01       	movw	r26, r24
    2268:	cb 01       	movw	r24, r22
    226a:	f8 01       	movw	r30, r16
    226c:	80 83       	st	Z, r24
    226e:	de 01       	movw	r26, r28
    2270:	a7 5b       	subi	r26, 0xB7	; 183
    2272:	bf 4f       	sbci	r27, 0xFF	; 255
    2274:	fe 01       	movw	r30, r28
    2276:	e8 5a       	subi	r30, 0xA8	; 168
    2278:	ff 4f       	sbci	r31, 0xFF	; 255
    227a:	80 81       	ld	r24, Z
    227c:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    227e:	fe 01       	movw	r30, r28
    2280:	e7 5b       	subi	r30, 0xB7	; 183
    2282:	ff 4f       	sbci	r31, 0xFF	; 255
    2284:	80 81       	ld	r24, Z
    2286:	8a 95       	dec	r24
    2288:	f1 f7       	brne	.-4      	; 0x2286 <lcd_sendcmd+0x334>
    228a:	fe 01       	movw	r30, r28
    228c:	e7 5b       	subi	r30, 0xB7	; 183
    228e:	ff 4f       	sbci	r31, 0xFF	; 255
    2290:	80 83       	st	Z, r24
		_delay_us(10);
		CLR_BIT(PORTB,6);
    2292:	a8 e3       	ldi	r26, 0x38	; 56
    2294:	b0 e0       	ldi	r27, 0x00	; 0
    2296:	e8 e3       	ldi	r30, 0x38	; 56
    2298:	f0 e0       	ldi	r31, 0x00	; 0
    229a:	80 81       	ld	r24, Z
    229c:	8f 7b       	andi	r24, 0xBF	; 191
    229e:	8c 93       	st	X, r24
    22a0:	fe 01       	movw	r30, r28
    22a2:	eb 5b       	subi	r30, 0xBB	; 187
    22a4:	ff 4f       	sbci	r31, 0xFF	; 255
    22a6:	80 e0       	ldi	r24, 0x00	; 0
    22a8:	90 e0       	ldi	r25, 0x00	; 0
    22aa:	aa ef       	ldi	r26, 0xFA	; 250
    22ac:	b4 e4       	ldi	r27, 0x44	; 68
    22ae:	80 83       	st	Z, r24
    22b0:	91 83       	std	Z+1, r25	; 0x01
    22b2:	a2 83       	std	Z+2, r26	; 0x02
    22b4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    22b6:	8e 01       	movw	r16, r28
    22b8:	0f 5b       	subi	r16, 0xBF	; 191
    22ba:	1f 4f       	sbci	r17, 0xFF	; 255
    22bc:	fe 01       	movw	r30, r28
    22be:	eb 5b       	subi	r30, 0xBB	; 187
    22c0:	ff 4f       	sbci	r31, 0xFF	; 255
    22c2:	60 81       	ld	r22, Z
    22c4:	71 81       	ldd	r23, Z+1	; 0x01
    22c6:	82 81       	ldd	r24, Z+2	; 0x02
    22c8:	93 81       	ldd	r25, Z+3	; 0x03
    22ca:	2b ea       	ldi	r18, 0xAB	; 171
    22cc:	3a ea       	ldi	r19, 0xAA	; 170
    22ce:	4a ea       	ldi	r20, 0xAA	; 170
    22d0:	50 e4       	ldi	r21, 0x40	; 64
    22d2:	0e 94 59 21 	call	0x42b2	; 0x42b2 <__mulsf3>
    22d6:	dc 01       	movw	r26, r24
    22d8:	cb 01       	movw	r24, r22
    22da:	f8 01       	movw	r30, r16
    22dc:	80 83       	st	Z, r24
    22de:	91 83       	std	Z+1, r25	; 0x01
    22e0:	a2 83       	std	Z+2, r26	; 0x02
    22e2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    22e4:	fe 01       	movw	r30, r28
    22e6:	ef 5b       	subi	r30, 0xBF	; 191
    22e8:	ff 4f       	sbci	r31, 0xFF	; 255
    22ea:	60 81       	ld	r22, Z
    22ec:	71 81       	ldd	r23, Z+1	; 0x01
    22ee:	82 81       	ldd	r24, Z+2	; 0x02
    22f0:	93 81       	ldd	r25, Z+3	; 0x03
    22f2:	20 e0       	ldi	r18, 0x00	; 0
    22f4:	30 e0       	ldi	r19, 0x00	; 0
    22f6:	40 e8       	ldi	r20, 0x80	; 128
    22f8:	5f e3       	ldi	r21, 0x3F	; 63
    22fa:	0e 94 5f 23 	call	0x46be	; 0x46be <__ltsf2>
    22fe:	88 23       	and	r24, r24
    2300:	34 f4       	brge	.+12     	; 0x230e <lcd_sendcmd+0x3bc>
		__ticks = 1;
    2302:	81 e0       	ldi	r24, 0x01	; 1
    2304:	fe 01       	movw	r30, r28
    2306:	e0 5c       	subi	r30, 0xC0	; 192
    2308:	ff 4f       	sbci	r31, 0xFF	; 255
    230a:	80 83       	st	Z, r24
    230c:	9d c0       	rjmp	.+314    	; 0x2448 <lcd_sendcmd+0x4f6>
	else if (__tmp > 255)
    230e:	fe 01       	movw	r30, r28
    2310:	ef 5b       	subi	r30, 0xBF	; 191
    2312:	ff 4f       	sbci	r31, 0xFF	; 255
    2314:	60 81       	ld	r22, Z
    2316:	71 81       	ldd	r23, Z+1	; 0x01
    2318:	82 81       	ldd	r24, Z+2	; 0x02
    231a:	93 81       	ldd	r25, Z+3	; 0x03
    231c:	20 e0       	ldi	r18, 0x00	; 0
    231e:	30 e0       	ldi	r19, 0x00	; 0
    2320:	4f e7       	ldi	r20, 0x7F	; 127
    2322:	53 e4       	ldi	r21, 0x43	; 67
    2324:	0e 94 ff 22 	call	0x45fe	; 0x45fe <__gtsf2>
    2328:	18 16       	cp	r1, r24
    232a:	0c f0       	brlt	.+2      	; 0x232e <lcd_sendcmd+0x3dc>
    232c:	7e c0       	rjmp	.+252    	; 0x242a <lcd_sendcmd+0x4d8>
	{
		_delay_ms(__us / 1000.0);
    232e:	fe 01       	movw	r30, r28
    2330:	eb 5b       	subi	r30, 0xBB	; 187
    2332:	ff 4f       	sbci	r31, 0xFF	; 255
    2334:	60 81       	ld	r22, Z
    2336:	71 81       	ldd	r23, Z+1	; 0x01
    2338:	82 81       	ldd	r24, Z+2	; 0x02
    233a:	93 81       	ldd	r25, Z+3	; 0x03
    233c:	20 e0       	ldi	r18, 0x00	; 0
    233e:	30 e0       	ldi	r19, 0x00	; 0
    2340:	4a e7       	ldi	r20, 0x7A	; 122
    2342:	54 e4       	ldi	r21, 0x44	; 68
    2344:	0e 94 53 22 	call	0x44a6	; 0x44a6 <__divsf3>
    2348:	dc 01       	movw	r26, r24
    234a:	cb 01       	movw	r24, r22
    234c:	8c af       	std	Y+60, r24	; 0x3c
    234e:	9d af       	std	Y+61, r25	; 0x3d
    2350:	ae af       	std	Y+62, r26	; 0x3e
    2352:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2354:	6c ad       	ldd	r22, Y+60	; 0x3c
    2356:	7d ad       	ldd	r23, Y+61	; 0x3d
    2358:	8e ad       	ldd	r24, Y+62	; 0x3e
    235a:	9f ad       	ldd	r25, Y+63	; 0x3f
    235c:	20 e0       	ldi	r18, 0x00	; 0
    235e:	30 e0       	ldi	r19, 0x00	; 0
    2360:	4a e7       	ldi	r20, 0x7A	; 122
    2362:	55 e4       	ldi	r21, 0x45	; 69
    2364:	0e 94 59 21 	call	0x42b2	; 0x42b2 <__mulsf3>
    2368:	dc 01       	movw	r26, r24
    236a:	cb 01       	movw	r24, r22
    236c:	88 af       	std	Y+56, r24	; 0x38
    236e:	99 af       	std	Y+57, r25	; 0x39
    2370:	aa af       	std	Y+58, r26	; 0x3a
    2372:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    2374:	68 ad       	ldd	r22, Y+56	; 0x38
    2376:	79 ad       	ldd	r23, Y+57	; 0x39
    2378:	8a ad       	ldd	r24, Y+58	; 0x3a
    237a:	9b ad       	ldd	r25, Y+59	; 0x3b
    237c:	20 e0       	ldi	r18, 0x00	; 0
    237e:	30 e0       	ldi	r19, 0x00	; 0
    2380:	40 e8       	ldi	r20, 0x80	; 128
    2382:	5f e3       	ldi	r21, 0x3F	; 63
    2384:	0e 94 5f 23 	call	0x46be	; 0x46be <__ltsf2>
    2388:	88 23       	and	r24, r24
    238a:	2c f4       	brge	.+10     	; 0x2396 <lcd_sendcmd+0x444>
		__ticks = 1;
    238c:	81 e0       	ldi	r24, 0x01	; 1
    238e:	90 e0       	ldi	r25, 0x00	; 0
    2390:	9f ab       	std	Y+55, r25	; 0x37
    2392:	8e ab       	std	Y+54, r24	; 0x36
    2394:	3f c0       	rjmp	.+126    	; 0x2414 <lcd_sendcmd+0x4c2>
	else if (__tmp > 65535)
    2396:	68 ad       	ldd	r22, Y+56	; 0x38
    2398:	79 ad       	ldd	r23, Y+57	; 0x39
    239a:	8a ad       	ldd	r24, Y+58	; 0x3a
    239c:	9b ad       	ldd	r25, Y+59	; 0x3b
    239e:	20 e0       	ldi	r18, 0x00	; 0
    23a0:	3f ef       	ldi	r19, 0xFF	; 255
    23a2:	4f e7       	ldi	r20, 0x7F	; 127
    23a4:	57 e4       	ldi	r21, 0x47	; 71
    23a6:	0e 94 ff 22 	call	0x45fe	; 0x45fe <__gtsf2>
    23aa:	18 16       	cp	r1, r24
    23ac:	4c f5       	brge	.+82     	; 0x2400 <lcd_sendcmd+0x4ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23ae:	6c ad       	ldd	r22, Y+60	; 0x3c
    23b0:	7d ad       	ldd	r23, Y+61	; 0x3d
    23b2:	8e ad       	ldd	r24, Y+62	; 0x3e
    23b4:	9f ad       	ldd	r25, Y+63	; 0x3f
    23b6:	20 e0       	ldi	r18, 0x00	; 0
    23b8:	30 e0       	ldi	r19, 0x00	; 0
    23ba:	40 e2       	ldi	r20, 0x20	; 32
    23bc:	51 e4       	ldi	r21, 0x41	; 65
    23be:	0e 94 59 21 	call	0x42b2	; 0x42b2 <__mulsf3>
    23c2:	dc 01       	movw	r26, r24
    23c4:	cb 01       	movw	r24, r22
    23c6:	bc 01       	movw	r22, r24
    23c8:	cd 01       	movw	r24, r26
    23ca:	0e 94 32 18 	call	0x3064	; 0x3064 <__fixunssfsi>
    23ce:	dc 01       	movw	r26, r24
    23d0:	cb 01       	movw	r24, r22
    23d2:	9f ab       	std	Y+55, r25	; 0x37
    23d4:	8e ab       	std	Y+54, r24	; 0x36
    23d6:	0f c0       	rjmp	.+30     	; 0x23f6 <lcd_sendcmd+0x4a4>
    23d8:	80 e9       	ldi	r24, 0x90	; 144
    23da:	91 e0       	ldi	r25, 0x01	; 1
    23dc:	9d ab       	std	Y+53, r25	; 0x35
    23de:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    23e0:	8c a9       	ldd	r24, Y+52	; 0x34
    23e2:	9d a9       	ldd	r25, Y+53	; 0x35
    23e4:	01 97       	sbiw	r24, 0x01	; 1
    23e6:	f1 f7       	brne	.-4      	; 0x23e4 <lcd_sendcmd+0x492>
    23e8:	9d ab       	std	Y+53, r25	; 0x35
    23ea:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23ec:	8e a9       	ldd	r24, Y+54	; 0x36
    23ee:	9f a9       	ldd	r25, Y+55	; 0x37
    23f0:	01 97       	sbiw	r24, 0x01	; 1
    23f2:	9f ab       	std	Y+55, r25	; 0x37
    23f4:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23f6:	8e a9       	ldd	r24, Y+54	; 0x36
    23f8:	9f a9       	ldd	r25, Y+55	; 0x37
    23fa:	00 97       	sbiw	r24, 0x00	; 0
    23fc:	69 f7       	brne	.-38     	; 0x23d8 <lcd_sendcmd+0x486>
    23fe:	2d c0       	rjmp	.+90     	; 0x245a <lcd_sendcmd+0x508>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2400:	68 ad       	ldd	r22, Y+56	; 0x38
    2402:	79 ad       	ldd	r23, Y+57	; 0x39
    2404:	8a ad       	ldd	r24, Y+58	; 0x3a
    2406:	9b ad       	ldd	r25, Y+59	; 0x3b
    2408:	0e 94 32 18 	call	0x3064	; 0x3064 <__fixunssfsi>
    240c:	dc 01       	movw	r26, r24
    240e:	cb 01       	movw	r24, r22
    2410:	9f ab       	std	Y+55, r25	; 0x37
    2412:	8e ab       	std	Y+54, r24	; 0x36
    2414:	8e a9       	ldd	r24, Y+54	; 0x36
    2416:	9f a9       	ldd	r25, Y+55	; 0x37
    2418:	9b ab       	std	Y+51, r25	; 0x33
    241a:	8a ab       	std	Y+50, r24	; 0x32
    241c:	8a a9       	ldd	r24, Y+50	; 0x32
    241e:	9b a9       	ldd	r25, Y+51	; 0x33
    2420:	01 97       	sbiw	r24, 0x01	; 1
    2422:	f1 f7       	brne	.-4      	; 0x2420 <lcd_sendcmd+0x4ce>
    2424:	9b ab       	std	Y+51, r25	; 0x33
    2426:	8a ab       	std	Y+50, r24	; 0x32
    2428:	18 c0       	rjmp	.+48     	; 0x245a <lcd_sendcmd+0x508>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    242a:	fe 01       	movw	r30, r28
    242c:	ef 5b       	subi	r30, 0xBF	; 191
    242e:	ff 4f       	sbci	r31, 0xFF	; 255
    2430:	60 81       	ld	r22, Z
    2432:	71 81       	ldd	r23, Z+1	; 0x01
    2434:	82 81       	ldd	r24, Z+2	; 0x02
    2436:	93 81       	ldd	r25, Z+3	; 0x03
    2438:	0e 94 32 18 	call	0x3064	; 0x3064 <__fixunssfsi>
    243c:	dc 01       	movw	r26, r24
    243e:	cb 01       	movw	r24, r22
    2440:	fe 01       	movw	r30, r28
    2442:	e0 5c       	subi	r30, 0xC0	; 192
    2444:	ff 4f       	sbci	r31, 0xFF	; 255
    2446:	80 83       	st	Z, r24
    2448:	fe 01       	movw	r30, r28
    244a:	e0 5c       	subi	r30, 0xC0	; 192
    244c:	ff 4f       	sbci	r31, 0xFF	; 255
    244e:	80 81       	ld	r24, Z
    2450:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2452:	89 a9       	ldd	r24, Y+49	; 0x31
    2454:	8a 95       	dec	r24
    2456:	f1 f7       	brne	.-4      	; 0x2454 <lcd_sendcmd+0x502>
    2458:	89 ab       	std	Y+49, r24	; 0x31
		_delay_us(2000);

		if(GET_BIT(cmd,0)){DIO_write(LCD_D4,HIGH);}else {DIO_write(LCD_D4,LOW);}
    245a:	fe 01       	movw	r30, r28
    245c:	ef 59       	subi	r30, 0x9F	; 159
    245e:	ff 4f       	sbci	r31, 0xFF	; 255
    2460:	80 81       	ld	r24, Z
    2462:	88 2f       	mov	r24, r24
    2464:	90 e0       	ldi	r25, 0x00	; 0
    2466:	81 70       	andi	r24, 0x01	; 1
    2468:	90 70       	andi	r25, 0x00	; 0
    246a:	88 23       	and	r24, r24
    246c:	29 f0       	breq	.+10     	; 0x2478 <lcd_sendcmd+0x526>
    246e:	84 e0       	ldi	r24, 0x04	; 4
    2470:	61 e0       	ldi	r22, 0x01	; 1
    2472:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_write>
    2476:	04 c0       	rjmp	.+8      	; 0x2480 <lcd_sendcmd+0x52e>
    2478:	84 e0       	ldi	r24, 0x04	; 4
    247a:	60 e0       	ldi	r22, 0x00	; 0
    247c:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_write>
		if(GET_BIT(cmd,1)){DIO_write(LCD_D5,HIGH);}else {DIO_write(LCD_D5,LOW);}
    2480:	fe 01       	movw	r30, r28
    2482:	ef 59       	subi	r30, 0x9F	; 159
    2484:	ff 4f       	sbci	r31, 0xFF	; 255
    2486:	80 81       	ld	r24, Z
    2488:	86 95       	lsr	r24
    248a:	88 2f       	mov	r24, r24
    248c:	90 e0       	ldi	r25, 0x00	; 0
    248e:	81 70       	andi	r24, 0x01	; 1
    2490:	90 70       	andi	r25, 0x00	; 0
    2492:	88 23       	and	r24, r24
    2494:	29 f0       	breq	.+10     	; 0x24a0 <lcd_sendcmd+0x54e>
    2496:	85 e0       	ldi	r24, 0x05	; 5
    2498:	61 e0       	ldi	r22, 0x01	; 1
    249a:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_write>
    249e:	04 c0       	rjmp	.+8      	; 0x24a8 <lcd_sendcmd+0x556>
    24a0:	85 e0       	ldi	r24, 0x05	; 5
    24a2:	60 e0       	ldi	r22, 0x00	; 0
    24a4:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_write>
		if(GET_BIT(cmd,2)){DIO_write(LCD_D6,HIGH);}else {DIO_write(LCD_D6,LOW);}
    24a8:	fe 01       	movw	r30, r28
    24aa:	ef 59       	subi	r30, 0x9F	; 159
    24ac:	ff 4f       	sbci	r31, 0xFF	; 255
    24ae:	80 81       	ld	r24, Z
    24b0:	86 95       	lsr	r24
    24b2:	86 95       	lsr	r24
    24b4:	88 2f       	mov	r24, r24
    24b6:	90 e0       	ldi	r25, 0x00	; 0
    24b8:	81 70       	andi	r24, 0x01	; 1
    24ba:	90 70       	andi	r25, 0x00	; 0
    24bc:	88 23       	and	r24, r24
    24be:	29 f0       	breq	.+10     	; 0x24ca <lcd_sendcmd+0x578>
    24c0:	86 e0       	ldi	r24, 0x06	; 6
    24c2:	61 e0       	ldi	r22, 0x01	; 1
    24c4:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_write>
    24c8:	04 c0       	rjmp	.+8      	; 0x24d2 <lcd_sendcmd+0x580>
    24ca:	86 e0       	ldi	r24, 0x06	; 6
    24cc:	60 e0       	ldi	r22, 0x00	; 0
    24ce:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_write>
		if(GET_BIT(cmd,3)){DIO_write(LCD_D7,HIGH);}else {DIO_write(LCD_D7,LOW);}
    24d2:	fe 01       	movw	r30, r28
    24d4:	ef 59       	subi	r30, 0x9F	; 159
    24d6:	ff 4f       	sbci	r31, 0xFF	; 255
    24d8:	80 81       	ld	r24, Z
    24da:	86 95       	lsr	r24
    24dc:	86 95       	lsr	r24
    24de:	86 95       	lsr	r24
    24e0:	88 2f       	mov	r24, r24
    24e2:	90 e0       	ldi	r25, 0x00	; 0
    24e4:	81 70       	andi	r24, 0x01	; 1
    24e6:	90 70       	andi	r25, 0x00	; 0
    24e8:	88 23       	and	r24, r24
    24ea:	29 f0       	breq	.+10     	; 0x24f6 <lcd_sendcmd+0x5a4>
    24ec:	87 e0       	ldi	r24, 0x07	; 7
    24ee:	61 e0       	ldi	r22, 0x01	; 1
    24f0:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_write>
    24f4:	04 c0       	rjmp	.+8      	; 0x24fe <lcd_sendcmd+0x5ac>
    24f6:	87 e0       	ldi	r24, 0x07	; 7
    24f8:	60 e0       	ldi	r22, 0x00	; 0
    24fa:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_write>

		SET_BIT(PORTB,6);
    24fe:	a8 e3       	ldi	r26, 0x38	; 56
    2500:	b0 e0       	ldi	r27, 0x00	; 0
    2502:	e8 e3       	ldi	r30, 0x38	; 56
    2504:	f0 e0       	ldi	r31, 0x00	; 0
    2506:	80 81       	ld	r24, Z
    2508:	80 64       	ori	r24, 0x40	; 64
    250a:	8c 93       	st	X, r24
    250c:	80 e0       	ldi	r24, 0x00	; 0
    250e:	90 e0       	ldi	r25, 0x00	; 0
    2510:	a0 e2       	ldi	r26, 0x20	; 32
    2512:	b1 e4       	ldi	r27, 0x41	; 65
    2514:	8d a7       	std	Y+45, r24	; 0x2d
    2516:	9e a7       	std	Y+46, r25	; 0x2e
    2518:	af a7       	std	Y+47, r26	; 0x2f
    251a:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    251c:	6d a5       	ldd	r22, Y+45	; 0x2d
    251e:	7e a5       	ldd	r23, Y+46	; 0x2e
    2520:	8f a5       	ldd	r24, Y+47	; 0x2f
    2522:	98 a9       	ldd	r25, Y+48	; 0x30
    2524:	2b ea       	ldi	r18, 0xAB	; 171
    2526:	3a ea       	ldi	r19, 0xAA	; 170
    2528:	4a ea       	ldi	r20, 0xAA	; 170
    252a:	50 e4       	ldi	r21, 0x40	; 64
    252c:	0e 94 59 21 	call	0x42b2	; 0x42b2 <__mulsf3>
    2530:	dc 01       	movw	r26, r24
    2532:	cb 01       	movw	r24, r22
    2534:	89 a7       	std	Y+41, r24	; 0x29
    2536:	9a a7       	std	Y+42, r25	; 0x2a
    2538:	ab a7       	std	Y+43, r26	; 0x2b
    253a:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    253c:	69 a5       	ldd	r22, Y+41	; 0x29
    253e:	7a a5       	ldd	r23, Y+42	; 0x2a
    2540:	8b a5       	ldd	r24, Y+43	; 0x2b
    2542:	9c a5       	ldd	r25, Y+44	; 0x2c
    2544:	20 e0       	ldi	r18, 0x00	; 0
    2546:	30 e0       	ldi	r19, 0x00	; 0
    2548:	40 e8       	ldi	r20, 0x80	; 128
    254a:	5f e3       	ldi	r21, 0x3F	; 63
    254c:	0e 94 5f 23 	call	0x46be	; 0x46be <__ltsf2>
    2550:	88 23       	and	r24, r24
    2552:	1c f4       	brge	.+6      	; 0x255a <lcd_sendcmd+0x608>
		__ticks = 1;
    2554:	81 e0       	ldi	r24, 0x01	; 1
    2556:	88 a7       	std	Y+40, r24	; 0x28
    2558:	91 c0       	rjmp	.+290    	; 0x267c <lcd_sendcmd+0x72a>
	else if (__tmp > 255)
    255a:	69 a5       	ldd	r22, Y+41	; 0x29
    255c:	7a a5       	ldd	r23, Y+42	; 0x2a
    255e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2560:	9c a5       	ldd	r25, Y+44	; 0x2c
    2562:	20 e0       	ldi	r18, 0x00	; 0
    2564:	30 e0       	ldi	r19, 0x00	; 0
    2566:	4f e7       	ldi	r20, 0x7F	; 127
    2568:	53 e4       	ldi	r21, 0x43	; 67
    256a:	0e 94 ff 22 	call	0x45fe	; 0x45fe <__gtsf2>
    256e:	18 16       	cp	r1, r24
    2570:	0c f0       	brlt	.+2      	; 0x2574 <lcd_sendcmd+0x622>
    2572:	7b c0       	rjmp	.+246    	; 0x266a <lcd_sendcmd+0x718>
	{
		_delay_ms(__us / 1000.0);
    2574:	6d a5       	ldd	r22, Y+45	; 0x2d
    2576:	7e a5       	ldd	r23, Y+46	; 0x2e
    2578:	8f a5       	ldd	r24, Y+47	; 0x2f
    257a:	98 a9       	ldd	r25, Y+48	; 0x30
    257c:	20 e0       	ldi	r18, 0x00	; 0
    257e:	30 e0       	ldi	r19, 0x00	; 0
    2580:	4a e7       	ldi	r20, 0x7A	; 122
    2582:	54 e4       	ldi	r21, 0x44	; 68
    2584:	0e 94 53 22 	call	0x44a6	; 0x44a6 <__divsf3>
    2588:	dc 01       	movw	r26, r24
    258a:	cb 01       	movw	r24, r22
    258c:	8c a3       	std	Y+36, r24	; 0x24
    258e:	9d a3       	std	Y+37, r25	; 0x25
    2590:	ae a3       	std	Y+38, r26	; 0x26
    2592:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2594:	6c a1       	ldd	r22, Y+36	; 0x24
    2596:	7d a1       	ldd	r23, Y+37	; 0x25
    2598:	8e a1       	ldd	r24, Y+38	; 0x26
    259a:	9f a1       	ldd	r25, Y+39	; 0x27
    259c:	20 e0       	ldi	r18, 0x00	; 0
    259e:	30 e0       	ldi	r19, 0x00	; 0
    25a0:	4a e7       	ldi	r20, 0x7A	; 122
    25a2:	55 e4       	ldi	r21, 0x45	; 69
    25a4:	0e 94 59 21 	call	0x42b2	; 0x42b2 <__mulsf3>
    25a8:	dc 01       	movw	r26, r24
    25aa:	cb 01       	movw	r24, r22
    25ac:	88 a3       	std	Y+32, r24	; 0x20
    25ae:	99 a3       	std	Y+33, r25	; 0x21
    25b0:	aa a3       	std	Y+34, r26	; 0x22
    25b2:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    25b4:	68 a1       	ldd	r22, Y+32	; 0x20
    25b6:	79 a1       	ldd	r23, Y+33	; 0x21
    25b8:	8a a1       	ldd	r24, Y+34	; 0x22
    25ba:	9b a1       	ldd	r25, Y+35	; 0x23
    25bc:	20 e0       	ldi	r18, 0x00	; 0
    25be:	30 e0       	ldi	r19, 0x00	; 0
    25c0:	40 e8       	ldi	r20, 0x80	; 128
    25c2:	5f e3       	ldi	r21, 0x3F	; 63
    25c4:	0e 94 5f 23 	call	0x46be	; 0x46be <__ltsf2>
    25c8:	88 23       	and	r24, r24
    25ca:	2c f4       	brge	.+10     	; 0x25d6 <lcd_sendcmd+0x684>
		__ticks = 1;
    25cc:	81 e0       	ldi	r24, 0x01	; 1
    25ce:	90 e0       	ldi	r25, 0x00	; 0
    25d0:	9f 8f       	std	Y+31, r25	; 0x1f
    25d2:	8e 8f       	std	Y+30, r24	; 0x1e
    25d4:	3f c0       	rjmp	.+126    	; 0x2654 <lcd_sendcmd+0x702>
	else if (__tmp > 65535)
    25d6:	68 a1       	ldd	r22, Y+32	; 0x20
    25d8:	79 a1       	ldd	r23, Y+33	; 0x21
    25da:	8a a1       	ldd	r24, Y+34	; 0x22
    25dc:	9b a1       	ldd	r25, Y+35	; 0x23
    25de:	20 e0       	ldi	r18, 0x00	; 0
    25e0:	3f ef       	ldi	r19, 0xFF	; 255
    25e2:	4f e7       	ldi	r20, 0x7F	; 127
    25e4:	57 e4       	ldi	r21, 0x47	; 71
    25e6:	0e 94 ff 22 	call	0x45fe	; 0x45fe <__gtsf2>
    25ea:	18 16       	cp	r1, r24
    25ec:	4c f5       	brge	.+82     	; 0x2640 <lcd_sendcmd+0x6ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25ee:	6c a1       	ldd	r22, Y+36	; 0x24
    25f0:	7d a1       	ldd	r23, Y+37	; 0x25
    25f2:	8e a1       	ldd	r24, Y+38	; 0x26
    25f4:	9f a1       	ldd	r25, Y+39	; 0x27
    25f6:	20 e0       	ldi	r18, 0x00	; 0
    25f8:	30 e0       	ldi	r19, 0x00	; 0
    25fa:	40 e2       	ldi	r20, 0x20	; 32
    25fc:	51 e4       	ldi	r21, 0x41	; 65
    25fe:	0e 94 59 21 	call	0x42b2	; 0x42b2 <__mulsf3>
    2602:	dc 01       	movw	r26, r24
    2604:	cb 01       	movw	r24, r22
    2606:	bc 01       	movw	r22, r24
    2608:	cd 01       	movw	r24, r26
    260a:	0e 94 32 18 	call	0x3064	; 0x3064 <__fixunssfsi>
    260e:	dc 01       	movw	r26, r24
    2610:	cb 01       	movw	r24, r22
    2612:	9f 8f       	std	Y+31, r25	; 0x1f
    2614:	8e 8f       	std	Y+30, r24	; 0x1e
    2616:	0f c0       	rjmp	.+30     	; 0x2636 <lcd_sendcmd+0x6e4>
    2618:	80 e9       	ldi	r24, 0x90	; 144
    261a:	91 e0       	ldi	r25, 0x01	; 1
    261c:	9d 8f       	std	Y+29, r25	; 0x1d
    261e:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2620:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2622:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2624:	01 97       	sbiw	r24, 0x01	; 1
    2626:	f1 f7       	brne	.-4      	; 0x2624 <lcd_sendcmd+0x6d2>
    2628:	9d 8f       	std	Y+29, r25	; 0x1d
    262a:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    262c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    262e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2630:	01 97       	sbiw	r24, 0x01	; 1
    2632:	9f 8f       	std	Y+31, r25	; 0x1f
    2634:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2636:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2638:	9f 8d       	ldd	r25, Y+31	; 0x1f
    263a:	00 97       	sbiw	r24, 0x00	; 0
    263c:	69 f7       	brne	.-38     	; 0x2618 <lcd_sendcmd+0x6c6>
    263e:	24 c0       	rjmp	.+72     	; 0x2688 <lcd_sendcmd+0x736>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2640:	68 a1       	ldd	r22, Y+32	; 0x20
    2642:	79 a1       	ldd	r23, Y+33	; 0x21
    2644:	8a a1       	ldd	r24, Y+34	; 0x22
    2646:	9b a1       	ldd	r25, Y+35	; 0x23
    2648:	0e 94 32 18 	call	0x3064	; 0x3064 <__fixunssfsi>
    264c:	dc 01       	movw	r26, r24
    264e:	cb 01       	movw	r24, r22
    2650:	9f 8f       	std	Y+31, r25	; 0x1f
    2652:	8e 8f       	std	Y+30, r24	; 0x1e
    2654:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2656:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2658:	9b 8f       	std	Y+27, r25	; 0x1b
    265a:	8a 8f       	std	Y+26, r24	; 0x1a
    265c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    265e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2660:	01 97       	sbiw	r24, 0x01	; 1
    2662:	f1 f7       	brne	.-4      	; 0x2660 <lcd_sendcmd+0x70e>
    2664:	9b 8f       	std	Y+27, r25	; 0x1b
    2666:	8a 8f       	std	Y+26, r24	; 0x1a
    2668:	0f c0       	rjmp	.+30     	; 0x2688 <lcd_sendcmd+0x736>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    266a:	69 a5       	ldd	r22, Y+41	; 0x29
    266c:	7a a5       	ldd	r23, Y+42	; 0x2a
    266e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2670:	9c a5       	ldd	r25, Y+44	; 0x2c
    2672:	0e 94 32 18 	call	0x3064	; 0x3064 <__fixunssfsi>
    2676:	dc 01       	movw	r26, r24
    2678:	cb 01       	movw	r24, r22
    267a:	88 a7       	std	Y+40, r24	; 0x28
    267c:	88 a5       	ldd	r24, Y+40	; 0x28
    267e:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2680:	89 8d       	ldd	r24, Y+25	; 0x19
    2682:	8a 95       	dec	r24
    2684:	f1 f7       	brne	.-4      	; 0x2682 <lcd_sendcmd+0x730>
    2686:	89 8f       	std	Y+25, r24	; 0x19
		_delay_us(10);
		CLR_BIT(PORTB,6);
    2688:	a8 e3       	ldi	r26, 0x38	; 56
    268a:	b0 e0       	ldi	r27, 0x00	; 0
    268c:	e8 e3       	ldi	r30, 0x38	; 56
    268e:	f0 e0       	ldi	r31, 0x00	; 0
    2690:	80 81       	ld	r24, Z
    2692:	8f 7b       	andi	r24, 0xBF	; 191
    2694:	8c 93       	st	X, r24
    2696:	80 e0       	ldi	r24, 0x00	; 0
    2698:	90 e0       	ldi	r25, 0x00	; 0
    269a:	aa ef       	ldi	r26, 0xFA	; 250
    269c:	b4 e4       	ldi	r27, 0x44	; 68
    269e:	8d 8b       	std	Y+21, r24	; 0x15
    26a0:	9e 8b       	std	Y+22, r25	; 0x16
    26a2:	af 8b       	std	Y+23, r26	; 0x17
    26a4:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    26a6:	6d 89       	ldd	r22, Y+21	; 0x15
    26a8:	7e 89       	ldd	r23, Y+22	; 0x16
    26aa:	8f 89       	ldd	r24, Y+23	; 0x17
    26ac:	98 8d       	ldd	r25, Y+24	; 0x18
    26ae:	2b ea       	ldi	r18, 0xAB	; 171
    26b0:	3a ea       	ldi	r19, 0xAA	; 170
    26b2:	4a ea       	ldi	r20, 0xAA	; 170
    26b4:	50 e4       	ldi	r21, 0x40	; 64
    26b6:	0e 94 59 21 	call	0x42b2	; 0x42b2 <__mulsf3>
    26ba:	dc 01       	movw	r26, r24
    26bc:	cb 01       	movw	r24, r22
    26be:	89 8b       	std	Y+17, r24	; 0x11
    26c0:	9a 8b       	std	Y+18, r25	; 0x12
    26c2:	ab 8b       	std	Y+19, r26	; 0x13
    26c4:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    26c6:	69 89       	ldd	r22, Y+17	; 0x11
    26c8:	7a 89       	ldd	r23, Y+18	; 0x12
    26ca:	8b 89       	ldd	r24, Y+19	; 0x13
    26cc:	9c 89       	ldd	r25, Y+20	; 0x14
    26ce:	20 e0       	ldi	r18, 0x00	; 0
    26d0:	30 e0       	ldi	r19, 0x00	; 0
    26d2:	40 e8       	ldi	r20, 0x80	; 128
    26d4:	5f e3       	ldi	r21, 0x3F	; 63
    26d6:	0e 94 5f 23 	call	0x46be	; 0x46be <__ltsf2>
    26da:	88 23       	and	r24, r24
    26dc:	1c f4       	brge	.+6      	; 0x26e4 <lcd_sendcmd+0x792>
		__ticks = 1;
    26de:	81 e0       	ldi	r24, 0x01	; 1
    26e0:	88 8b       	std	Y+16, r24	; 0x10
    26e2:	91 c0       	rjmp	.+290    	; 0x2806 <lcd_sendcmd+0x8b4>
	else if (__tmp > 255)
    26e4:	69 89       	ldd	r22, Y+17	; 0x11
    26e6:	7a 89       	ldd	r23, Y+18	; 0x12
    26e8:	8b 89       	ldd	r24, Y+19	; 0x13
    26ea:	9c 89       	ldd	r25, Y+20	; 0x14
    26ec:	20 e0       	ldi	r18, 0x00	; 0
    26ee:	30 e0       	ldi	r19, 0x00	; 0
    26f0:	4f e7       	ldi	r20, 0x7F	; 127
    26f2:	53 e4       	ldi	r21, 0x43	; 67
    26f4:	0e 94 ff 22 	call	0x45fe	; 0x45fe <__gtsf2>
    26f8:	18 16       	cp	r1, r24
    26fa:	0c f0       	brlt	.+2      	; 0x26fe <lcd_sendcmd+0x7ac>
    26fc:	7b c0       	rjmp	.+246    	; 0x27f4 <lcd_sendcmd+0x8a2>
	{
		_delay_ms(__us / 1000.0);
    26fe:	6d 89       	ldd	r22, Y+21	; 0x15
    2700:	7e 89       	ldd	r23, Y+22	; 0x16
    2702:	8f 89       	ldd	r24, Y+23	; 0x17
    2704:	98 8d       	ldd	r25, Y+24	; 0x18
    2706:	20 e0       	ldi	r18, 0x00	; 0
    2708:	30 e0       	ldi	r19, 0x00	; 0
    270a:	4a e7       	ldi	r20, 0x7A	; 122
    270c:	54 e4       	ldi	r21, 0x44	; 68
    270e:	0e 94 53 22 	call	0x44a6	; 0x44a6 <__divsf3>
    2712:	dc 01       	movw	r26, r24
    2714:	cb 01       	movw	r24, r22
    2716:	8c 87       	std	Y+12, r24	; 0x0c
    2718:	9d 87       	std	Y+13, r25	; 0x0d
    271a:	ae 87       	std	Y+14, r26	; 0x0e
    271c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    271e:	6c 85       	ldd	r22, Y+12	; 0x0c
    2720:	7d 85       	ldd	r23, Y+13	; 0x0d
    2722:	8e 85       	ldd	r24, Y+14	; 0x0e
    2724:	9f 85       	ldd	r25, Y+15	; 0x0f
    2726:	20 e0       	ldi	r18, 0x00	; 0
    2728:	30 e0       	ldi	r19, 0x00	; 0
    272a:	4a e7       	ldi	r20, 0x7A	; 122
    272c:	55 e4       	ldi	r21, 0x45	; 69
    272e:	0e 94 59 21 	call	0x42b2	; 0x42b2 <__mulsf3>
    2732:	dc 01       	movw	r26, r24
    2734:	cb 01       	movw	r24, r22
    2736:	88 87       	std	Y+8, r24	; 0x08
    2738:	99 87       	std	Y+9, r25	; 0x09
    273a:	aa 87       	std	Y+10, r26	; 0x0a
    273c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    273e:	68 85       	ldd	r22, Y+8	; 0x08
    2740:	79 85       	ldd	r23, Y+9	; 0x09
    2742:	8a 85       	ldd	r24, Y+10	; 0x0a
    2744:	9b 85       	ldd	r25, Y+11	; 0x0b
    2746:	20 e0       	ldi	r18, 0x00	; 0
    2748:	30 e0       	ldi	r19, 0x00	; 0
    274a:	40 e8       	ldi	r20, 0x80	; 128
    274c:	5f e3       	ldi	r21, 0x3F	; 63
    274e:	0e 94 5f 23 	call	0x46be	; 0x46be <__ltsf2>
    2752:	88 23       	and	r24, r24
    2754:	2c f4       	brge	.+10     	; 0x2760 <lcd_sendcmd+0x80e>
		__ticks = 1;
    2756:	81 e0       	ldi	r24, 0x01	; 1
    2758:	90 e0       	ldi	r25, 0x00	; 0
    275a:	9f 83       	std	Y+7, r25	; 0x07
    275c:	8e 83       	std	Y+6, r24	; 0x06
    275e:	3f c0       	rjmp	.+126    	; 0x27de <lcd_sendcmd+0x88c>
	else if (__tmp > 65535)
    2760:	68 85       	ldd	r22, Y+8	; 0x08
    2762:	79 85       	ldd	r23, Y+9	; 0x09
    2764:	8a 85       	ldd	r24, Y+10	; 0x0a
    2766:	9b 85       	ldd	r25, Y+11	; 0x0b
    2768:	20 e0       	ldi	r18, 0x00	; 0
    276a:	3f ef       	ldi	r19, 0xFF	; 255
    276c:	4f e7       	ldi	r20, 0x7F	; 127
    276e:	57 e4       	ldi	r21, 0x47	; 71
    2770:	0e 94 ff 22 	call	0x45fe	; 0x45fe <__gtsf2>
    2774:	18 16       	cp	r1, r24
    2776:	4c f5       	brge	.+82     	; 0x27ca <lcd_sendcmd+0x878>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2778:	6c 85       	ldd	r22, Y+12	; 0x0c
    277a:	7d 85       	ldd	r23, Y+13	; 0x0d
    277c:	8e 85       	ldd	r24, Y+14	; 0x0e
    277e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2780:	20 e0       	ldi	r18, 0x00	; 0
    2782:	30 e0       	ldi	r19, 0x00	; 0
    2784:	40 e2       	ldi	r20, 0x20	; 32
    2786:	51 e4       	ldi	r21, 0x41	; 65
    2788:	0e 94 59 21 	call	0x42b2	; 0x42b2 <__mulsf3>
    278c:	dc 01       	movw	r26, r24
    278e:	cb 01       	movw	r24, r22
    2790:	bc 01       	movw	r22, r24
    2792:	cd 01       	movw	r24, r26
    2794:	0e 94 32 18 	call	0x3064	; 0x3064 <__fixunssfsi>
    2798:	dc 01       	movw	r26, r24
    279a:	cb 01       	movw	r24, r22
    279c:	9f 83       	std	Y+7, r25	; 0x07
    279e:	8e 83       	std	Y+6, r24	; 0x06
    27a0:	0f c0       	rjmp	.+30     	; 0x27c0 <lcd_sendcmd+0x86e>
    27a2:	80 e9       	ldi	r24, 0x90	; 144
    27a4:	91 e0       	ldi	r25, 0x01	; 1
    27a6:	9d 83       	std	Y+5, r25	; 0x05
    27a8:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    27aa:	8c 81       	ldd	r24, Y+4	; 0x04
    27ac:	9d 81       	ldd	r25, Y+5	; 0x05
    27ae:	01 97       	sbiw	r24, 0x01	; 1
    27b0:	f1 f7       	brne	.-4      	; 0x27ae <lcd_sendcmd+0x85c>
    27b2:	9d 83       	std	Y+5, r25	; 0x05
    27b4:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27b6:	8e 81       	ldd	r24, Y+6	; 0x06
    27b8:	9f 81       	ldd	r25, Y+7	; 0x07
    27ba:	01 97       	sbiw	r24, 0x01	; 1
    27bc:	9f 83       	std	Y+7, r25	; 0x07
    27be:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27c0:	8e 81       	ldd	r24, Y+6	; 0x06
    27c2:	9f 81       	ldd	r25, Y+7	; 0x07
    27c4:	00 97       	sbiw	r24, 0x00	; 0
    27c6:	69 f7       	brne	.-38     	; 0x27a2 <lcd_sendcmd+0x850>
    27c8:	24 c0       	rjmp	.+72     	; 0x2812 <lcd_sendcmd+0x8c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27ca:	68 85       	ldd	r22, Y+8	; 0x08
    27cc:	79 85       	ldd	r23, Y+9	; 0x09
    27ce:	8a 85       	ldd	r24, Y+10	; 0x0a
    27d0:	9b 85       	ldd	r25, Y+11	; 0x0b
    27d2:	0e 94 32 18 	call	0x3064	; 0x3064 <__fixunssfsi>
    27d6:	dc 01       	movw	r26, r24
    27d8:	cb 01       	movw	r24, r22
    27da:	9f 83       	std	Y+7, r25	; 0x07
    27dc:	8e 83       	std	Y+6, r24	; 0x06
    27de:	8e 81       	ldd	r24, Y+6	; 0x06
    27e0:	9f 81       	ldd	r25, Y+7	; 0x07
    27e2:	9b 83       	std	Y+3, r25	; 0x03
    27e4:	8a 83       	std	Y+2, r24	; 0x02
    27e6:	8a 81       	ldd	r24, Y+2	; 0x02
    27e8:	9b 81       	ldd	r25, Y+3	; 0x03
    27ea:	01 97       	sbiw	r24, 0x01	; 1
    27ec:	f1 f7       	brne	.-4      	; 0x27ea <lcd_sendcmd+0x898>
    27ee:	9b 83       	std	Y+3, r25	; 0x03
    27f0:	8a 83       	std	Y+2, r24	; 0x02
    27f2:	0f c0       	rjmp	.+30     	; 0x2812 <lcd_sendcmd+0x8c0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    27f4:	69 89       	ldd	r22, Y+17	; 0x11
    27f6:	7a 89       	ldd	r23, Y+18	; 0x12
    27f8:	8b 89       	ldd	r24, Y+19	; 0x13
    27fa:	9c 89       	ldd	r25, Y+20	; 0x14
    27fc:	0e 94 32 18 	call	0x3064	; 0x3064 <__fixunssfsi>
    2800:	dc 01       	movw	r26, r24
    2802:	cb 01       	movw	r24, r22
    2804:	88 8b       	std	Y+16, r24	; 0x10
    2806:	88 89       	ldd	r24, Y+16	; 0x10
    2808:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    280a:	89 81       	ldd	r24, Y+1	; 0x01
    280c:	8a 95       	dec	r24
    280e:	f1 f7       	brne	.-4      	; 0x280c <lcd_sendcmd+0x8ba>
    2810:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(2000);

}
    2812:	cf 59       	subi	r28, 0x9F	; 159
    2814:	df 4f       	sbci	r29, 0xFF	; 255
    2816:	0f b6       	in	r0, 0x3f	; 63
    2818:	f8 94       	cli
    281a:	de bf       	out	0x3e, r29	; 62
    281c:	0f be       	out	0x3f, r0	; 63
    281e:	cd bf       	out	0x3d, r28	; 61
    2820:	cf 91       	pop	r28
    2822:	df 91       	pop	r29
    2824:	1f 91       	pop	r17
    2826:	0f 91       	pop	r16
    2828:	08 95       	ret

0000282a <lcd_sendstring>:

void lcd_sendstring(unsigned char * string)
{
    282a:	df 93       	push	r29
    282c:	cf 93       	push	r28
    282e:	00 d0       	rcall	.+0      	; 0x2830 <lcd_sendstring+0x6>
    2830:	00 d0       	rcall	.+0      	; 0x2832 <lcd_sendstring+0x8>
    2832:	cd b7       	in	r28, 0x3d	; 61
    2834:	de b7       	in	r29, 0x3e	; 62
    2836:	9c 83       	std	Y+4, r25	; 0x04
    2838:	8b 83       	std	Y+3, r24	; 0x03
   int i=0;
    283a:	1a 82       	std	Y+2, r1	; 0x02
    283c:	19 82       	std	Y+1, r1	; 0x01
   for(i=0;string[i]!=0;i++)
    283e:	1a 82       	std	Y+2, r1	; 0x02
    2840:	19 82       	std	Y+1, r1	; 0x01
    2842:	0f c0       	rjmp	.+30     	; 0x2862 <lcd_sendstring+0x38>
   {
	lcd_sendchar(string[i]);
    2844:	29 81       	ldd	r18, Y+1	; 0x01
    2846:	3a 81       	ldd	r19, Y+2	; 0x02
    2848:	8b 81       	ldd	r24, Y+3	; 0x03
    284a:	9c 81       	ldd	r25, Y+4	; 0x04
    284c:	fc 01       	movw	r30, r24
    284e:	e2 0f       	add	r30, r18
    2850:	f3 1f       	adc	r31, r19
    2852:	80 81       	ld	r24, Z
    2854:	0e 94 3d 0b 	call	0x167a	; 0x167a <lcd_sendchar>
}

void lcd_sendstring(unsigned char * string)
{
   int i=0;
   for(i=0;string[i]!=0;i++)
    2858:	89 81       	ldd	r24, Y+1	; 0x01
    285a:	9a 81       	ldd	r25, Y+2	; 0x02
    285c:	01 96       	adiw	r24, 0x01	; 1
    285e:	9a 83       	std	Y+2, r25	; 0x02
    2860:	89 83       	std	Y+1, r24	; 0x01
    2862:	29 81       	ldd	r18, Y+1	; 0x01
    2864:	3a 81       	ldd	r19, Y+2	; 0x02
    2866:	8b 81       	ldd	r24, Y+3	; 0x03
    2868:	9c 81       	ldd	r25, Y+4	; 0x04
    286a:	fc 01       	movw	r30, r24
    286c:	e2 0f       	add	r30, r18
    286e:	f3 1f       	adc	r31, r19
    2870:	80 81       	ld	r24, Z
    2872:	88 23       	and	r24, r24
    2874:	39 f7       	brne	.-50     	; 0x2844 <lcd_sendstring+0x1a>
   {
	lcd_sendchar(string[i]);
   }

}
    2876:	0f 90       	pop	r0
    2878:	0f 90       	pop	r0
    287a:	0f 90       	pop	r0
    287c:	0f 90       	pop	r0
    287e:	cf 91       	pop	r28
    2880:	df 91       	pop	r29
    2882:	08 95       	ret

00002884 <glcd_cmd>:




void glcd_cmd(unsigned char cmd) //subroutine for command
 {
    2884:	df 93       	push	r29
    2886:	cf 93       	push	r28
    2888:	cd b7       	in	r28, 0x3d	; 61
    288a:	de b7       	in	r29, 0x3e	; 62
    288c:	6d 97       	sbiw	r28, 0x1d	; 29
    288e:	0f b6       	in	r0, 0x3f	; 63
    2890:	f8 94       	cli
    2892:	de bf       	out	0x3e, r29	; 62
    2894:	0f be       	out	0x3f, r0	; 63
    2896:	cd bf       	out	0x3d, r28	; 61
    2898:	8d 8f       	std	Y+29, r24	; 0x1d
	   PORTC=cmd;
    289a:	e5 e3       	ldi	r30, 0x35	; 53
    289c:	f0 e0       	ldi	r31, 0x00	; 0
    289e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    28a0:	80 83       	st	Z, r24

	SET_BIT(PORTD,0); // Enable GLCD
    28a2:	a2 e3       	ldi	r26, 0x32	; 50
    28a4:	b0 e0       	ldi	r27, 0x00	; 0
    28a6:	e2 e3       	ldi	r30, 0x32	; 50
    28a8:	f0 e0       	ldi	r31, 0x00	; 0
    28aa:	80 81       	ld	r24, Z
    28ac:	81 60       	ori	r24, 0x01	; 1
    28ae:	8c 93       	st	X, r24
    28b0:	80 e0       	ldi	r24, 0x00	; 0
    28b2:	90 e0       	ldi	r25, 0x00	; 0
    28b4:	a0 e0       	ldi	r26, 0x00	; 0
    28b6:	b0 e4       	ldi	r27, 0x40	; 64
    28b8:	89 8f       	std	Y+25, r24	; 0x19
    28ba:	9a 8f       	std	Y+26, r25	; 0x1a
    28bc:	ab 8f       	std	Y+27, r26	; 0x1b
    28be:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28c0:	69 8d       	ldd	r22, Y+25	; 0x19
    28c2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28c4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28c6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28c8:	20 e0       	ldi	r18, 0x00	; 0
    28ca:	30 e0       	ldi	r19, 0x00	; 0
    28cc:	4a e7       	ldi	r20, 0x7A	; 122
    28ce:	55 e4       	ldi	r21, 0x45	; 69
    28d0:	0e 94 59 21 	call	0x42b2	; 0x42b2 <__mulsf3>
    28d4:	dc 01       	movw	r26, r24
    28d6:	cb 01       	movw	r24, r22
    28d8:	8d 8b       	std	Y+21, r24	; 0x15
    28da:	9e 8b       	std	Y+22, r25	; 0x16
    28dc:	af 8b       	std	Y+23, r26	; 0x17
    28de:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    28e0:	6d 89       	ldd	r22, Y+21	; 0x15
    28e2:	7e 89       	ldd	r23, Y+22	; 0x16
    28e4:	8f 89       	ldd	r24, Y+23	; 0x17
    28e6:	98 8d       	ldd	r25, Y+24	; 0x18
    28e8:	20 e0       	ldi	r18, 0x00	; 0
    28ea:	30 e0       	ldi	r19, 0x00	; 0
    28ec:	40 e8       	ldi	r20, 0x80	; 128
    28ee:	5f e3       	ldi	r21, 0x3F	; 63
    28f0:	0e 94 5f 23 	call	0x46be	; 0x46be <__ltsf2>
    28f4:	88 23       	and	r24, r24
    28f6:	2c f4       	brge	.+10     	; 0x2902 <glcd_cmd+0x7e>
		__ticks = 1;
    28f8:	81 e0       	ldi	r24, 0x01	; 1
    28fa:	90 e0       	ldi	r25, 0x00	; 0
    28fc:	9c 8b       	std	Y+20, r25	; 0x14
    28fe:	8b 8b       	std	Y+19, r24	; 0x13
    2900:	3f c0       	rjmp	.+126    	; 0x2980 <glcd_cmd+0xfc>
	else if (__tmp > 65535)
    2902:	6d 89       	ldd	r22, Y+21	; 0x15
    2904:	7e 89       	ldd	r23, Y+22	; 0x16
    2906:	8f 89       	ldd	r24, Y+23	; 0x17
    2908:	98 8d       	ldd	r25, Y+24	; 0x18
    290a:	20 e0       	ldi	r18, 0x00	; 0
    290c:	3f ef       	ldi	r19, 0xFF	; 255
    290e:	4f e7       	ldi	r20, 0x7F	; 127
    2910:	57 e4       	ldi	r21, 0x47	; 71
    2912:	0e 94 ff 22 	call	0x45fe	; 0x45fe <__gtsf2>
    2916:	18 16       	cp	r1, r24
    2918:	4c f5       	brge	.+82     	; 0x296c <glcd_cmd+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    291a:	69 8d       	ldd	r22, Y+25	; 0x19
    291c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    291e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2920:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2922:	20 e0       	ldi	r18, 0x00	; 0
    2924:	30 e0       	ldi	r19, 0x00	; 0
    2926:	40 e2       	ldi	r20, 0x20	; 32
    2928:	51 e4       	ldi	r21, 0x41	; 65
    292a:	0e 94 59 21 	call	0x42b2	; 0x42b2 <__mulsf3>
    292e:	dc 01       	movw	r26, r24
    2930:	cb 01       	movw	r24, r22
    2932:	bc 01       	movw	r22, r24
    2934:	cd 01       	movw	r24, r26
    2936:	0e 94 32 18 	call	0x3064	; 0x3064 <__fixunssfsi>
    293a:	dc 01       	movw	r26, r24
    293c:	cb 01       	movw	r24, r22
    293e:	9c 8b       	std	Y+20, r25	; 0x14
    2940:	8b 8b       	std	Y+19, r24	; 0x13
    2942:	0f c0       	rjmp	.+30     	; 0x2962 <glcd_cmd+0xde>
    2944:	80 e9       	ldi	r24, 0x90	; 144
    2946:	91 e0       	ldi	r25, 0x01	; 1
    2948:	9a 8b       	std	Y+18, r25	; 0x12
    294a:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    294c:	89 89       	ldd	r24, Y+17	; 0x11
    294e:	9a 89       	ldd	r25, Y+18	; 0x12
    2950:	01 97       	sbiw	r24, 0x01	; 1
    2952:	f1 f7       	brne	.-4      	; 0x2950 <glcd_cmd+0xcc>
    2954:	9a 8b       	std	Y+18, r25	; 0x12
    2956:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2958:	8b 89       	ldd	r24, Y+19	; 0x13
    295a:	9c 89       	ldd	r25, Y+20	; 0x14
    295c:	01 97       	sbiw	r24, 0x01	; 1
    295e:	9c 8b       	std	Y+20, r25	; 0x14
    2960:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2962:	8b 89       	ldd	r24, Y+19	; 0x13
    2964:	9c 89       	ldd	r25, Y+20	; 0x14
    2966:	00 97       	sbiw	r24, 0x00	; 0
    2968:	69 f7       	brne	.-38     	; 0x2944 <glcd_cmd+0xc0>
    296a:	14 c0       	rjmp	.+40     	; 0x2994 <glcd_cmd+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    296c:	6d 89       	ldd	r22, Y+21	; 0x15
    296e:	7e 89       	ldd	r23, Y+22	; 0x16
    2970:	8f 89       	ldd	r24, Y+23	; 0x17
    2972:	98 8d       	ldd	r25, Y+24	; 0x18
    2974:	0e 94 32 18 	call	0x3064	; 0x3064 <__fixunssfsi>
    2978:	dc 01       	movw	r26, r24
    297a:	cb 01       	movw	r24, r22
    297c:	9c 8b       	std	Y+20, r25	; 0x14
    297e:	8b 8b       	std	Y+19, r24	; 0x13
    2980:	8b 89       	ldd	r24, Y+19	; 0x13
    2982:	9c 89       	ldd	r25, Y+20	; 0x14
    2984:	98 8b       	std	Y+16, r25	; 0x10
    2986:	8f 87       	std	Y+15, r24	; 0x0f
    2988:	8f 85       	ldd	r24, Y+15	; 0x0f
    298a:	98 89       	ldd	r25, Y+16	; 0x10
    298c:	01 97       	sbiw	r24, 0x01	; 1
    298e:	f1 f7       	brne	.-4      	; 0x298c <glcd_cmd+0x108>
    2990:	98 8b       	std	Y+16, r25	; 0x10
    2992:	8f 87       	std	Y+15, r24	; 0x0f
   _delay_ms(2);

   CLR_BIT(PORTD,2); // To create an instruction
    2994:	a2 e3       	ldi	r26, 0x32	; 50
    2996:	b0 e0       	ldi	r27, 0x00	; 0
    2998:	e2 e3       	ldi	r30, 0x32	; 50
    299a:	f0 e0       	ldi	r31, 0x00	; 0
    299c:	80 81       	ld	r24, Z
    299e:	8b 7f       	andi	r24, 0xFB	; 251
    29a0:	8c 93       	st	X, r24
   CLR_BIT(PORTD,1); // To write instruction
    29a2:	a2 e3       	ldi	r26, 0x32	; 50
    29a4:	b0 e0       	ldi	r27, 0x00	; 0
    29a6:	e2 e3       	ldi	r30, 0x32	; 50
    29a8:	f0 e0       	ldi	r31, 0x00	; 0
    29aa:	80 81       	ld	r24, Z
    29ac:	8d 7f       	andi	r24, 0xFD	; 253
    29ae:	8c 93       	st	X, r24
    29b0:	80 e0       	ldi	r24, 0x00	; 0
    29b2:	90 e0       	ldi	r25, 0x00	; 0
    29b4:	a0 e0       	ldi	r26, 0x00	; 0
    29b6:	b0 e4       	ldi	r27, 0x40	; 64
    29b8:	8b 87       	std	Y+11, r24	; 0x0b
    29ba:	9c 87       	std	Y+12, r25	; 0x0c
    29bc:	ad 87       	std	Y+13, r26	; 0x0d
    29be:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    29c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    29c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    29c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    29c8:	20 e0       	ldi	r18, 0x00	; 0
    29ca:	30 e0       	ldi	r19, 0x00	; 0
    29cc:	4a e7       	ldi	r20, 0x7A	; 122
    29ce:	55 e4       	ldi	r21, 0x45	; 69
    29d0:	0e 94 59 21 	call	0x42b2	; 0x42b2 <__mulsf3>
    29d4:	dc 01       	movw	r26, r24
    29d6:	cb 01       	movw	r24, r22
    29d8:	8f 83       	std	Y+7, r24	; 0x07
    29da:	98 87       	std	Y+8, r25	; 0x08
    29dc:	a9 87       	std	Y+9, r26	; 0x09
    29de:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29e0:	6f 81       	ldd	r22, Y+7	; 0x07
    29e2:	78 85       	ldd	r23, Y+8	; 0x08
    29e4:	89 85       	ldd	r24, Y+9	; 0x09
    29e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    29e8:	20 e0       	ldi	r18, 0x00	; 0
    29ea:	30 e0       	ldi	r19, 0x00	; 0
    29ec:	40 e8       	ldi	r20, 0x80	; 128
    29ee:	5f e3       	ldi	r21, 0x3F	; 63
    29f0:	0e 94 5f 23 	call	0x46be	; 0x46be <__ltsf2>
    29f4:	88 23       	and	r24, r24
    29f6:	2c f4       	brge	.+10     	; 0x2a02 <glcd_cmd+0x17e>
		__ticks = 1;
    29f8:	81 e0       	ldi	r24, 0x01	; 1
    29fa:	90 e0       	ldi	r25, 0x00	; 0
    29fc:	9e 83       	std	Y+6, r25	; 0x06
    29fe:	8d 83       	std	Y+5, r24	; 0x05
    2a00:	3f c0       	rjmp	.+126    	; 0x2a80 <glcd_cmd+0x1fc>
	else if (__tmp > 65535)
    2a02:	6f 81       	ldd	r22, Y+7	; 0x07
    2a04:	78 85       	ldd	r23, Y+8	; 0x08
    2a06:	89 85       	ldd	r24, Y+9	; 0x09
    2a08:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a0a:	20 e0       	ldi	r18, 0x00	; 0
    2a0c:	3f ef       	ldi	r19, 0xFF	; 255
    2a0e:	4f e7       	ldi	r20, 0x7F	; 127
    2a10:	57 e4       	ldi	r21, 0x47	; 71
    2a12:	0e 94 ff 22 	call	0x45fe	; 0x45fe <__gtsf2>
    2a16:	18 16       	cp	r1, r24
    2a18:	4c f5       	brge	.+82     	; 0x2a6c <glcd_cmd+0x1e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a1a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a1c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a1e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a20:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a22:	20 e0       	ldi	r18, 0x00	; 0
    2a24:	30 e0       	ldi	r19, 0x00	; 0
    2a26:	40 e2       	ldi	r20, 0x20	; 32
    2a28:	51 e4       	ldi	r21, 0x41	; 65
    2a2a:	0e 94 59 21 	call	0x42b2	; 0x42b2 <__mulsf3>
    2a2e:	dc 01       	movw	r26, r24
    2a30:	cb 01       	movw	r24, r22
    2a32:	bc 01       	movw	r22, r24
    2a34:	cd 01       	movw	r24, r26
    2a36:	0e 94 32 18 	call	0x3064	; 0x3064 <__fixunssfsi>
    2a3a:	dc 01       	movw	r26, r24
    2a3c:	cb 01       	movw	r24, r22
    2a3e:	9e 83       	std	Y+6, r25	; 0x06
    2a40:	8d 83       	std	Y+5, r24	; 0x05
    2a42:	0f c0       	rjmp	.+30     	; 0x2a62 <glcd_cmd+0x1de>
    2a44:	80 e9       	ldi	r24, 0x90	; 144
    2a46:	91 e0       	ldi	r25, 0x01	; 1
    2a48:	9c 83       	std	Y+4, r25	; 0x04
    2a4a:	8b 83       	std	Y+3, r24	; 0x03
    2a4c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a4e:	9c 81       	ldd	r25, Y+4	; 0x04
    2a50:	01 97       	sbiw	r24, 0x01	; 1
    2a52:	f1 f7       	brne	.-4      	; 0x2a50 <glcd_cmd+0x1cc>
    2a54:	9c 83       	std	Y+4, r25	; 0x04
    2a56:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a58:	8d 81       	ldd	r24, Y+5	; 0x05
    2a5a:	9e 81       	ldd	r25, Y+6	; 0x06
    2a5c:	01 97       	sbiw	r24, 0x01	; 1
    2a5e:	9e 83       	std	Y+6, r25	; 0x06
    2a60:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a62:	8d 81       	ldd	r24, Y+5	; 0x05
    2a64:	9e 81       	ldd	r25, Y+6	; 0x06
    2a66:	00 97       	sbiw	r24, 0x00	; 0
    2a68:	69 f7       	brne	.-38     	; 0x2a44 <glcd_cmd+0x1c0>
    2a6a:	14 c0       	rjmp	.+40     	; 0x2a94 <glcd_cmd+0x210>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a6c:	6f 81       	ldd	r22, Y+7	; 0x07
    2a6e:	78 85       	ldd	r23, Y+8	; 0x08
    2a70:	89 85       	ldd	r24, Y+9	; 0x09
    2a72:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a74:	0e 94 32 18 	call	0x3064	; 0x3064 <__fixunssfsi>
    2a78:	dc 01       	movw	r26, r24
    2a7a:	cb 01       	movw	r24, r22
    2a7c:	9e 83       	std	Y+6, r25	; 0x06
    2a7e:	8d 83       	std	Y+5, r24	; 0x05
    2a80:	8d 81       	ldd	r24, Y+5	; 0x05
    2a82:	9e 81       	ldd	r25, Y+6	; 0x06
    2a84:	9a 83       	std	Y+2, r25	; 0x02
    2a86:	89 83       	std	Y+1, r24	; 0x01
    2a88:	89 81       	ldd	r24, Y+1	; 0x01
    2a8a:	9a 81       	ldd	r25, Y+2	; 0x02
    2a8c:	01 97       	sbiw	r24, 0x01	; 1
    2a8e:	f1 f7       	brne	.-4      	; 0x2a8c <glcd_cmd+0x208>
    2a90:	9a 83       	std	Y+2, r25	; 0x02
    2a92:	89 83       	std	Y+1, r24	; 0x01
   _delay_ms(2);
 }
    2a94:	6d 96       	adiw	r28, 0x1d	; 29
    2a96:	0f b6       	in	r0, 0x3f	; 63
    2a98:	f8 94       	cli
    2a9a:	de bf       	out	0x3e, r29	; 62
    2a9c:	0f be       	out	0x3f, r0	; 63
    2a9e:	cd bf       	out	0x3d, r28	; 61
    2aa0:	cf 91       	pop	r28
    2aa2:	df 91       	pop	r29
    2aa4:	08 95       	ret

00002aa6 <glcd_data>:

void glcd_data(unsigned char dat)  //subroutine for data
 {
    2aa6:	df 93       	push	r29
    2aa8:	cf 93       	push	r28
    2aaa:	cd b7       	in	r28, 0x3d	; 61
    2aac:	de b7       	in	r29, 0x3e	; 62
    2aae:	6d 97       	sbiw	r28, 0x1d	; 29
    2ab0:	0f b6       	in	r0, 0x3f	; 63
    2ab2:	f8 94       	cli
    2ab4:	de bf       	out	0x3e, r29	; 62
    2ab6:	0f be       	out	0x3f, r0	; 63
    2ab8:	cd bf       	out	0x3d, r28	; 61
    2aba:	8d 8f       	std	Y+29, r24	; 0x1d
	  PORTC=dat;
    2abc:	e5 e3       	ldi	r30, 0x35	; 53
    2abe:	f0 e0       	ldi	r31, 0x00	; 0
    2ac0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ac2:	80 83       	st	Z, r24
    2ac4:	80 e0       	ldi	r24, 0x00	; 0
    2ac6:	90 e0       	ldi	r25, 0x00	; 0
    2ac8:	a0 e0       	ldi	r26, 0x00	; 0
    2aca:	b0 e4       	ldi	r27, 0x40	; 64
    2acc:	89 8f       	std	Y+25, r24	; 0x19
    2ace:	9a 8f       	std	Y+26, r25	; 0x1a
    2ad0:	ab 8f       	std	Y+27, r26	; 0x1b
    2ad2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ad4:	69 8d       	ldd	r22, Y+25	; 0x19
    2ad6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ad8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ada:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2adc:	20 e0       	ldi	r18, 0x00	; 0
    2ade:	30 e0       	ldi	r19, 0x00	; 0
    2ae0:	4a e7       	ldi	r20, 0x7A	; 122
    2ae2:	55 e4       	ldi	r21, 0x45	; 69
    2ae4:	0e 94 59 21 	call	0x42b2	; 0x42b2 <__mulsf3>
    2ae8:	dc 01       	movw	r26, r24
    2aea:	cb 01       	movw	r24, r22
    2aec:	8d 8b       	std	Y+21, r24	; 0x15
    2aee:	9e 8b       	std	Y+22, r25	; 0x16
    2af0:	af 8b       	std	Y+23, r26	; 0x17
    2af2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2af4:	6d 89       	ldd	r22, Y+21	; 0x15
    2af6:	7e 89       	ldd	r23, Y+22	; 0x16
    2af8:	8f 89       	ldd	r24, Y+23	; 0x17
    2afa:	98 8d       	ldd	r25, Y+24	; 0x18
    2afc:	20 e0       	ldi	r18, 0x00	; 0
    2afe:	30 e0       	ldi	r19, 0x00	; 0
    2b00:	40 e8       	ldi	r20, 0x80	; 128
    2b02:	5f e3       	ldi	r21, 0x3F	; 63
    2b04:	0e 94 5f 23 	call	0x46be	; 0x46be <__ltsf2>
    2b08:	88 23       	and	r24, r24
    2b0a:	2c f4       	brge	.+10     	; 0x2b16 <glcd_data+0x70>
		__ticks = 1;
    2b0c:	81 e0       	ldi	r24, 0x01	; 1
    2b0e:	90 e0       	ldi	r25, 0x00	; 0
    2b10:	9c 8b       	std	Y+20, r25	; 0x14
    2b12:	8b 8b       	std	Y+19, r24	; 0x13
    2b14:	3f c0       	rjmp	.+126    	; 0x2b94 <glcd_data+0xee>
	else if (__tmp > 65535)
    2b16:	6d 89       	ldd	r22, Y+21	; 0x15
    2b18:	7e 89       	ldd	r23, Y+22	; 0x16
    2b1a:	8f 89       	ldd	r24, Y+23	; 0x17
    2b1c:	98 8d       	ldd	r25, Y+24	; 0x18
    2b1e:	20 e0       	ldi	r18, 0x00	; 0
    2b20:	3f ef       	ldi	r19, 0xFF	; 255
    2b22:	4f e7       	ldi	r20, 0x7F	; 127
    2b24:	57 e4       	ldi	r21, 0x47	; 71
    2b26:	0e 94 ff 22 	call	0x45fe	; 0x45fe <__gtsf2>
    2b2a:	18 16       	cp	r1, r24
    2b2c:	4c f5       	brge	.+82     	; 0x2b80 <glcd_data+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b2e:	69 8d       	ldd	r22, Y+25	; 0x19
    2b30:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b32:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b34:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b36:	20 e0       	ldi	r18, 0x00	; 0
    2b38:	30 e0       	ldi	r19, 0x00	; 0
    2b3a:	40 e2       	ldi	r20, 0x20	; 32
    2b3c:	51 e4       	ldi	r21, 0x41	; 65
    2b3e:	0e 94 59 21 	call	0x42b2	; 0x42b2 <__mulsf3>
    2b42:	dc 01       	movw	r26, r24
    2b44:	cb 01       	movw	r24, r22
    2b46:	bc 01       	movw	r22, r24
    2b48:	cd 01       	movw	r24, r26
    2b4a:	0e 94 32 18 	call	0x3064	; 0x3064 <__fixunssfsi>
    2b4e:	dc 01       	movw	r26, r24
    2b50:	cb 01       	movw	r24, r22
    2b52:	9c 8b       	std	Y+20, r25	; 0x14
    2b54:	8b 8b       	std	Y+19, r24	; 0x13
    2b56:	0f c0       	rjmp	.+30     	; 0x2b76 <glcd_data+0xd0>
    2b58:	80 e9       	ldi	r24, 0x90	; 144
    2b5a:	91 e0       	ldi	r25, 0x01	; 1
    2b5c:	9a 8b       	std	Y+18, r25	; 0x12
    2b5e:	89 8b       	std	Y+17, r24	; 0x11
    2b60:	89 89       	ldd	r24, Y+17	; 0x11
    2b62:	9a 89       	ldd	r25, Y+18	; 0x12
    2b64:	01 97       	sbiw	r24, 0x01	; 1
    2b66:	f1 f7       	brne	.-4      	; 0x2b64 <glcd_data+0xbe>
    2b68:	9a 8b       	std	Y+18, r25	; 0x12
    2b6a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b6c:	8b 89       	ldd	r24, Y+19	; 0x13
    2b6e:	9c 89       	ldd	r25, Y+20	; 0x14
    2b70:	01 97       	sbiw	r24, 0x01	; 1
    2b72:	9c 8b       	std	Y+20, r25	; 0x14
    2b74:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b76:	8b 89       	ldd	r24, Y+19	; 0x13
    2b78:	9c 89       	ldd	r25, Y+20	; 0x14
    2b7a:	00 97       	sbiw	r24, 0x00	; 0
    2b7c:	69 f7       	brne	.-38     	; 0x2b58 <glcd_data+0xb2>
    2b7e:	14 c0       	rjmp	.+40     	; 0x2ba8 <glcd_data+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b80:	6d 89       	ldd	r22, Y+21	; 0x15
    2b82:	7e 89       	ldd	r23, Y+22	; 0x16
    2b84:	8f 89       	ldd	r24, Y+23	; 0x17
    2b86:	98 8d       	ldd	r25, Y+24	; 0x18
    2b88:	0e 94 32 18 	call	0x3064	; 0x3064 <__fixunssfsi>
    2b8c:	dc 01       	movw	r26, r24
    2b8e:	cb 01       	movw	r24, r22
    2b90:	9c 8b       	std	Y+20, r25	; 0x14
    2b92:	8b 8b       	std	Y+19, r24	; 0x13
    2b94:	8b 89       	ldd	r24, Y+19	; 0x13
    2b96:	9c 89       	ldd	r25, Y+20	; 0x14
    2b98:	98 8b       	std	Y+16, r25	; 0x10
    2b9a:	8f 87       	std	Y+15, r24	; 0x0f
    2b9c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b9e:	98 89       	ldd	r25, Y+16	; 0x10
    2ba0:	01 97       	sbiw	r24, 0x01	; 1
    2ba2:	f1 f7       	brne	.-4      	; 0x2ba0 <glcd_data+0xfa>
    2ba4:	98 8b       	std	Y+16, r25	; 0x10
    2ba6:	8f 87       	std	Y+15, r24	; 0x0f

   _delay_ms(2);
   SET_BIT(PORTD,0);
    2ba8:	a2 e3       	ldi	r26, 0x32	; 50
    2baa:	b0 e0       	ldi	r27, 0x00	; 0
    2bac:	e2 e3       	ldi	r30, 0x32	; 50
    2bae:	f0 e0       	ldi	r31, 0x00	; 0
    2bb0:	80 81       	ld	r24, Z
    2bb2:	81 60       	ori	r24, 0x01	; 1
    2bb4:	8c 93       	st	X, r24
  SET_BIT(PORTD,2);
    2bb6:	a2 e3       	ldi	r26, 0x32	; 50
    2bb8:	b0 e0       	ldi	r27, 0x00	; 0
    2bba:	e2 e3       	ldi	r30, 0x32	; 50
    2bbc:	f0 e0       	ldi	r31, 0x00	; 0
    2bbe:	80 81       	ld	r24, Z
    2bc0:	84 60       	ori	r24, 0x04	; 4
    2bc2:	8c 93       	st	X, r24
  CLR_BIT(PORTD,1);
    2bc4:	a2 e3       	ldi	r26, 0x32	; 50
    2bc6:	b0 e0       	ldi	r27, 0x00	; 0
    2bc8:	e2 e3       	ldi	r30, 0x32	; 50
    2bca:	f0 e0       	ldi	r31, 0x00	; 0
    2bcc:	80 81       	ld	r24, Z
    2bce:	8d 7f       	andi	r24, 0xFD	; 253
    2bd0:	8c 93       	st	X, r24
    2bd2:	80 e0       	ldi	r24, 0x00	; 0
    2bd4:	90 e0       	ldi	r25, 0x00	; 0
    2bd6:	a0 e0       	ldi	r26, 0x00	; 0
    2bd8:	b0 e4       	ldi	r27, 0x40	; 64
    2bda:	8b 87       	std	Y+11, r24	; 0x0b
    2bdc:	9c 87       	std	Y+12, r25	; 0x0c
    2bde:	ad 87       	std	Y+13, r26	; 0x0d
    2be0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2be2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2be4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2be6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2be8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bea:	20 e0       	ldi	r18, 0x00	; 0
    2bec:	30 e0       	ldi	r19, 0x00	; 0
    2bee:	4a e7       	ldi	r20, 0x7A	; 122
    2bf0:	55 e4       	ldi	r21, 0x45	; 69
    2bf2:	0e 94 59 21 	call	0x42b2	; 0x42b2 <__mulsf3>
    2bf6:	dc 01       	movw	r26, r24
    2bf8:	cb 01       	movw	r24, r22
    2bfa:	8f 83       	std	Y+7, r24	; 0x07
    2bfc:	98 87       	std	Y+8, r25	; 0x08
    2bfe:	a9 87       	std	Y+9, r26	; 0x09
    2c00:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c02:	6f 81       	ldd	r22, Y+7	; 0x07
    2c04:	78 85       	ldd	r23, Y+8	; 0x08
    2c06:	89 85       	ldd	r24, Y+9	; 0x09
    2c08:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c0a:	20 e0       	ldi	r18, 0x00	; 0
    2c0c:	30 e0       	ldi	r19, 0x00	; 0
    2c0e:	40 e8       	ldi	r20, 0x80	; 128
    2c10:	5f e3       	ldi	r21, 0x3F	; 63
    2c12:	0e 94 5f 23 	call	0x46be	; 0x46be <__ltsf2>
    2c16:	88 23       	and	r24, r24
    2c18:	2c f4       	brge	.+10     	; 0x2c24 <glcd_data+0x17e>
		__ticks = 1;
    2c1a:	81 e0       	ldi	r24, 0x01	; 1
    2c1c:	90 e0       	ldi	r25, 0x00	; 0
    2c1e:	9e 83       	std	Y+6, r25	; 0x06
    2c20:	8d 83       	std	Y+5, r24	; 0x05
    2c22:	3f c0       	rjmp	.+126    	; 0x2ca2 <glcd_data+0x1fc>
	else if (__tmp > 65535)
    2c24:	6f 81       	ldd	r22, Y+7	; 0x07
    2c26:	78 85       	ldd	r23, Y+8	; 0x08
    2c28:	89 85       	ldd	r24, Y+9	; 0x09
    2c2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c2c:	20 e0       	ldi	r18, 0x00	; 0
    2c2e:	3f ef       	ldi	r19, 0xFF	; 255
    2c30:	4f e7       	ldi	r20, 0x7F	; 127
    2c32:	57 e4       	ldi	r21, 0x47	; 71
    2c34:	0e 94 ff 22 	call	0x45fe	; 0x45fe <__gtsf2>
    2c38:	18 16       	cp	r1, r24
    2c3a:	4c f5       	brge	.+82     	; 0x2c8e <glcd_data+0x1e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c40:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c42:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c44:	20 e0       	ldi	r18, 0x00	; 0
    2c46:	30 e0       	ldi	r19, 0x00	; 0
    2c48:	40 e2       	ldi	r20, 0x20	; 32
    2c4a:	51 e4       	ldi	r21, 0x41	; 65
    2c4c:	0e 94 59 21 	call	0x42b2	; 0x42b2 <__mulsf3>
    2c50:	dc 01       	movw	r26, r24
    2c52:	cb 01       	movw	r24, r22
    2c54:	bc 01       	movw	r22, r24
    2c56:	cd 01       	movw	r24, r26
    2c58:	0e 94 32 18 	call	0x3064	; 0x3064 <__fixunssfsi>
    2c5c:	dc 01       	movw	r26, r24
    2c5e:	cb 01       	movw	r24, r22
    2c60:	9e 83       	std	Y+6, r25	; 0x06
    2c62:	8d 83       	std	Y+5, r24	; 0x05
    2c64:	0f c0       	rjmp	.+30     	; 0x2c84 <glcd_data+0x1de>
    2c66:	80 e9       	ldi	r24, 0x90	; 144
    2c68:	91 e0       	ldi	r25, 0x01	; 1
    2c6a:	9c 83       	std	Y+4, r25	; 0x04
    2c6c:	8b 83       	std	Y+3, r24	; 0x03
    2c6e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c70:	9c 81       	ldd	r25, Y+4	; 0x04
    2c72:	01 97       	sbiw	r24, 0x01	; 1
    2c74:	f1 f7       	brne	.-4      	; 0x2c72 <glcd_data+0x1cc>
    2c76:	9c 83       	std	Y+4, r25	; 0x04
    2c78:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c7a:	8d 81       	ldd	r24, Y+5	; 0x05
    2c7c:	9e 81       	ldd	r25, Y+6	; 0x06
    2c7e:	01 97       	sbiw	r24, 0x01	; 1
    2c80:	9e 83       	std	Y+6, r25	; 0x06
    2c82:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c84:	8d 81       	ldd	r24, Y+5	; 0x05
    2c86:	9e 81       	ldd	r25, Y+6	; 0x06
    2c88:	00 97       	sbiw	r24, 0x00	; 0
    2c8a:	69 f7       	brne	.-38     	; 0x2c66 <glcd_data+0x1c0>
    2c8c:	14 c0       	rjmp	.+40     	; 0x2cb6 <glcd_data+0x210>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c8e:	6f 81       	ldd	r22, Y+7	; 0x07
    2c90:	78 85       	ldd	r23, Y+8	; 0x08
    2c92:	89 85       	ldd	r24, Y+9	; 0x09
    2c94:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c96:	0e 94 32 18 	call	0x3064	; 0x3064 <__fixunssfsi>
    2c9a:	dc 01       	movw	r26, r24
    2c9c:	cb 01       	movw	r24, r22
    2c9e:	9e 83       	std	Y+6, r25	; 0x06
    2ca0:	8d 83       	std	Y+5, r24	; 0x05
    2ca2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ca4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ca6:	9a 83       	std	Y+2, r25	; 0x02
    2ca8:	89 83       	std	Y+1, r24	; 0x01
    2caa:	89 81       	ldd	r24, Y+1	; 0x01
    2cac:	9a 81       	ldd	r25, Y+2	; 0x02
    2cae:	01 97       	sbiw	r24, 0x01	; 1
    2cb0:	f1 f7       	brne	.-4      	; 0x2cae <glcd_data+0x208>
    2cb2:	9a 83       	std	Y+2, r25	; 0x02
    2cb4:	89 83       	std	Y+1, r24	; 0x01
   _delay_ms(2);
   CLR_BIT(PORTD,0);
    2cb6:	a2 e3       	ldi	r26, 0x32	; 50
    2cb8:	b0 e0       	ldi	r27, 0x00	; 0
    2cba:	e2 e3       	ldi	r30, 0x32	; 50
    2cbc:	f0 e0       	ldi	r31, 0x00	; 0
    2cbe:	80 81       	ld	r24, Z
    2cc0:	8e 7f       	andi	r24, 0xFE	; 254
    2cc2:	8c 93       	st	X, r24
 }
    2cc4:	6d 96       	adiw	r28, 0x1d	; 29
    2cc6:	0f b6       	in	r0, 0x3f	; 63
    2cc8:	f8 94       	cli
    2cca:	de bf       	out	0x3e, r29	; 62
    2ccc:	0f be       	out	0x3f, r0	; 63
    2cce:	cd bf       	out	0x3d, r28	; 61
    2cd0:	cf 91       	pop	r28
    2cd2:	df 91       	pop	r29
    2cd4:	08 95       	ret

00002cd6 <glcd_init>:

void glcd_init()                //subroutine for initialaization
{
    2cd6:	df 93       	push	r29
    2cd8:	cf 93       	push	r28
    2cda:	00 d0       	rcall	.+0      	; 0x2cdc <glcd_init+0x6>
    2cdc:	00 d0       	rcall	.+0      	; 0x2cde <glcd_init+0x8>
    2cde:	cd b7       	in	r28, 0x3d	; 61
    2ce0:	de b7       	in	r29, 0x3e	; 62
  unsigned char command[4]={0x10,0xb8,0x40,0x3f};
    2ce2:	80 e1       	ldi	r24, 0x10	; 16
    2ce4:	89 83       	std	Y+1, r24	; 0x01
    2ce6:	88 eb       	ldi	r24, 0xB8	; 184
    2ce8:	8a 83       	std	Y+2, r24	; 0x02
    2cea:	80 e4       	ldi	r24, 0x40	; 64
    2cec:	8b 83       	std	Y+3, r24	; 0x03
    2cee:	8f e3       	ldi	r24, 0x3F	; 63
    2cf0:	8c 83       	std	Y+4, r24	; 0x04
  select_chip(1);                      //Chip selection
    2cf2:	81 e0       	ldi	r24, 0x01	; 1
    2cf4:	90 e0       	ldi	r25, 0x00	; 0
    2cf6:	0e 94 ca 16 	call	0x2d94	; 0x2d94 <select_chip>
  for(i=0;i<4;i++)
    2cfa:	10 92 ea 01 	sts	0x01EA, r1
    2cfe:	10 92 e9 01 	sts	0x01E9, r1
    2d02:	15 c0       	rjmp	.+42     	; 0x2d2e <glcd_init+0x58>
  glcd_cmd(command[i]);
    2d04:	20 91 e9 01 	lds	r18, 0x01E9
    2d08:	30 91 ea 01 	lds	r19, 0x01EA
    2d0c:	ce 01       	movw	r24, r28
    2d0e:	01 96       	adiw	r24, 0x01	; 1
    2d10:	fc 01       	movw	r30, r24
    2d12:	e2 0f       	add	r30, r18
    2d14:	f3 1f       	adc	r31, r19
    2d16:	80 81       	ld	r24, Z
    2d18:	0e 94 42 14 	call	0x2884	; 0x2884 <glcd_cmd>

void glcd_init()                //subroutine for initialaization
{
  unsigned char command[4]={0x10,0xb8,0x40,0x3f};
  select_chip(1);                      //Chip selection
  for(i=0;i<4;i++)
    2d1c:	80 91 e9 01 	lds	r24, 0x01E9
    2d20:	90 91 ea 01 	lds	r25, 0x01EA
    2d24:	01 96       	adiw	r24, 0x01	; 1
    2d26:	90 93 ea 01 	sts	0x01EA, r25
    2d2a:	80 93 e9 01 	sts	0x01E9, r24
    2d2e:	80 91 e9 01 	lds	r24, 0x01E9
    2d32:	90 91 ea 01 	lds	r25, 0x01EA
    2d36:	84 30       	cpi	r24, 0x04	; 4
    2d38:	91 05       	cpc	r25, r1
    2d3a:	24 f3       	brlt	.-56     	; 0x2d04 <glcd_init+0x2e>
  glcd_cmd(command[i]);
  select_chip(0);
    2d3c:	80 e0       	ldi	r24, 0x00	; 0
    2d3e:	90 e0       	ldi	r25, 0x00	; 0
    2d40:	0e 94 ca 16 	call	0x2d94	; 0x2d94 <select_chip>
  for(i=0;i<4;i++)
    2d44:	10 92 ea 01 	sts	0x01EA, r1
    2d48:	10 92 e9 01 	sts	0x01E9, r1
    2d4c:	15 c0       	rjmp	.+42     	; 0x2d78 <glcd_init+0xa2>
   glcd_cmd(command[i]);
    2d4e:	20 91 e9 01 	lds	r18, 0x01E9
    2d52:	30 91 ea 01 	lds	r19, 0x01EA
    2d56:	ce 01       	movw	r24, r28
    2d58:	01 96       	adiw	r24, 0x01	; 1
    2d5a:	fc 01       	movw	r30, r24
    2d5c:	e2 0f       	add	r30, r18
    2d5e:	f3 1f       	adc	r31, r19
    2d60:	80 81       	ld	r24, Z
    2d62:	0e 94 42 14 	call	0x2884	; 0x2884 <glcd_cmd>
  unsigned char command[4]={0x10,0xb8,0x40,0x3f};
  select_chip(1);                      //Chip selection
  for(i=0;i<4;i++)
  glcd_cmd(command[i]);
  select_chip(0);
  for(i=0;i<4;i++)
    2d66:	80 91 e9 01 	lds	r24, 0x01E9
    2d6a:	90 91 ea 01 	lds	r25, 0x01EA
    2d6e:	01 96       	adiw	r24, 0x01	; 1
    2d70:	90 93 ea 01 	sts	0x01EA, r25
    2d74:	80 93 e9 01 	sts	0x01E9, r24
    2d78:	80 91 e9 01 	lds	r24, 0x01E9
    2d7c:	90 91 ea 01 	lds	r25, 0x01EA
    2d80:	84 30       	cpi	r24, 0x04	; 4
    2d82:	91 05       	cpc	r25, r1
    2d84:	24 f3       	brlt	.-56     	; 0x2d4e <glcd_init+0x78>
   glcd_cmd(command[i]);
 }
    2d86:	0f 90       	pop	r0
    2d88:	0f 90       	pop	r0
    2d8a:	0f 90       	pop	r0
    2d8c:	0f 90       	pop	r0
    2d8e:	cf 91       	pop	r28
    2d90:	df 91       	pop	r29
    2d92:	08 95       	ret

00002d94 <select_chip>:

void select_chip(int chip)    //Chip selection
 {
    2d94:	df 93       	push	r29
    2d96:	cf 93       	push	r28
    2d98:	00 d0       	rcall	.+0      	; 0x2d9a <select_chip+0x6>
    2d9a:	cd b7       	in	r28, 0x3d	; 61
    2d9c:	de b7       	in	r29, 0x3e	; 62
    2d9e:	9a 83       	std	Y+2, r25	; 0x02
    2da0:	89 83       	std	Y+1, r24	; 0x01
  if(chip==1)
    2da2:	89 81       	ldd	r24, Y+1	; 0x01
    2da4:	9a 81       	ldd	r25, Y+2	; 0x02
    2da6:	81 30       	cpi	r24, 0x01	; 1
    2da8:	91 05       	cpc	r25, r1
    2daa:	79 f4       	brne	.+30     	; 0x2dca <select_chip+0x36>
   {
      PORTD|=(1<<4);
    2dac:	a2 e3       	ldi	r26, 0x32	; 50
    2dae:	b0 e0       	ldi	r27, 0x00	; 0
    2db0:	e2 e3       	ldi	r30, 0x32	; 50
    2db2:	f0 e0       	ldi	r31, 0x00	; 0
    2db4:	80 81       	ld	r24, Z
    2db6:	80 61       	ori	r24, 0x10	; 16
    2db8:	8c 93       	st	X, r24
      PORTD&=~(1<<3);
    2dba:	a2 e3       	ldi	r26, 0x32	; 50
    2dbc:	b0 e0       	ldi	r27, 0x00	; 0
    2dbe:	e2 e3       	ldi	r30, 0x32	; 50
    2dc0:	f0 e0       	ldi	r31, 0x00	; 0
    2dc2:	80 81       	ld	r24, Z
    2dc4:	87 7f       	andi	r24, 0xF7	; 247
    2dc6:	8c 93       	st	X, r24
    2dc8:	0e c0       	rjmp	.+28     	; 0x2de6 <select_chip+0x52>
   }
  else
   {
      PORTD&=~(1<<4);
    2dca:	a2 e3       	ldi	r26, 0x32	; 50
    2dcc:	b0 e0       	ldi	r27, 0x00	; 0
    2dce:	e2 e3       	ldi	r30, 0x32	; 50
    2dd0:	f0 e0       	ldi	r31, 0x00	; 0
    2dd2:	80 81       	ld	r24, Z
    2dd4:	8f 7e       	andi	r24, 0xEF	; 239
    2dd6:	8c 93       	st	X, r24
      PORTD|=(1<<3);
    2dd8:	a2 e3       	ldi	r26, 0x32	; 50
    2dda:	b0 e0       	ldi	r27, 0x00	; 0
    2ddc:	e2 e3       	ldi	r30, 0x32	; 50
    2dde:	f0 e0       	ldi	r31, 0x00	; 0
    2de0:	80 81       	ld	r24, Z
    2de2:	88 60       	ori	r24, 0x08	; 8
    2de4:	8c 93       	st	X, r24
   }
}
    2de6:	0f 90       	pop	r0
    2de8:	0f 90       	pop	r0
    2dea:	cf 91       	pop	r28
    2dec:	df 91       	pop	r29
    2dee:	08 95       	ret

00002df0 <glcd_picture>:

void glcd_picture(const unsigned char *ip)  //Subroutine for printing
 {
    2df0:	df 93       	push	r29
    2df2:	cf 93       	push	r28
    2df4:	00 d0       	rcall	.+0      	; 0x2df6 <glcd_picture+0x6>
    2df6:	00 d0       	rcall	.+0      	; 0x2df8 <glcd_picture+0x8>
    2df8:	00 d0       	rcall	.+0      	; 0x2dfa <glcd_picture+0xa>
    2dfa:	cd b7       	in	r28, 0x3d	; 61
    2dfc:	de b7       	in	r29, 0x3e	; 62
    2dfe:	9e 83       	std	Y+6, r25	; 0x06
    2e00:	8d 83       	std	Y+5, r24	; 0x05
   int page,column;
    for(page=0;page<8;page++)
    2e02:	1c 82       	std	Y+4, r1	; 0x04
    2e04:	1b 82       	std	Y+3, r1	; 0x03
    2e06:	38 c0       	rjmp	.+112    	; 0x2e78 <glcd_picture+0x88>
{
  select_chip(0);
    2e08:	80 e0       	ldi	r24, 0x00	; 0
    2e0a:	90 e0       	ldi	r25, 0x00	; 0
    2e0c:	0e 94 ca 16 	call	0x2d94	; 0x2d94 <select_chip>
  glcd_cmd(0xb8|page);
    2e10:	8b 81       	ldd	r24, Y+3	; 0x03
    2e12:	88 6b       	ori	r24, 0xB8	; 184
    2e14:	0e 94 42 14 	call	0x2884	; 0x2884 <glcd_cmd>
  glcd_cmd(0x40);
    2e18:	80 e4       	ldi	r24, 0x40	; 64
    2e1a:	0e 94 42 14 	call	0x2884	; 0x2884 <glcd_cmd>
    for(column=0;column<128;column++)
    2e1e:	1a 82       	std	Y+2, r1	; 0x02
    2e20:	19 82       	std	Y+1, r1	; 0x01
    2e22:	20 c0       	rjmp	.+64     	; 0x2e64 <glcd_picture+0x74>
     {
if(column==64)
    2e24:	89 81       	ldd	r24, Y+1	; 0x01
    2e26:	9a 81       	ldd	r25, Y+2	; 0x02
    2e28:	80 34       	cpi	r24, 0x40	; 64
    2e2a:	91 05       	cpc	r25, r1
    2e2c:	59 f4       	brne	.+22     	; 0x2e44 <glcd_picture+0x54>
{
 select_chip(1);
    2e2e:	81 e0       	ldi	r24, 0x01	; 1
    2e30:	90 e0       	ldi	r25, 0x00	; 0
    2e32:	0e 94 ca 16 	call	0x2d94	; 0x2d94 <select_chip>
 glcd_cmd(0xb8|page);
    2e36:	8b 81       	ldd	r24, Y+3	; 0x03
    2e38:	88 6b       	ori	r24, 0xB8	; 184
    2e3a:	0e 94 42 14 	call	0x2884	; 0x2884 <glcd_cmd>
 glcd_cmd(0x40);
    2e3e:	80 e4       	ldi	r24, 0x40	; 64
    2e40:	0e 94 42 14 	call	0x2884	; 0x2884 <glcd_cmd>
}
glcd_data(*ip++);    //acessing array values using pointers
    2e44:	ed 81       	ldd	r30, Y+5	; 0x05
    2e46:	fe 81       	ldd	r31, Y+6	; 0x06
    2e48:	20 81       	ld	r18, Z
    2e4a:	8d 81       	ldd	r24, Y+5	; 0x05
    2e4c:	9e 81       	ldd	r25, Y+6	; 0x06
    2e4e:	01 96       	adiw	r24, 0x01	; 1
    2e50:	9e 83       	std	Y+6, r25	; 0x06
    2e52:	8d 83       	std	Y+5, r24	; 0x05
    2e54:	82 2f       	mov	r24, r18
    2e56:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <glcd_data>
    for(page=0;page<8;page++)
{
  select_chip(0);
  glcd_cmd(0xb8|page);
  glcd_cmd(0x40);
    for(column=0;column<128;column++)
    2e5a:	89 81       	ldd	r24, Y+1	; 0x01
    2e5c:	9a 81       	ldd	r25, Y+2	; 0x02
    2e5e:	01 96       	adiw	r24, 0x01	; 1
    2e60:	9a 83       	std	Y+2, r25	; 0x02
    2e62:	89 83       	std	Y+1, r24	; 0x01
    2e64:	89 81       	ldd	r24, Y+1	; 0x01
    2e66:	9a 81       	ldd	r25, Y+2	; 0x02
    2e68:	80 38       	cpi	r24, 0x80	; 128
    2e6a:	91 05       	cpc	r25, r1
    2e6c:	dc f2       	brlt	.-74     	; 0x2e24 <glcd_picture+0x34>
}

void glcd_picture(const unsigned char *ip)  //Subroutine for printing
 {
   int page,column;
    for(page=0;page<8;page++)
    2e6e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e70:	9c 81       	ldd	r25, Y+4	; 0x04
    2e72:	01 96       	adiw	r24, 0x01	; 1
    2e74:	9c 83       	std	Y+4, r25	; 0x04
    2e76:	8b 83       	std	Y+3, r24	; 0x03
    2e78:	8b 81       	ldd	r24, Y+3	; 0x03
    2e7a:	9c 81       	ldd	r25, Y+4	; 0x04
    2e7c:	88 30       	cpi	r24, 0x08	; 8
    2e7e:	91 05       	cpc	r25, r1
    2e80:	1c f2       	brlt	.-122    	; 0x2e08 <glcd_picture+0x18>
 glcd_cmd(0x40);
}
glcd_data(*ip++);    //acessing array values using pointers
    }
       }
  }
    2e82:	26 96       	adiw	r28, 0x06	; 6
    2e84:	0f b6       	in	r0, 0x3f	; 63
    2e86:	f8 94       	cli
    2e88:	de bf       	out	0x3e, r29	; 62
    2e8a:	0f be       	out	0x3f, r0	; 63
    2e8c:	cd bf       	out	0x3d, r28	; 61
    2e8e:	cf 91       	pop	r28
    2e90:	df 91       	pop	r29
    2e92:	08 95       	ret

00002e94 <main>:
#include "MCAL/TIMER_1/TIMER_1.h"
#define f_cpu 16000000UL


int main()
{
    2e94:	2f 92       	push	r2
    2e96:	3f 92       	push	r3
    2e98:	4f 92       	push	r4
    2e9a:	5f 92       	push	r5
    2e9c:	6f 92       	push	r6
    2e9e:	7f 92       	push	r7
    2ea0:	8f 92       	push	r8
    2ea2:	9f 92       	push	r9
    2ea4:	af 92       	push	r10
    2ea6:	bf 92       	push	r11
    2ea8:	cf 92       	push	r12
    2eaa:	df 92       	push	r13
    2eac:	ef 92       	push	r14
    2eae:	ff 92       	push	r15
    2eb0:	0f 93       	push	r16
    2eb2:	1f 93       	push	r17
    2eb4:	df 93       	push	r29
    2eb6:	cf 93       	push	r28
    2eb8:	cd b7       	in	r28, 0x3d	; 61
    2eba:	de b7       	in	r29, 0x3e	; 62
    2ebc:	e3 97       	sbiw	r28, 0x33	; 51
    2ebe:	0f b6       	in	r0, 0x3f	; 63
    2ec0:	f8 94       	cli
    2ec2:	de bf       	out	0x3e, r29	; 62
    2ec4:	0f be       	out	0x3f, r0	; 63
    2ec6:	cd bf       	out	0x3d, r28	; 61
	unsigned short b,c,a;
	unsigned long long high,period;
	uint8_t frequency[14],duty_cy[7];
	DIO_init();   /*initiating the dio*/
    2ec8:	0e 94 a2 04 	call	0x944	; 0x944 <DIO_init>
	TMR0_init();   /*initiating the timer 0*/
    2ecc:	0e 94 88 02 	call	0x510	; 0x510 <TMR0_init>
	lcd_init();   /*initiating the lcd*/
    2ed0:	0e 94 a6 0a 	call	0x154c	; 0x154c <lcd_init>
	PORTD = 0xFF;      /* Turn ON pull-up resistor */
    2ed4:	e2 e3       	ldi	r30, 0x32	; 50
    2ed6:	f0 e0       	ldi	r31, 0x00	; 0
    2ed8:	8f ef       	ldi	r24, 0xFF	; 255
    2eda:	80 83       	st	Z, r24
	TMR0_Set_OCR(150);   /*setting a value for ocr in timer 0*/
    2edc:	86 e9       	ldi	r24, 0x96	; 150
    2ede:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <TMR0_Set_OCR>
	TIMSK|=(1<<2);    /* Overflow Interrupt Enable*/
    2ee2:	a9 e5       	ldi	r26, 0x59	; 89
    2ee4:	b0 e0       	ldi	r27, 0x00	; 0
    2ee6:	e9 e5       	ldi	r30, 0x59	; 89
    2ee8:	f0 e0       	ldi	r31, 0x00	; 0
    2eea:	80 81       	ld	r24, Z
    2eec:	84 60       	ori	r24, 0x04	; 4
    2eee:	8c 93       	st	X, r24
	TCCR1A=0;        /*clear register TCCR1A*/
    2ef0:	ef e4       	ldi	r30, 0x4F	; 79
    2ef2:	f0 e0       	ldi	r31, 0x00	; 0
    2ef4:	10 82       	st	Z, r1
    asm("SEI");    /*embed assembler instructions*/
    2ef6:	78 94       	sei
	while(1)
	{


		            timer1_init(a,b,c,&high,&period); /* initiate timer 1 and send these parameters*/
    2ef8:	89 85       	ldd	r24, Y+9	; 0x09
    2efa:	9a 85       	ldd	r25, Y+10	; 0x0a
    2efc:	2d 85       	ldd	r18, Y+13	; 0x0d
    2efe:	3e 85       	ldd	r19, Y+14	; 0x0e
    2f00:	4b 85       	ldd	r20, Y+11	; 0x0b
    2f02:	5c 85       	ldd	r21, Y+12	; 0x0c
    2f04:	fe 01       	movw	r30, r28
    2f06:	3f 96       	adiw	r30, 0x0f	; 15
    2f08:	de 01       	movw	r26, r28
    2f0a:	57 96       	adiw	r26, 0x17	; 23
    2f0c:	b9 01       	movw	r22, r18
    2f0e:	9f 01       	movw	r18, r30
    2f10:	8d 01       	movw	r16, r26
    2f12:	0e 94 22 01 	call	0x244	; 0x244 <timer1_init>
					long freq= f_cpu/period;/* Calculate frequency */
    2f16:	2f 88       	ldd	r2, Y+23	; 0x17
    2f18:	38 8c       	ldd	r3, Y+24	; 0x18
    2f1a:	49 8c       	ldd	r4, Y+25	; 0x19
    2f1c:	5a 8c       	ldd	r5, Y+26	; 0x1a
    2f1e:	6b 8c       	ldd	r6, Y+27	; 0x1b
    2f20:	7c 8c       	ldd	r7, Y+28	; 0x1c
    2f22:	8d 8c       	ldd	r8, Y+29	; 0x1d
    2f24:	9e 8c       	ldd	r9, Y+30	; 0x1e
    2f26:	20 e0       	ldi	r18, 0x00	; 0
    2f28:	34 e2       	ldi	r19, 0x24	; 36
    2f2a:	44 ef       	ldi	r20, 0xF4	; 244
    2f2c:	50 e0       	ldi	r21, 0x00	; 0
    2f2e:	60 e0       	ldi	r22, 0x00	; 0
    2f30:	70 e0       	ldi	r23, 0x00	; 0
    2f32:	80 e0       	ldi	r24, 0x00	; 0
    2f34:	90 e0       	ldi	r25, 0x00	; 0
    2f36:	a2 2c       	mov	r10, r2
    2f38:	b3 2c       	mov	r11, r3
    2f3a:	c4 2c       	mov	r12, r4
    2f3c:	d5 2c       	mov	r13, r5
    2f3e:	e6 2c       	mov	r14, r6
    2f40:	f7 2c       	mov	r15, r7
    2f42:	08 2d       	mov	r16, r8
    2f44:	19 2d       	mov	r17, r9
    2f46:	0e 94 3a 19 	call	0x3274	; 0x3274 <__udivdi3>
    2f4a:	a2 2e       	mov	r10, r18
    2f4c:	b3 2e       	mov	r11, r19
    2f4e:	c4 2e       	mov	r12, r20
    2f50:	d5 2e       	mov	r13, r21
    2f52:	e6 2e       	mov	r14, r22
    2f54:	f7 2e       	mov	r15, r23
    2f56:	08 2f       	mov	r16, r24
    2f58:	19 2f       	mov	r17, r25
    2f5a:	2a 2d       	mov	r18, r10
    2f5c:	3b 2d       	mov	r19, r11
    2f5e:	4c 2d       	mov	r20, r12
    2f60:	5d 2d       	mov	r21, r13
    2f62:	6e 2d       	mov	r22, r14
    2f64:	7f 2d       	mov	r23, r15
    2f66:	80 2f       	mov	r24, r16
    2f68:	91 2f       	mov	r25, r17
    2f6a:	2d 83       	std	Y+5, r18	; 0x05
    2f6c:	3e 83       	std	Y+6, r19	; 0x06
    2f6e:	4f 83       	std	Y+7, r20	; 0x07
    2f70:	58 87       	std	Y+8, r21	; 0x08
					float duty_cycle =((float)high /(float)period)*100; /* Calculate duty cycle */
    2f72:	af 84       	ldd	r10, Y+15	; 0x0f
    2f74:	b8 88       	ldd	r11, Y+16	; 0x10
    2f76:	c9 88       	ldd	r12, Y+17	; 0x11
    2f78:	da 88       	ldd	r13, Y+18	; 0x12
    2f7a:	eb 88       	ldd	r14, Y+19	; 0x13
    2f7c:	fc 88       	ldd	r15, Y+20	; 0x14
    2f7e:	0d 89       	ldd	r16, Y+21	; 0x15
    2f80:	1e 89       	ldd	r17, Y+22	; 0x16
    2f82:	2a 2d       	mov	r18, r10
    2f84:	3b 2d       	mov	r19, r11
    2f86:	4c 2d       	mov	r20, r12
    2f88:	5d 2d       	mov	r21, r13
    2f8a:	6e 2d       	mov	r22, r14
    2f8c:	7f 2d       	mov	r23, r15
    2f8e:	80 2f       	mov	r24, r16
    2f90:	91 2f       	mov	r25, r17
    2f92:	0e 94 5e 18 	call	0x30bc	; 0x30bc <__floatundisf>
    2f96:	3b 01       	movw	r6, r22
    2f98:	4c 01       	movw	r8, r24
    2f9a:	af 88       	ldd	r10, Y+23	; 0x17
    2f9c:	b8 8c       	ldd	r11, Y+24	; 0x18
    2f9e:	c9 8c       	ldd	r12, Y+25	; 0x19
    2fa0:	da 8c       	ldd	r13, Y+26	; 0x1a
    2fa2:	eb 8c       	ldd	r14, Y+27	; 0x1b
    2fa4:	fc 8c       	ldd	r15, Y+28	; 0x1c
    2fa6:	0d 8d       	ldd	r16, Y+29	; 0x1d
    2fa8:	1e 8d       	ldd	r17, Y+30	; 0x1e
    2faa:	2a 2d       	mov	r18, r10
    2fac:	3b 2d       	mov	r19, r11
    2fae:	4c 2d       	mov	r20, r12
    2fb0:	5d 2d       	mov	r21, r13
    2fb2:	6e 2d       	mov	r22, r14
    2fb4:	7f 2d       	mov	r23, r15
    2fb6:	80 2f       	mov	r24, r16
    2fb8:	91 2f       	mov	r25, r17
    2fba:	0e 94 5e 18 	call	0x30bc	; 0x30bc <__floatundisf>
    2fbe:	9b 01       	movw	r18, r22
    2fc0:	ac 01       	movw	r20, r24
    2fc2:	c4 01       	movw	r24, r8
    2fc4:	b3 01       	movw	r22, r6
    2fc6:	0e 94 53 22 	call	0x44a6	; 0x44a6 <__divsf3>
    2fca:	dc 01       	movw	r26, r24
    2fcc:	cb 01       	movw	r24, r22
    2fce:	bc 01       	movw	r22, r24
    2fd0:	cd 01       	movw	r24, r26
    2fd2:	20 e0       	ldi	r18, 0x00	; 0
    2fd4:	30 e0       	ldi	r19, 0x00	; 0
    2fd6:	48 ec       	ldi	r20, 0xC8	; 200
    2fd8:	52 e4       	ldi	r21, 0x42	; 66
    2fda:	0e 94 59 21 	call	0x42b2	; 0x42b2 <__mulsf3>
    2fde:	dc 01       	movw	r26, r24
    2fe0:	cb 01       	movw	r24, r22
    2fe2:	89 83       	std	Y+1, r24	; 0x01
    2fe4:	9a 83       	std	Y+2, r25	; 0x02
    2fe6:	ab 83       	std	Y+3, r26	; 0x03
    2fe8:	bc 83       	std	Y+4, r27	; 0x04
					ltoa(freq,frequency,10);   /*convert the freq from uint8 to string */
    2fea:	8d 81       	ldd	r24, Y+5	; 0x05
    2fec:	9e 81       	ldd	r25, Y+6	; 0x06
    2fee:	af 81       	ldd	r26, Y+7	; 0x07
    2ff0:	b8 85       	ldd	r27, Y+8	; 0x08
    2ff2:	9e 01       	movw	r18, r28
    2ff4:	21 5e       	subi	r18, 0xE1	; 225
    2ff6:	3f 4f       	sbci	r19, 0xFF	; 255
    2ff8:	bc 01       	movw	r22, r24
    2ffa:	cd 01       	movw	r24, r26
    2ffc:	a9 01       	movw	r20, r18
    2ffe:	2a e0       	ldi	r18, 0x0A	; 10
    3000:	30 e0       	ldi	r19, 0x00	; 0
    3002:	0e 94 4f 27 	call	0x4e9e	; 0x4e9e <ltoa>

					itoa((int)duty_cycle,duty_cy,10); /*convert the duty cycle from uint8 to string */
    3006:	69 81       	ldd	r22, Y+1	; 0x01
    3008:	7a 81       	ldd	r23, Y+2	; 0x02
    300a:	8b 81       	ldd	r24, Y+3	; 0x03
    300c:	9c 81       	ldd	r25, Y+4	; 0x04
    300e:	0e 94 ed 23 	call	0x47da	; 0x47da <__fixsfsi>
    3012:	dc 01       	movw	r26, r24
    3014:	cb 01       	movw	r24, r22
    3016:	9e 01       	movw	r18, r28
    3018:	23 5d       	subi	r18, 0xD3	; 211
    301a:	3f 4f       	sbci	r19, 0xFF	; 255
    301c:	b9 01       	movw	r22, r18
    301e:	4a e0       	ldi	r20, 0x0A	; 10
    3020:	50 e0       	ldi	r21, 0x00	; 0
    3022:	0e 94 2e 27 	call	0x4e5c	; 0x4e5c <itoa>
					lcd_sendcmd(0x80);  /*setting the cursor to first row*/
    3026:	80 e8       	ldi	r24, 0x80	; 128
    3028:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <lcd_sendcmd>
					lcd_sendstring("Freq: ");
    302c:	87 eb       	ldi	r24, 0xB7	; 183
    302e:	90 e0       	ldi	r25, 0x00	; 0
    3030:	0e 94 15 14 	call	0x282a	; 0x282a <lcd_sendstring>
					lcd_sendstring(frequency);
    3034:	ce 01       	movw	r24, r28
    3036:	4f 96       	adiw	r24, 0x1f	; 31
    3038:	0e 94 15 14 	call	0x282a	; 0x282a <lcd_sendstring>
					lcd_sendstring(" Hz    ");
    303c:	8e eb       	ldi	r24, 0xBE	; 190
    303e:	90 e0       	ldi	r25, 0x00	; 0
    3040:	0e 94 15 14 	call	0x282a	; 0x282a <lcd_sendstring>

					lcd_sendcmd(0xC0);  /*setting the cursor to second row*/
    3044:	80 ec       	ldi	r24, 0xC0	; 192
    3046:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <lcd_sendcmd>
					lcd_sendstring("Duty: ");
    304a:	86 ec       	ldi	r24, 0xC6	; 198
    304c:	90 e0       	ldi	r25, 0x00	; 0
    304e:	0e 94 15 14 	call	0x282a	; 0x282a <lcd_sendstring>
					lcd_sendstring(duty_cy);
    3052:	ce 01       	movw	r24, r28
    3054:	8d 96       	adiw	r24, 0x2d	; 45
    3056:	0e 94 15 14 	call	0x282a	; 0x282a <lcd_sendstring>
					lcd_sendstring(" %      ");
    305a:	8d ec       	ldi	r24, 0xCD	; 205
    305c:	90 e0       	ldi	r25, 0x00	; 0
    305e:	0e 94 15 14 	call	0x282a	; 0x282a <lcd_sendstring>
    3062:	4a cf       	rjmp	.-364    	; 0x2ef8 <main+0x64>

00003064 <__fixunssfsi>:
    3064:	ef 92       	push	r14
    3066:	ff 92       	push	r15
    3068:	0f 93       	push	r16
    306a:	1f 93       	push	r17
    306c:	7b 01       	movw	r14, r22
    306e:	8c 01       	movw	r16, r24
    3070:	20 e0       	ldi	r18, 0x00	; 0
    3072:	30 e0       	ldi	r19, 0x00	; 0
    3074:	40 e0       	ldi	r20, 0x00	; 0
    3076:	5f e4       	ldi	r21, 0x4F	; 79
    3078:	0e 94 2f 23 	call	0x465e	; 0x465e <__gesf2>
    307c:	88 23       	and	r24, r24
    307e:	8c f0       	brlt	.+34     	; 0x30a2 <__fixunssfsi+0x3e>
    3080:	c8 01       	movw	r24, r16
    3082:	b7 01       	movw	r22, r14
    3084:	20 e0       	ldi	r18, 0x00	; 0
    3086:	30 e0       	ldi	r19, 0x00	; 0
    3088:	40 e0       	ldi	r20, 0x00	; 0
    308a:	5f e4       	ldi	r21, 0x4F	; 79
    308c:	0e 94 fb 20 	call	0x41f6	; 0x41f6 <__subsf3>
    3090:	0e 94 ed 23 	call	0x47da	; 0x47da <__fixsfsi>
    3094:	9b 01       	movw	r18, r22
    3096:	ac 01       	movw	r20, r24
    3098:	20 50       	subi	r18, 0x00	; 0
    309a:	30 40       	sbci	r19, 0x00	; 0
    309c:	40 40       	sbci	r20, 0x00	; 0
    309e:	50 48       	sbci	r21, 0x80	; 128
    30a0:	06 c0       	rjmp	.+12     	; 0x30ae <__fixunssfsi+0x4a>
    30a2:	c8 01       	movw	r24, r16
    30a4:	b7 01       	movw	r22, r14
    30a6:	0e 94 ed 23 	call	0x47da	; 0x47da <__fixsfsi>
    30aa:	9b 01       	movw	r18, r22
    30ac:	ac 01       	movw	r20, r24
    30ae:	b9 01       	movw	r22, r18
    30b0:	ca 01       	movw	r24, r20
    30b2:	1f 91       	pop	r17
    30b4:	0f 91       	pop	r16
    30b6:	ff 90       	pop	r15
    30b8:	ef 90       	pop	r14
    30ba:	08 95       	ret

000030bc <__floatundisf>:
    30bc:	a2 e0       	ldi	r26, 0x02	; 2
    30be:	b0 e0       	ldi	r27, 0x00	; 0
    30c0:	e4 e6       	ldi	r30, 0x64	; 100
    30c2:	f8 e1       	ldi	r31, 0x18	; 24
    30c4:	0c 94 d4 27 	jmp	0x4fa8	; 0x4fa8 <__prologue_saves__>
    30c8:	12 2f       	mov	r17, r18
    30ca:	b3 2e       	mov	r11, r19
    30cc:	a4 2e       	mov	r10, r20
    30ce:	95 2e       	mov	r9, r21
    30d0:	86 2e       	mov	r8, r22
    30d2:	37 2e       	mov	r3, r23
    30d4:	28 2e       	mov	r2, r24
    30d6:	9a 83       	std	Y+2, r25	; 0x02
    30d8:	c2 2e       	mov	r12, r18
    30da:	d3 2e       	mov	r13, r19
    30dc:	e4 2e       	mov	r14, r20
    30de:	f5 2e       	mov	r15, r21
    30e0:	a7 01       	movw	r20, r14
    30e2:	96 01       	movw	r18, r12
    30e4:	60 e0       	ldi	r22, 0x00	; 0
    30e6:	70 e0       	ldi	r23, 0x00	; 0
    30e8:	80 e0       	ldi	r24, 0x00	; 0
    30ea:	90 e0       	ldi	r25, 0x00	; 0
    30ec:	21 17       	cp	r18, r17
    30ee:	a1 f4       	brne	.+40     	; 0x3118 <__floatundisf+0x5c>
    30f0:	3b 15       	cp	r19, r11
    30f2:	91 f4       	brne	.+36     	; 0x3118 <__floatundisf+0x5c>
    30f4:	4a 15       	cp	r20, r10
    30f6:	81 f4       	brne	.+32     	; 0x3118 <__floatundisf+0x5c>
    30f8:	59 15       	cp	r21, r9
    30fa:	71 f4       	brne	.+28     	; 0x3118 <__floatundisf+0x5c>
    30fc:	68 15       	cp	r22, r8
    30fe:	61 f4       	brne	.+24     	; 0x3118 <__floatundisf+0x5c>
    3100:	73 15       	cp	r23, r3
    3102:	51 f4       	brne	.+20     	; 0x3118 <__floatundisf+0x5c>
    3104:	82 15       	cp	r24, r2
    3106:	41 f4       	brne	.+16     	; 0x3118 <__floatundisf+0x5c>
    3108:	aa 81       	ldd	r26, Y+2	; 0x02
    310a:	9a 17       	cp	r25, r26
    310c:	29 f4       	brne	.+10     	; 0x3118 <__floatundisf+0x5c>
    310e:	c7 01       	movw	r24, r14
    3110:	b6 01       	movw	r22, r12
    3112:	0e 94 41 24 	call	0x4882	; 0x4882 <__floatunsisf>
    3116:	aa c0       	rjmp	.+340    	; 0x326c <__floatundisf+0x1b0>
    3118:	21 2f       	mov	r18, r17
    311a:	3b 2d       	mov	r19, r11
    311c:	4a 2d       	mov	r20, r10
    311e:	59 2d       	mov	r21, r9
    3120:	68 2d       	mov	r22, r8
    3122:	73 2d       	mov	r23, r3
    3124:	82 2d       	mov	r24, r2
    3126:	9a 81       	ldd	r25, Y+2	; 0x02
    3128:	00 e2       	ldi	r16, 0x20	; 32
    312a:	0e 94 ba 24 	call	0x4974	; 0x4974 <__lshrdi3>
    312e:	c9 01       	movw	r24, r18
    3130:	da 01       	movw	r26, r20
    3132:	80 30       	cpi	r24, 0x00	; 0
    3134:	e0 e0       	ldi	r30, 0x00	; 0
    3136:	9e 07       	cpc	r25, r30
    3138:	e1 e0       	ldi	r30, 0x01	; 1
    313a:	ae 07       	cpc	r26, r30
    313c:	e0 e0       	ldi	r30, 0x00	; 0
    313e:	be 07       	cpc	r27, r30
    3140:	80 f4       	brcc	.+32     	; 0x3162 <__floatundisf+0xa6>
    3142:	8f 3f       	cpi	r24, 0xFF	; 255
    3144:	91 05       	cpc	r25, r1
    3146:	a1 05       	cpc	r26, r1
    3148:	b1 05       	cpc	r27, r1
    314a:	31 f0       	breq	.+12     	; 0x3158 <__floatundisf+0x9c>
    314c:	28 f0       	brcs	.+10     	; 0x3158 <__floatundisf+0x9c>
    314e:	28 e0       	ldi	r18, 0x08	; 8
    3150:	30 e0       	ldi	r19, 0x00	; 0
    3152:	40 e0       	ldi	r20, 0x00	; 0
    3154:	50 e0       	ldi	r21, 0x00	; 0
    3156:	16 c0       	rjmp	.+44     	; 0x3184 <__floatundisf+0xc8>
    3158:	20 e0       	ldi	r18, 0x00	; 0
    315a:	30 e0       	ldi	r19, 0x00	; 0
    315c:	40 e0       	ldi	r20, 0x00	; 0
    315e:	50 e0       	ldi	r21, 0x00	; 0
    3160:	11 c0       	rjmp	.+34     	; 0x3184 <__floatundisf+0xc8>
    3162:	80 30       	cpi	r24, 0x00	; 0
    3164:	f0 e0       	ldi	r31, 0x00	; 0
    3166:	9f 07       	cpc	r25, r31
    3168:	f0 e0       	ldi	r31, 0x00	; 0
    316a:	af 07       	cpc	r26, r31
    316c:	f1 e0       	ldi	r31, 0x01	; 1
    316e:	bf 07       	cpc	r27, r31
    3170:	28 f0       	brcs	.+10     	; 0x317c <__floatundisf+0xc0>
    3172:	28 e1       	ldi	r18, 0x18	; 24
    3174:	30 e0       	ldi	r19, 0x00	; 0
    3176:	40 e0       	ldi	r20, 0x00	; 0
    3178:	50 e0       	ldi	r21, 0x00	; 0
    317a:	04 c0       	rjmp	.+8      	; 0x3184 <__floatundisf+0xc8>
    317c:	20 e1       	ldi	r18, 0x10	; 16
    317e:	30 e0       	ldi	r19, 0x00	; 0
    3180:	40 e0       	ldi	r20, 0x00	; 0
    3182:	50 e0       	ldi	r21, 0x00	; 0
    3184:	02 2e       	mov	r0, r18
    3186:	04 c0       	rjmp	.+8      	; 0x3190 <__floatundisf+0xd4>
    3188:	b6 95       	lsr	r27
    318a:	a7 95       	ror	r26
    318c:	97 95       	ror	r25
    318e:	87 95       	ror	r24
    3190:	0a 94       	dec	r0
    3192:	d2 f7       	brpl	.-12     	; 0x3188 <__floatundisf+0xcc>
    3194:	fc 01       	movw	r30, r24
    3196:	e2 52       	subi	r30, 0x22	; 34
    3198:	ff 4f       	sbci	r31, 0xFF	; 255
    319a:	80 81       	ld	r24, Z
    319c:	29 01       	movw	r4, r18
    319e:	3a 01       	movw	r6, r20
    31a0:	48 0e       	add	r4, r24
    31a2:	51 1c       	adc	r5, r1
    31a4:	61 1c       	adc	r6, r1
    31a6:	71 1c       	adc	r7, r1
    31a8:	49 82       	std	Y+1, r4	; 0x01
    31aa:	21 2f       	mov	r18, r17
    31ac:	3b 2d       	mov	r19, r11
    31ae:	4a 2d       	mov	r20, r10
    31b0:	59 2d       	mov	r21, r9
    31b2:	68 2d       	mov	r22, r8
    31b4:	73 2d       	mov	r23, r3
    31b6:	82 2d       	mov	r24, r2
    31b8:	9a 81       	ldd	r25, Y+2	; 0x02
    31ba:	04 2d       	mov	r16, r4
    31bc:	0e 94 ba 24 	call	0x4974	; 0x4974 <__lshrdi3>
    31c0:	c9 01       	movw	r24, r18
    31c2:	da 01       	movw	r26, r20
    31c4:	4c 01       	movw	r8, r24
    31c6:	5d 01       	movw	r10, r26
    31c8:	80 e2       	ldi	r24, 0x20	; 32
    31ca:	90 e0       	ldi	r25, 0x00	; 0
    31cc:	84 19       	sub	r24, r4
    31ce:	95 09       	sbc	r25, r5
    31d0:	04 c0       	rjmp	.+8      	; 0x31da <__floatundisf+0x11e>
    31d2:	cc 0c       	add	r12, r12
    31d4:	dd 1c       	adc	r13, r13
    31d6:	ee 1c       	adc	r14, r14
    31d8:	ff 1c       	adc	r15, r15
    31da:	8a 95       	dec	r24
    31dc:	d2 f7       	brpl	.-12     	; 0x31d2 <__floatundisf+0x116>
    31de:	c1 14       	cp	r12, r1
    31e0:	d1 04       	cpc	r13, r1
    31e2:	e1 04       	cpc	r14, r1
    31e4:	f1 04       	cpc	r15, r1
    31e6:	41 f0       	breq	.+16     	; 0x31f8 <__floatundisf+0x13c>
    31e8:	81 e0       	ldi	r24, 0x01	; 1
    31ea:	90 e0       	ldi	r25, 0x00	; 0
    31ec:	a0 e0       	ldi	r26, 0x00	; 0
    31ee:	b0 e0       	ldi	r27, 0x00	; 0
    31f0:	88 2a       	or	r8, r24
    31f2:	99 2a       	or	r9, r25
    31f4:	aa 2a       	or	r10, r26
    31f6:	bb 2a       	or	r11, r27
    31f8:	90 e2       	ldi	r25, 0x20	; 32
    31fa:	49 16       	cp	r4, r25
    31fc:	51 04       	cpc	r5, r1
    31fe:	61 04       	cpc	r6, r1
    3200:	71 04       	cpc	r7, r1
    3202:	59 f4       	brne	.+22     	; 0x321a <__floatundisf+0x15e>
    3204:	0f 2e       	mov	r0, r31
    3206:	f0 e0       	ldi	r31, 0x00	; 0
    3208:	ef 2e       	mov	r14, r31
    320a:	f0 e0       	ldi	r31, 0x00	; 0
    320c:	ff 2e       	mov	r15, r31
    320e:	f0 e8       	ldi	r31, 0x80	; 128
    3210:	0f 2f       	mov	r16, r31
    3212:	ff e4       	ldi	r31, 0x4F	; 79
    3214:	1f 2f       	mov	r17, r31
    3216:	f0 2d       	mov	r31, r0
    3218:	21 c0       	rjmp	.+66     	; 0x325c <__floatundisf+0x1a0>
    321a:	af e1       	ldi	r26, 0x1F	; 31
    321c:	4a 16       	cp	r4, r26
    321e:	51 04       	cpc	r5, r1
    3220:	61 04       	cpc	r6, r1
    3222:	71 04       	cpc	r7, r1
    3224:	59 f4       	brne	.+22     	; 0x323c <__floatundisf+0x180>
    3226:	0f 2e       	mov	r0, r31
    3228:	f0 e0       	ldi	r31, 0x00	; 0
    322a:	ef 2e       	mov	r14, r31
    322c:	f0 e0       	ldi	r31, 0x00	; 0
    322e:	ff 2e       	mov	r15, r31
    3230:	f0 e0       	ldi	r31, 0x00	; 0
    3232:	0f 2f       	mov	r16, r31
    3234:	ff e4       	ldi	r31, 0x4F	; 79
    3236:	1f 2f       	mov	r17, r31
    3238:	f0 2d       	mov	r31, r0
    323a:	10 c0       	rjmp	.+32     	; 0x325c <__floatundisf+0x1a0>
    323c:	61 e0       	ldi	r22, 0x01	; 1
    323e:	70 e0       	ldi	r23, 0x00	; 0
    3240:	80 e0       	ldi	r24, 0x00	; 0
    3242:	90 e0       	ldi	r25, 0x00	; 0
    3244:	09 80       	ldd	r0, Y+1	; 0x01
    3246:	04 c0       	rjmp	.+8      	; 0x3250 <__floatundisf+0x194>
    3248:	66 0f       	add	r22, r22
    324a:	77 1f       	adc	r23, r23
    324c:	88 1f       	adc	r24, r24
    324e:	99 1f       	adc	r25, r25
    3250:	0a 94       	dec	r0
    3252:	d2 f7       	brpl	.-12     	; 0x3248 <__floatundisf+0x18c>
    3254:	0e 94 8f 23 	call	0x471e	; 0x471e <__floatsisf>
    3258:	7b 01       	movw	r14, r22
    325a:	8c 01       	movw	r16, r24
    325c:	c5 01       	movw	r24, r10
    325e:	b4 01       	movw	r22, r8
    3260:	0e 94 41 24 	call	0x4882	; 0x4882 <__floatunsisf>
    3264:	a8 01       	movw	r20, r16
    3266:	97 01       	movw	r18, r14
    3268:	0e 94 59 21 	call	0x42b2	; 0x42b2 <__mulsf3>
    326c:	22 96       	adiw	r28, 0x02	; 2
    326e:	e2 e1       	ldi	r30, 0x12	; 18
    3270:	0c 94 f0 27 	jmp	0x4fe0	; 0x4fe0 <__epilogue_restores__>

00003274 <__udivdi3>:
    3274:	ae e5       	ldi	r26, 0x5E	; 94
    3276:	b0 e0       	ldi	r27, 0x00	; 0
    3278:	e0 e4       	ldi	r30, 0x40	; 64
    327a:	f9 e1       	ldi	r31, 0x19	; 25
    327c:	0c 94 d4 27 	jmp	0x4fa8	; 0x4fa8 <__prologue_saves__>
    3280:	a8 e0       	ldi	r26, 0x08	; 8
    3282:	4e 01       	movw	r8, r28
    3284:	08 94       	sec
    3286:	81 1c       	adc	r8, r1
    3288:	91 1c       	adc	r9, r1
    328a:	f4 01       	movw	r30, r8
    328c:	6a 2e       	mov	r6, r26
    328e:	11 92       	st	Z+, r1
    3290:	6a 94       	dec	r6
    3292:	e9 f7       	brne	.-6      	; 0x328e <__udivdi3+0x1a>
    3294:	29 83       	std	Y+1, r18	; 0x01
    3296:	3a 83       	std	Y+2, r19	; 0x02
    3298:	4b 83       	std	Y+3, r20	; 0x03
    329a:	5c 83       	std	Y+4, r21	; 0x04
    329c:	6d 83       	std	Y+5, r22	; 0x05
    329e:	7e 83       	std	Y+6, r23	; 0x06
    32a0:	8f 83       	std	Y+7, r24	; 0x07
    32a2:	98 87       	std	Y+8, r25	; 0x08
    32a4:	ce 01       	movw	r24, r28
    32a6:	09 96       	adiw	r24, 0x09	; 9
    32a8:	fc 01       	movw	r30, r24
    32aa:	11 92       	st	Z+, r1
    32ac:	aa 95       	dec	r26
    32ae:	e9 f7       	brne	.-6      	; 0x32aa <__udivdi3+0x36>
    32b0:	a9 86       	std	Y+9, r10	; 0x09
    32b2:	ba 86       	std	Y+10, r11	; 0x0a
    32b4:	cb 86       	std	Y+11, r12	; 0x0b
    32b6:	dc 86       	std	Y+12, r13	; 0x0c
    32b8:	ed 86       	std	Y+13, r14	; 0x0d
    32ba:	fe 86       	std	Y+14, r15	; 0x0e
    32bc:	0f 87       	std	Y+15, r16	; 0x0f
    32be:	18 8b       	std	Y+16, r17	; 0x10
    32c0:	29 84       	ldd	r2, Y+9	; 0x09
    32c2:	3a 84       	ldd	r3, Y+10	; 0x0a
    32c4:	4b 84       	ldd	r4, Y+11	; 0x0b
    32c6:	5c 84       	ldd	r5, Y+12	; 0x0c
    32c8:	ed 84       	ldd	r14, Y+13	; 0x0d
    32ca:	fe 84       	ldd	r15, Y+14	; 0x0e
    32cc:	0f 85       	ldd	r16, Y+15	; 0x0f
    32ce:	18 89       	ldd	r17, Y+16	; 0x10
    32d0:	69 80       	ldd	r6, Y+1	; 0x01
    32d2:	7a 80       	ldd	r7, Y+2	; 0x02
    32d4:	8b 80       	ldd	r8, Y+3	; 0x03
    32d6:	9c 80       	ldd	r9, Y+4	; 0x04
    32d8:	6d a6       	std	Y+45, r6	; 0x2d
    32da:	7e a6       	std	Y+46, r7	; 0x2e
    32dc:	8f a6       	std	Y+47, r8	; 0x2f
    32de:	98 aa       	std	Y+48, r9	; 0x30
    32e0:	6d 80       	ldd	r6, Y+5	; 0x05
    32e2:	7e 80       	ldd	r7, Y+6	; 0x06
    32e4:	8f 80       	ldd	r8, Y+7	; 0x07
    32e6:	98 84       	ldd	r9, Y+8	; 0x08
    32e8:	e1 14       	cp	r14, r1
    32ea:	f1 04       	cpc	r15, r1
    32ec:	01 05       	cpc	r16, r1
    32ee:	11 05       	cpc	r17, r1
    32f0:	09 f0       	breq	.+2      	; 0x32f4 <__udivdi3+0x80>
    32f2:	b3 c3       	rjmp	.+1894   	; 0x3a5a <__udivdi3+0x7e6>
    32f4:	62 14       	cp	r6, r2
    32f6:	73 04       	cpc	r7, r3
    32f8:	84 04       	cpc	r8, r4
    32fa:	95 04       	cpc	r9, r5
    32fc:	08 f0       	brcs	.+2      	; 0x3300 <__udivdi3+0x8c>
    32fe:	3d c1       	rjmp	.+634    	; 0x357a <__udivdi3+0x306>
    3300:	00 e0       	ldi	r16, 0x00	; 0
    3302:	20 16       	cp	r2, r16
    3304:	00 e0       	ldi	r16, 0x00	; 0
    3306:	30 06       	cpc	r3, r16
    3308:	01 e0       	ldi	r16, 0x01	; 1
    330a:	40 06       	cpc	r4, r16
    330c:	00 e0       	ldi	r16, 0x00	; 0
    330e:	50 06       	cpc	r5, r16
    3310:	88 f4       	brcc	.+34     	; 0x3334 <__udivdi3+0xc0>
    3312:	1f ef       	ldi	r17, 0xFF	; 255
    3314:	21 16       	cp	r2, r17
    3316:	31 04       	cpc	r3, r1
    3318:	41 04       	cpc	r4, r1
    331a:	51 04       	cpc	r5, r1
    331c:	39 f0       	breq	.+14     	; 0x332c <__udivdi3+0xb8>
    331e:	30 f0       	brcs	.+12     	; 0x332c <__udivdi3+0xb8>
    3320:	48 e0       	ldi	r20, 0x08	; 8
    3322:	e4 2e       	mov	r14, r20
    3324:	f1 2c       	mov	r15, r1
    3326:	01 2d       	mov	r16, r1
    3328:	11 2d       	mov	r17, r1
    332a:	18 c0       	rjmp	.+48     	; 0x335c <__udivdi3+0xe8>
    332c:	ee 24       	eor	r14, r14
    332e:	ff 24       	eor	r15, r15
    3330:	87 01       	movw	r16, r14
    3332:	14 c0       	rjmp	.+40     	; 0x335c <__udivdi3+0xe8>
    3334:	20 e0       	ldi	r18, 0x00	; 0
    3336:	22 16       	cp	r2, r18
    3338:	20 e0       	ldi	r18, 0x00	; 0
    333a:	32 06       	cpc	r3, r18
    333c:	20 e0       	ldi	r18, 0x00	; 0
    333e:	42 06       	cpc	r4, r18
    3340:	21 e0       	ldi	r18, 0x01	; 1
    3342:	52 06       	cpc	r5, r18
    3344:	30 f0       	brcs	.+12     	; 0x3352 <__udivdi3+0xde>
    3346:	38 e1       	ldi	r19, 0x18	; 24
    3348:	e3 2e       	mov	r14, r19
    334a:	f1 2c       	mov	r15, r1
    334c:	01 2d       	mov	r16, r1
    334e:	11 2d       	mov	r17, r1
    3350:	05 c0       	rjmp	.+10     	; 0x335c <__udivdi3+0xe8>
    3352:	20 e1       	ldi	r18, 0x10	; 16
    3354:	e2 2e       	mov	r14, r18
    3356:	f1 2c       	mov	r15, r1
    3358:	01 2d       	mov	r16, r1
    335a:	11 2d       	mov	r17, r1
    335c:	d2 01       	movw	r26, r4
    335e:	c1 01       	movw	r24, r2
    3360:	0e 2c       	mov	r0, r14
    3362:	04 c0       	rjmp	.+8      	; 0x336c <__udivdi3+0xf8>
    3364:	b6 95       	lsr	r27
    3366:	a7 95       	ror	r26
    3368:	97 95       	ror	r25
    336a:	87 95       	ror	r24
    336c:	0a 94       	dec	r0
    336e:	d2 f7       	brpl	.-12     	; 0x3364 <__udivdi3+0xf0>
    3370:	82 52       	subi	r24, 0x22	; 34
    3372:	9f 4f       	sbci	r25, 0xFF	; 255
    3374:	dc 01       	movw	r26, r24
    3376:	2c 91       	ld	r18, X
    3378:	80 e2       	ldi	r24, 0x20	; 32
    337a:	90 e0       	ldi	r25, 0x00	; 0
    337c:	a0 e0       	ldi	r26, 0x00	; 0
    337e:	b0 e0       	ldi	r27, 0x00	; 0
    3380:	8e 19       	sub	r24, r14
    3382:	9f 09       	sbc	r25, r15
    3384:	a0 0b       	sbc	r26, r16
    3386:	b1 0b       	sbc	r27, r17
    3388:	7c 01       	movw	r14, r24
    338a:	8d 01       	movw	r16, r26
    338c:	e2 1a       	sub	r14, r18
    338e:	f1 08       	sbc	r15, r1
    3390:	01 09       	sbc	r16, r1
    3392:	11 09       	sbc	r17, r1
    3394:	e1 14       	cp	r14, r1
    3396:	f1 04       	cpc	r15, r1
    3398:	01 05       	cpc	r16, r1
    339a:	11 05       	cpc	r17, r1
    339c:	a1 f1       	breq	.+104    	; 0x3406 <__udivdi3+0x192>
    339e:	0e 2c       	mov	r0, r14
    33a0:	04 c0       	rjmp	.+8      	; 0x33aa <__udivdi3+0x136>
    33a2:	22 0c       	add	r2, r2
    33a4:	33 1c       	adc	r3, r3
    33a6:	44 1c       	adc	r4, r4
    33a8:	55 1c       	adc	r5, r5
    33aa:	0a 94       	dec	r0
    33ac:	d2 f7       	brpl	.-12     	; 0x33a2 <__udivdi3+0x12e>
    33ae:	a4 01       	movw	r20, r8
    33b0:	93 01       	movw	r18, r6
    33b2:	0e 2c       	mov	r0, r14
    33b4:	04 c0       	rjmp	.+8      	; 0x33be <__udivdi3+0x14a>
    33b6:	22 0f       	add	r18, r18
    33b8:	33 1f       	adc	r19, r19
    33ba:	44 1f       	adc	r20, r20
    33bc:	55 1f       	adc	r21, r21
    33be:	0a 94       	dec	r0
    33c0:	d2 f7       	brpl	.-12     	; 0x33b6 <__udivdi3+0x142>
    33c2:	80 e2       	ldi	r24, 0x20	; 32
    33c4:	90 e0       	ldi	r25, 0x00	; 0
    33c6:	8e 19       	sub	r24, r14
    33c8:	9f 09       	sbc	r25, r15
    33ca:	6d a4       	ldd	r6, Y+45	; 0x2d
    33cc:	7e a4       	ldd	r7, Y+46	; 0x2e
    33ce:	8f a4       	ldd	r8, Y+47	; 0x2f
    33d0:	98 a8       	ldd	r9, Y+48	; 0x30
    33d2:	04 c0       	rjmp	.+8      	; 0x33dc <__udivdi3+0x168>
    33d4:	96 94       	lsr	r9
    33d6:	87 94       	ror	r8
    33d8:	77 94       	ror	r7
    33da:	67 94       	ror	r6
    33dc:	8a 95       	dec	r24
    33de:	d2 f7       	brpl	.-12     	; 0x33d4 <__udivdi3+0x160>
    33e0:	62 2a       	or	r6, r18
    33e2:	73 2a       	or	r7, r19
    33e4:	84 2a       	or	r8, r20
    33e6:	95 2a       	or	r9, r21
    33e8:	ad a4       	ldd	r10, Y+45	; 0x2d
    33ea:	be a4       	ldd	r11, Y+46	; 0x2e
    33ec:	cf a4       	ldd	r12, Y+47	; 0x2f
    33ee:	d8 a8       	ldd	r13, Y+48	; 0x30
    33f0:	04 c0       	rjmp	.+8      	; 0x33fa <__udivdi3+0x186>
    33f2:	aa 0c       	add	r10, r10
    33f4:	bb 1c       	adc	r11, r11
    33f6:	cc 1c       	adc	r12, r12
    33f8:	dd 1c       	adc	r13, r13
    33fa:	ea 94       	dec	r14
    33fc:	d2 f7       	brpl	.-12     	; 0x33f2 <__udivdi3+0x17e>
    33fe:	ad a6       	std	Y+45, r10	; 0x2d
    3400:	be a6       	std	Y+46, r11	; 0x2e
    3402:	cf a6       	std	Y+47, r12	; 0x2f
    3404:	d8 aa       	std	Y+48, r13	; 0x30
    3406:	62 01       	movw	r12, r4
    3408:	ee 24       	eor	r14, r14
    340a:	ff 24       	eor	r15, r15
    340c:	cd aa       	std	Y+53, r12	; 0x35
    340e:	de aa       	std	Y+54, r13	; 0x36
    3410:	ef aa       	std	Y+55, r14	; 0x37
    3412:	f8 ae       	std	Y+56, r15	; 0x38
    3414:	92 01       	movw	r18, r4
    3416:	81 01       	movw	r16, r2
    3418:	20 70       	andi	r18, 0x00	; 0
    341a:	30 70       	andi	r19, 0x00	; 0
    341c:	09 af       	std	Y+57, r16	; 0x39
    341e:	1a af       	std	Y+58, r17	; 0x3a
    3420:	2b af       	std	Y+59, r18	; 0x3b
    3422:	3c af       	std	Y+60, r19	; 0x3c
    3424:	c4 01       	movw	r24, r8
    3426:	b3 01       	movw	r22, r6
    3428:	a7 01       	movw	r20, r14
    342a:	96 01       	movw	r18, r12
    342c:	0e 94 b2 27 	call	0x4f64	; 0x4f64 <__udivmodsi4>
    3430:	7b 01       	movw	r14, r22
    3432:	8c 01       	movw	r16, r24
    3434:	c4 01       	movw	r24, r8
    3436:	b3 01       	movw	r22, r6
    3438:	2d a9       	ldd	r18, Y+53	; 0x35
    343a:	3e a9       	ldd	r19, Y+54	; 0x36
    343c:	4f a9       	ldd	r20, Y+55	; 0x37
    343e:	58 ad       	ldd	r21, Y+56	; 0x38
    3440:	0e 94 b2 27 	call	0x4f64	; 0x4f64 <__udivmodsi4>
    3444:	c9 01       	movw	r24, r18
    3446:	da 01       	movw	r26, r20
    3448:	3c 01       	movw	r6, r24
    344a:	4d 01       	movw	r8, r26
    344c:	c4 01       	movw	r24, r8
    344e:	b3 01       	movw	r22, r6
    3450:	29 ad       	ldd	r18, Y+57	; 0x39
    3452:	3a ad       	ldd	r19, Y+58	; 0x3a
    3454:	4b ad       	ldd	r20, Y+59	; 0x3b
    3456:	5c ad       	ldd	r21, Y+60	; 0x3c
    3458:	0e 94 93 27 	call	0x4f26	; 0x4f26 <__mulsi3>
    345c:	9b 01       	movw	r18, r22
    345e:	ac 01       	movw	r20, r24
    3460:	87 01       	movw	r16, r14
    3462:	ff 24       	eor	r15, r15
    3464:	ee 24       	eor	r14, r14
    3466:	ad a4       	ldd	r10, Y+45	; 0x2d
    3468:	be a4       	ldd	r11, Y+46	; 0x2e
    346a:	cf a4       	ldd	r12, Y+47	; 0x2f
    346c:	d8 a8       	ldd	r13, Y+48	; 0x30
    346e:	c6 01       	movw	r24, r12
    3470:	aa 27       	eor	r26, r26
    3472:	bb 27       	eor	r27, r27
    3474:	57 01       	movw	r10, r14
    3476:	68 01       	movw	r12, r16
    3478:	a8 2a       	or	r10, r24
    347a:	b9 2a       	or	r11, r25
    347c:	ca 2a       	or	r12, r26
    347e:	db 2a       	or	r13, r27
    3480:	a2 16       	cp	r10, r18
    3482:	b3 06       	cpc	r11, r19
    3484:	c4 06       	cpc	r12, r20
    3486:	d5 06       	cpc	r13, r21
    3488:	e0 f4       	brcc	.+56     	; 0x34c2 <__udivdi3+0x24e>
    348a:	08 94       	sec
    348c:	61 08       	sbc	r6, r1
    348e:	71 08       	sbc	r7, r1
    3490:	81 08       	sbc	r8, r1
    3492:	91 08       	sbc	r9, r1
    3494:	a2 0c       	add	r10, r2
    3496:	b3 1c       	adc	r11, r3
    3498:	c4 1c       	adc	r12, r4
    349a:	d5 1c       	adc	r13, r5
    349c:	a2 14       	cp	r10, r2
    349e:	b3 04       	cpc	r11, r3
    34a0:	c4 04       	cpc	r12, r4
    34a2:	d5 04       	cpc	r13, r5
    34a4:	70 f0       	brcs	.+28     	; 0x34c2 <__udivdi3+0x24e>
    34a6:	a2 16       	cp	r10, r18
    34a8:	b3 06       	cpc	r11, r19
    34aa:	c4 06       	cpc	r12, r20
    34ac:	d5 06       	cpc	r13, r21
    34ae:	48 f4       	brcc	.+18     	; 0x34c2 <__udivdi3+0x24e>
    34b0:	08 94       	sec
    34b2:	61 08       	sbc	r6, r1
    34b4:	71 08       	sbc	r7, r1
    34b6:	81 08       	sbc	r8, r1
    34b8:	91 08       	sbc	r9, r1
    34ba:	a2 0c       	add	r10, r2
    34bc:	b3 1c       	adc	r11, r3
    34be:	c4 1c       	adc	r12, r4
    34c0:	d5 1c       	adc	r13, r5
    34c2:	a2 1a       	sub	r10, r18
    34c4:	b3 0a       	sbc	r11, r19
    34c6:	c4 0a       	sbc	r12, r20
    34c8:	d5 0a       	sbc	r13, r21
    34ca:	c6 01       	movw	r24, r12
    34cc:	b5 01       	movw	r22, r10
    34ce:	2d a9       	ldd	r18, Y+53	; 0x35
    34d0:	3e a9       	ldd	r19, Y+54	; 0x36
    34d2:	4f a9       	ldd	r20, Y+55	; 0x37
    34d4:	58 ad       	ldd	r21, Y+56	; 0x38
    34d6:	0e 94 b2 27 	call	0x4f64	; 0x4f64 <__udivmodsi4>
    34da:	7b 01       	movw	r14, r22
    34dc:	8c 01       	movw	r16, r24
    34de:	c6 01       	movw	r24, r12
    34e0:	b5 01       	movw	r22, r10
    34e2:	2d a9       	ldd	r18, Y+53	; 0x35
    34e4:	3e a9       	ldd	r19, Y+54	; 0x36
    34e6:	4f a9       	ldd	r20, Y+55	; 0x37
    34e8:	58 ad       	ldd	r21, Y+56	; 0x38
    34ea:	0e 94 b2 27 	call	0x4f64	; 0x4f64 <__udivmodsi4>
    34ee:	c9 01       	movw	r24, r18
    34f0:	da 01       	movw	r26, r20
    34f2:	5c 01       	movw	r10, r24
    34f4:	6d 01       	movw	r12, r26
    34f6:	c6 01       	movw	r24, r12
    34f8:	b5 01       	movw	r22, r10
    34fa:	29 ad       	ldd	r18, Y+57	; 0x39
    34fc:	3a ad       	ldd	r19, Y+58	; 0x3a
    34fe:	4b ad       	ldd	r20, Y+59	; 0x3b
    3500:	5c ad       	ldd	r21, Y+60	; 0x3c
    3502:	0e 94 93 27 	call	0x4f26	; 0x4f26 <__mulsi3>
    3506:	9b 01       	movw	r18, r22
    3508:	ac 01       	movw	r20, r24
    350a:	87 01       	movw	r16, r14
    350c:	ff 24       	eor	r15, r15
    350e:	ee 24       	eor	r14, r14
    3510:	8d a5       	ldd	r24, Y+45	; 0x2d
    3512:	9e a5       	ldd	r25, Y+46	; 0x2e
    3514:	af a5       	ldd	r26, Y+47	; 0x2f
    3516:	b8 a9       	ldd	r27, Y+48	; 0x30
    3518:	a0 70       	andi	r26, 0x00	; 0
    351a:	b0 70       	andi	r27, 0x00	; 0
    351c:	e8 2a       	or	r14, r24
    351e:	f9 2a       	or	r15, r25
    3520:	0a 2b       	or	r16, r26
    3522:	1b 2b       	or	r17, r27
    3524:	e2 16       	cp	r14, r18
    3526:	f3 06       	cpc	r15, r19
    3528:	04 07       	cpc	r16, r20
    352a:	15 07       	cpc	r17, r21
    352c:	c0 f4       	brcc	.+48     	; 0x355e <__udivdi3+0x2ea>
    352e:	08 94       	sec
    3530:	a1 08       	sbc	r10, r1
    3532:	b1 08       	sbc	r11, r1
    3534:	c1 08       	sbc	r12, r1
    3536:	d1 08       	sbc	r13, r1
    3538:	e2 0c       	add	r14, r2
    353a:	f3 1c       	adc	r15, r3
    353c:	04 1d       	adc	r16, r4
    353e:	15 1d       	adc	r17, r5
    3540:	e2 14       	cp	r14, r2
    3542:	f3 04       	cpc	r15, r3
    3544:	04 05       	cpc	r16, r4
    3546:	15 05       	cpc	r17, r5
    3548:	50 f0       	brcs	.+20     	; 0x355e <__udivdi3+0x2ea>
    354a:	e2 16       	cp	r14, r18
    354c:	f3 06       	cpc	r15, r19
    354e:	04 07       	cpc	r16, r20
    3550:	15 07       	cpc	r17, r21
    3552:	28 f4       	brcc	.+10     	; 0x355e <__udivdi3+0x2ea>
    3554:	08 94       	sec
    3556:	a1 08       	sbc	r10, r1
    3558:	b1 08       	sbc	r11, r1
    355a:	c1 08       	sbc	r12, r1
    355c:	d1 08       	sbc	r13, r1
    355e:	d3 01       	movw	r26, r6
    3560:	99 27       	eor	r25, r25
    3562:	88 27       	eor	r24, r24
    3564:	86 01       	movw	r16, r12
    3566:	75 01       	movw	r14, r10
    3568:	e8 2a       	or	r14, r24
    356a:	f9 2a       	or	r15, r25
    356c:	0a 2b       	or	r16, r26
    356e:	1b 2b       	or	r17, r27
    3570:	e9 aa       	std	Y+49, r14	; 0x31
    3572:	fa aa       	std	Y+50, r15	; 0x32
    3574:	0b ab       	std	Y+51, r16	; 0x33
    3576:	1c ab       	std	Y+52, r17	; 0x34
    3578:	cf c4       	rjmp	.+2462   	; 0x3f18 <__udivdi3+0xca4>
    357a:	21 14       	cp	r2, r1
    357c:	31 04       	cpc	r3, r1
    357e:	41 04       	cpc	r4, r1
    3580:	51 04       	cpc	r5, r1
    3582:	71 f4       	brne	.+28     	; 0x35a0 <__udivdi3+0x32c>
    3584:	61 e0       	ldi	r22, 0x01	; 1
    3586:	70 e0       	ldi	r23, 0x00	; 0
    3588:	80 e0       	ldi	r24, 0x00	; 0
    358a:	90 e0       	ldi	r25, 0x00	; 0
    358c:	20 e0       	ldi	r18, 0x00	; 0
    358e:	30 e0       	ldi	r19, 0x00	; 0
    3590:	40 e0       	ldi	r20, 0x00	; 0
    3592:	50 e0       	ldi	r21, 0x00	; 0
    3594:	0e 94 b2 27 	call	0x4f64	; 0x4f64 <__udivmodsi4>
    3598:	c9 01       	movw	r24, r18
    359a:	da 01       	movw	r26, r20
    359c:	1c 01       	movw	r2, r24
    359e:	2d 01       	movw	r4, r26
    35a0:	00 e0       	ldi	r16, 0x00	; 0
    35a2:	20 16       	cp	r2, r16
    35a4:	00 e0       	ldi	r16, 0x00	; 0
    35a6:	30 06       	cpc	r3, r16
    35a8:	01 e0       	ldi	r16, 0x01	; 1
    35aa:	40 06       	cpc	r4, r16
    35ac:	00 e0       	ldi	r16, 0x00	; 0
    35ae:	50 06       	cpc	r5, r16
    35b0:	88 f4       	brcc	.+34     	; 0x35d4 <__udivdi3+0x360>
    35b2:	1f ef       	ldi	r17, 0xFF	; 255
    35b4:	21 16       	cp	r2, r17
    35b6:	31 04       	cpc	r3, r1
    35b8:	41 04       	cpc	r4, r1
    35ba:	51 04       	cpc	r5, r1
    35bc:	31 f0       	breq	.+12     	; 0x35ca <__udivdi3+0x356>
    35be:	28 f0       	brcs	.+10     	; 0x35ca <__udivdi3+0x356>
    35c0:	48 e0       	ldi	r20, 0x08	; 8
    35c2:	50 e0       	ldi	r21, 0x00	; 0
    35c4:	60 e0       	ldi	r22, 0x00	; 0
    35c6:	70 e0       	ldi	r23, 0x00	; 0
    35c8:	17 c0       	rjmp	.+46     	; 0x35f8 <__udivdi3+0x384>
    35ca:	40 e0       	ldi	r20, 0x00	; 0
    35cc:	50 e0       	ldi	r21, 0x00	; 0
    35ce:	60 e0       	ldi	r22, 0x00	; 0
    35d0:	70 e0       	ldi	r23, 0x00	; 0
    35d2:	12 c0       	rjmp	.+36     	; 0x35f8 <__udivdi3+0x384>
    35d4:	20 e0       	ldi	r18, 0x00	; 0
    35d6:	22 16       	cp	r2, r18
    35d8:	20 e0       	ldi	r18, 0x00	; 0
    35da:	32 06       	cpc	r3, r18
    35dc:	20 e0       	ldi	r18, 0x00	; 0
    35de:	42 06       	cpc	r4, r18
    35e0:	21 e0       	ldi	r18, 0x01	; 1
    35e2:	52 06       	cpc	r5, r18
    35e4:	28 f0       	brcs	.+10     	; 0x35f0 <__udivdi3+0x37c>
    35e6:	48 e1       	ldi	r20, 0x18	; 24
    35e8:	50 e0       	ldi	r21, 0x00	; 0
    35ea:	60 e0       	ldi	r22, 0x00	; 0
    35ec:	70 e0       	ldi	r23, 0x00	; 0
    35ee:	04 c0       	rjmp	.+8      	; 0x35f8 <__udivdi3+0x384>
    35f0:	40 e1       	ldi	r20, 0x10	; 16
    35f2:	50 e0       	ldi	r21, 0x00	; 0
    35f4:	60 e0       	ldi	r22, 0x00	; 0
    35f6:	70 e0       	ldi	r23, 0x00	; 0
    35f8:	d2 01       	movw	r26, r4
    35fa:	c1 01       	movw	r24, r2
    35fc:	04 2e       	mov	r0, r20
    35fe:	04 c0       	rjmp	.+8      	; 0x3608 <__udivdi3+0x394>
    3600:	b6 95       	lsr	r27
    3602:	a7 95       	ror	r26
    3604:	97 95       	ror	r25
    3606:	87 95       	ror	r24
    3608:	0a 94       	dec	r0
    360a:	d2 f7       	brpl	.-12     	; 0x3600 <__udivdi3+0x38c>
    360c:	82 52       	subi	r24, 0x22	; 34
    360e:	9f 4f       	sbci	r25, 0xFF	; 255
    3610:	dc 01       	movw	r26, r24
    3612:	2c 91       	ld	r18, X
    3614:	e0 e2       	ldi	r30, 0x20	; 32
    3616:	ee 2e       	mov	r14, r30
    3618:	f1 2c       	mov	r15, r1
    361a:	01 2d       	mov	r16, r1
    361c:	11 2d       	mov	r17, r1
    361e:	d8 01       	movw	r26, r16
    3620:	c7 01       	movw	r24, r14
    3622:	84 1b       	sub	r24, r20
    3624:	95 0b       	sbc	r25, r21
    3626:	a6 0b       	sbc	r26, r22
    3628:	b7 0b       	sbc	r27, r23
    362a:	82 1b       	sub	r24, r18
    362c:	91 09       	sbc	r25, r1
    362e:	a1 09       	sbc	r26, r1
    3630:	b1 09       	sbc	r27, r1
    3632:	00 97       	sbiw	r24, 0x00	; 0
    3634:	a1 05       	cpc	r26, r1
    3636:	b1 05       	cpc	r27, r1
    3638:	61 f4       	brne	.+24     	; 0x3652 <__udivdi3+0x3de>
    363a:	64 01       	movw	r12, r8
    363c:	53 01       	movw	r10, r6
    363e:	a2 18       	sub	r10, r2
    3640:	b3 08       	sbc	r11, r3
    3642:	c4 08       	sbc	r12, r4
    3644:	d5 08       	sbc	r13, r5
    3646:	31 e0       	ldi	r19, 0x01	; 1
    3648:	63 2e       	mov	r6, r19
    364a:	71 2c       	mov	r7, r1
    364c:	81 2c       	mov	r8, r1
    364e:	91 2c       	mov	r9, r1
    3650:	1e c1       	rjmp	.+572    	; 0x388e <__udivdi3+0x61a>
    3652:	6f 96       	adiw	r28, 0x1f	; 31
    3654:	8f af       	std	Y+63, r24	; 0x3f
    3656:	6f 97       	sbiw	r28, 0x1f	; 31
    3658:	08 2e       	mov	r0, r24
    365a:	04 c0       	rjmp	.+8      	; 0x3664 <__udivdi3+0x3f0>
    365c:	22 0c       	add	r2, r2
    365e:	33 1c       	adc	r3, r3
    3660:	44 1c       	adc	r4, r4
    3662:	55 1c       	adc	r5, r5
    3664:	0a 94       	dec	r0
    3666:	d2 f7       	brpl	.-12     	; 0x365c <__udivdi3+0x3e8>
    3668:	ee 2d       	mov	r30, r14
    366a:	e8 1b       	sub	r30, r24
    366c:	64 01       	movw	r12, r8
    366e:	53 01       	movw	r10, r6
    3670:	0e 2e       	mov	r0, r30
    3672:	04 c0       	rjmp	.+8      	; 0x367c <__udivdi3+0x408>
    3674:	d6 94       	lsr	r13
    3676:	c7 94       	ror	r12
    3678:	b7 94       	ror	r11
    367a:	a7 94       	ror	r10
    367c:	0a 94       	dec	r0
    367e:	d2 f7       	brpl	.-12     	; 0x3674 <__udivdi3+0x400>
    3680:	a4 01       	movw	r20, r8
    3682:	93 01       	movw	r18, r6
    3684:	6f 96       	adiw	r28, 0x1f	; 31
    3686:	0f ac       	ldd	r0, Y+63	; 0x3f
    3688:	6f 97       	sbiw	r28, 0x1f	; 31
    368a:	04 c0       	rjmp	.+8      	; 0x3694 <__udivdi3+0x420>
    368c:	22 0f       	add	r18, r18
    368e:	33 1f       	adc	r19, r19
    3690:	44 1f       	adc	r20, r20
    3692:	55 1f       	adc	r21, r21
    3694:	0a 94       	dec	r0
    3696:	d2 f7       	brpl	.-12     	; 0x368c <__udivdi3+0x418>
    3698:	6d a4       	ldd	r6, Y+45	; 0x2d
    369a:	7e a4       	ldd	r7, Y+46	; 0x2e
    369c:	8f a4       	ldd	r8, Y+47	; 0x2f
    369e:	98 a8       	ldd	r9, Y+48	; 0x30
    36a0:	0e 2e       	mov	r0, r30
    36a2:	04 c0       	rjmp	.+8      	; 0x36ac <__udivdi3+0x438>
    36a4:	96 94       	lsr	r9
    36a6:	87 94       	ror	r8
    36a8:	77 94       	ror	r7
    36aa:	67 94       	ror	r6
    36ac:	0a 94       	dec	r0
    36ae:	d2 f7       	brpl	.-12     	; 0x36a4 <__udivdi3+0x430>
    36b0:	84 01       	movw	r16, r8
    36b2:	73 01       	movw	r14, r6
    36b4:	e2 2a       	or	r14, r18
    36b6:	f3 2a       	or	r15, r19
    36b8:	04 2b       	or	r16, r20
    36ba:	15 2b       	or	r17, r21
    36bc:	e9 a6       	std	Y+41, r14	; 0x29
    36be:	fa a6       	std	Y+42, r15	; 0x2a
    36c0:	0b a7       	std	Y+43, r16	; 0x2b
    36c2:	1c a7       	std	Y+44, r17	; 0x2c
    36c4:	32 01       	movw	r6, r4
    36c6:	88 24       	eor	r8, r8
    36c8:	99 24       	eor	r9, r9
    36ca:	92 01       	movw	r18, r4
    36cc:	81 01       	movw	r16, r2
    36ce:	20 70       	andi	r18, 0x00	; 0
    36d0:	30 70       	andi	r19, 0x00	; 0
    36d2:	21 96       	adiw	r28, 0x01	; 1
    36d4:	0c af       	std	Y+60, r16	; 0x3c
    36d6:	1d af       	std	Y+61, r17	; 0x3d
    36d8:	2e af       	std	Y+62, r18	; 0x3e
    36da:	3f af       	std	Y+63, r19	; 0x3f
    36dc:	21 97       	sbiw	r28, 0x01	; 1
    36de:	c6 01       	movw	r24, r12
    36e0:	b5 01       	movw	r22, r10
    36e2:	a4 01       	movw	r20, r8
    36e4:	93 01       	movw	r18, r6
    36e6:	0e 94 b2 27 	call	0x4f64	; 0x4f64 <__udivmodsi4>
    36ea:	7b 01       	movw	r14, r22
    36ec:	8c 01       	movw	r16, r24
    36ee:	c6 01       	movw	r24, r12
    36f0:	b5 01       	movw	r22, r10
    36f2:	a4 01       	movw	r20, r8
    36f4:	93 01       	movw	r18, r6
    36f6:	0e 94 b2 27 	call	0x4f64	; 0x4f64 <__udivmodsi4>
    36fa:	c9 01       	movw	r24, r18
    36fc:	da 01       	movw	r26, r20
    36fe:	25 96       	adiw	r28, 0x05	; 5
    3700:	8c af       	std	Y+60, r24	; 0x3c
    3702:	9d af       	std	Y+61, r25	; 0x3d
    3704:	ae af       	std	Y+62, r26	; 0x3e
    3706:	bf af       	std	Y+63, r27	; 0x3f
    3708:	25 97       	sbiw	r28, 0x05	; 5
    370a:	bc 01       	movw	r22, r24
    370c:	cd 01       	movw	r24, r26
    370e:	21 96       	adiw	r28, 0x01	; 1
    3710:	2c ad       	ldd	r18, Y+60	; 0x3c
    3712:	3d ad       	ldd	r19, Y+61	; 0x3d
    3714:	4e ad       	ldd	r20, Y+62	; 0x3e
    3716:	5f ad       	ldd	r21, Y+63	; 0x3f
    3718:	21 97       	sbiw	r28, 0x01	; 1
    371a:	0e 94 93 27 	call	0x4f26	; 0x4f26 <__mulsi3>
    371e:	9b 01       	movw	r18, r22
    3720:	ac 01       	movw	r20, r24
    3722:	87 01       	movw	r16, r14
    3724:	ff 24       	eor	r15, r15
    3726:	ee 24       	eor	r14, r14
    3728:	a9 a4       	ldd	r10, Y+41	; 0x29
    372a:	ba a4       	ldd	r11, Y+42	; 0x2a
    372c:	cb a4       	ldd	r12, Y+43	; 0x2b
    372e:	dc a4       	ldd	r13, Y+44	; 0x2c
    3730:	c6 01       	movw	r24, r12
    3732:	aa 27       	eor	r26, r26
    3734:	bb 27       	eor	r27, r27
    3736:	5c 01       	movw	r10, r24
    3738:	6d 01       	movw	r12, r26
    373a:	ae 28       	or	r10, r14
    373c:	bf 28       	or	r11, r15
    373e:	c0 2a       	or	r12, r16
    3740:	d1 2a       	or	r13, r17
    3742:	a2 16       	cp	r10, r18
    3744:	b3 06       	cpc	r11, r19
    3746:	c4 06       	cpc	r12, r20
    3748:	d5 06       	cpc	r13, r21
    374a:	60 f5       	brcc	.+88     	; 0x37a4 <__udivdi3+0x530>
    374c:	25 96       	adiw	r28, 0x05	; 5
    374e:	6c ad       	ldd	r22, Y+60	; 0x3c
    3750:	7d ad       	ldd	r23, Y+61	; 0x3d
    3752:	8e ad       	ldd	r24, Y+62	; 0x3e
    3754:	9f ad       	ldd	r25, Y+63	; 0x3f
    3756:	25 97       	sbiw	r28, 0x05	; 5
    3758:	61 50       	subi	r22, 0x01	; 1
    375a:	70 40       	sbci	r23, 0x00	; 0
    375c:	80 40       	sbci	r24, 0x00	; 0
    375e:	90 40       	sbci	r25, 0x00	; 0
    3760:	25 96       	adiw	r28, 0x05	; 5
    3762:	6c af       	std	Y+60, r22	; 0x3c
    3764:	7d af       	std	Y+61, r23	; 0x3d
    3766:	8e af       	std	Y+62, r24	; 0x3e
    3768:	9f af       	std	Y+63, r25	; 0x3f
    376a:	25 97       	sbiw	r28, 0x05	; 5
    376c:	a2 0c       	add	r10, r2
    376e:	b3 1c       	adc	r11, r3
    3770:	c4 1c       	adc	r12, r4
    3772:	d5 1c       	adc	r13, r5
    3774:	a2 14       	cp	r10, r2
    3776:	b3 04       	cpc	r11, r3
    3778:	c4 04       	cpc	r12, r4
    377a:	d5 04       	cpc	r13, r5
    377c:	98 f0       	brcs	.+38     	; 0x37a4 <__udivdi3+0x530>
    377e:	a2 16       	cp	r10, r18
    3780:	b3 06       	cpc	r11, r19
    3782:	c4 06       	cpc	r12, r20
    3784:	d5 06       	cpc	r13, r21
    3786:	70 f4       	brcc	.+28     	; 0x37a4 <__udivdi3+0x530>
    3788:	61 50       	subi	r22, 0x01	; 1
    378a:	70 40       	sbci	r23, 0x00	; 0
    378c:	80 40       	sbci	r24, 0x00	; 0
    378e:	90 40       	sbci	r25, 0x00	; 0
    3790:	25 96       	adiw	r28, 0x05	; 5
    3792:	6c af       	std	Y+60, r22	; 0x3c
    3794:	7d af       	std	Y+61, r23	; 0x3d
    3796:	8e af       	std	Y+62, r24	; 0x3e
    3798:	9f af       	std	Y+63, r25	; 0x3f
    379a:	25 97       	sbiw	r28, 0x05	; 5
    379c:	a2 0c       	add	r10, r2
    379e:	b3 1c       	adc	r11, r3
    37a0:	c4 1c       	adc	r12, r4
    37a2:	d5 1c       	adc	r13, r5
    37a4:	a2 1a       	sub	r10, r18
    37a6:	b3 0a       	sbc	r11, r19
    37a8:	c4 0a       	sbc	r12, r20
    37aa:	d5 0a       	sbc	r13, r21
    37ac:	c6 01       	movw	r24, r12
    37ae:	b5 01       	movw	r22, r10
    37b0:	a4 01       	movw	r20, r8
    37b2:	93 01       	movw	r18, r6
    37b4:	0e 94 b2 27 	call	0x4f64	; 0x4f64 <__udivmodsi4>
    37b8:	7b 01       	movw	r14, r22
    37ba:	8c 01       	movw	r16, r24
    37bc:	c6 01       	movw	r24, r12
    37be:	b5 01       	movw	r22, r10
    37c0:	a4 01       	movw	r20, r8
    37c2:	93 01       	movw	r18, r6
    37c4:	0e 94 b2 27 	call	0x4f64	; 0x4f64 <__udivmodsi4>
    37c8:	c9 01       	movw	r24, r18
    37ca:	da 01       	movw	r26, r20
    37cc:	3c 01       	movw	r6, r24
    37ce:	4d 01       	movw	r8, r26
    37d0:	c4 01       	movw	r24, r8
    37d2:	b3 01       	movw	r22, r6
    37d4:	21 96       	adiw	r28, 0x01	; 1
    37d6:	2c ad       	ldd	r18, Y+60	; 0x3c
    37d8:	3d ad       	ldd	r19, Y+61	; 0x3d
    37da:	4e ad       	ldd	r20, Y+62	; 0x3e
    37dc:	5f ad       	ldd	r21, Y+63	; 0x3f
    37de:	21 97       	sbiw	r28, 0x01	; 1
    37e0:	0e 94 93 27 	call	0x4f26	; 0x4f26 <__mulsi3>
    37e4:	9b 01       	movw	r18, r22
    37e6:	ac 01       	movw	r20, r24
    37e8:	87 01       	movw	r16, r14
    37ea:	ff 24       	eor	r15, r15
    37ec:	ee 24       	eor	r14, r14
    37ee:	89 a5       	ldd	r24, Y+41	; 0x29
    37f0:	9a a5       	ldd	r25, Y+42	; 0x2a
    37f2:	ab a5       	ldd	r26, Y+43	; 0x2b
    37f4:	bc a5       	ldd	r27, Y+44	; 0x2c
    37f6:	a0 70       	andi	r26, 0x00	; 0
    37f8:	b0 70       	andi	r27, 0x00	; 0
    37fa:	57 01       	movw	r10, r14
    37fc:	68 01       	movw	r12, r16
    37fe:	a8 2a       	or	r10, r24
    3800:	b9 2a       	or	r11, r25
    3802:	ca 2a       	or	r12, r26
    3804:	db 2a       	or	r13, r27
    3806:	a2 16       	cp	r10, r18
    3808:	b3 06       	cpc	r11, r19
    380a:	c4 06       	cpc	r12, r20
    380c:	d5 06       	cpc	r13, r21
    380e:	e0 f4       	brcc	.+56     	; 0x3848 <__udivdi3+0x5d4>
    3810:	08 94       	sec
    3812:	61 08       	sbc	r6, r1
    3814:	71 08       	sbc	r7, r1
    3816:	81 08       	sbc	r8, r1
    3818:	91 08       	sbc	r9, r1
    381a:	a2 0c       	add	r10, r2
    381c:	b3 1c       	adc	r11, r3
    381e:	c4 1c       	adc	r12, r4
    3820:	d5 1c       	adc	r13, r5
    3822:	a2 14       	cp	r10, r2
    3824:	b3 04       	cpc	r11, r3
    3826:	c4 04       	cpc	r12, r4
    3828:	d5 04       	cpc	r13, r5
    382a:	70 f0       	brcs	.+28     	; 0x3848 <__udivdi3+0x5d4>
    382c:	a2 16       	cp	r10, r18
    382e:	b3 06       	cpc	r11, r19
    3830:	c4 06       	cpc	r12, r20
    3832:	d5 06       	cpc	r13, r21
    3834:	48 f4       	brcc	.+18     	; 0x3848 <__udivdi3+0x5d4>
    3836:	08 94       	sec
    3838:	61 08       	sbc	r6, r1
    383a:	71 08       	sbc	r7, r1
    383c:	81 08       	sbc	r8, r1
    383e:	91 08       	sbc	r9, r1
    3840:	a2 0c       	add	r10, r2
    3842:	b3 1c       	adc	r11, r3
    3844:	c4 1c       	adc	r12, r4
    3846:	d5 1c       	adc	r13, r5
    3848:	8d a5       	ldd	r24, Y+45	; 0x2d
    384a:	9e a5       	ldd	r25, Y+46	; 0x2e
    384c:	af a5       	ldd	r26, Y+47	; 0x2f
    384e:	b8 a9       	ldd	r27, Y+48	; 0x30
    3850:	6f 96       	adiw	r28, 0x1f	; 31
    3852:	0f ac       	ldd	r0, Y+63	; 0x3f
    3854:	6f 97       	sbiw	r28, 0x1f	; 31
    3856:	04 c0       	rjmp	.+8      	; 0x3860 <__udivdi3+0x5ec>
    3858:	88 0f       	add	r24, r24
    385a:	99 1f       	adc	r25, r25
    385c:	aa 1f       	adc	r26, r26
    385e:	bb 1f       	adc	r27, r27
    3860:	0a 94       	dec	r0
    3862:	d2 f7       	brpl	.-12     	; 0x3858 <__udivdi3+0x5e4>
    3864:	8d a7       	std	Y+45, r24	; 0x2d
    3866:	9e a7       	std	Y+46, r25	; 0x2e
    3868:	af a7       	std	Y+47, r26	; 0x2f
    386a:	b8 ab       	std	Y+48, r27	; 0x30
    386c:	a2 1a       	sub	r10, r18
    386e:	b3 0a       	sbc	r11, r19
    3870:	c4 0a       	sbc	r12, r20
    3872:	d5 0a       	sbc	r13, r21
    3874:	25 96       	adiw	r28, 0x05	; 5
    3876:	ec ac       	ldd	r14, Y+60	; 0x3c
    3878:	fd ac       	ldd	r15, Y+61	; 0x3d
    387a:	0e ad       	ldd	r16, Y+62	; 0x3e
    387c:	1f ad       	ldd	r17, Y+63	; 0x3f
    387e:	25 97       	sbiw	r28, 0x05	; 5
    3880:	d7 01       	movw	r26, r14
    3882:	99 27       	eor	r25, r25
    3884:	88 27       	eor	r24, r24
    3886:	68 2a       	or	r6, r24
    3888:	79 2a       	or	r7, r25
    388a:	8a 2a       	or	r8, r26
    388c:	9b 2a       	or	r9, r27
    388e:	82 01       	movw	r16, r4
    3890:	22 27       	eor	r18, r18
    3892:	33 27       	eor	r19, r19
    3894:	29 96       	adiw	r28, 0x09	; 9
    3896:	0c af       	std	Y+60, r16	; 0x3c
    3898:	1d af       	std	Y+61, r17	; 0x3d
    389a:	2e af       	std	Y+62, r18	; 0x3e
    389c:	3f af       	std	Y+63, r19	; 0x3f
    389e:	29 97       	sbiw	r28, 0x09	; 9
    38a0:	a2 01       	movw	r20, r4
    38a2:	91 01       	movw	r18, r2
    38a4:	40 70       	andi	r20, 0x00	; 0
    38a6:	50 70       	andi	r21, 0x00	; 0
    38a8:	2d 96       	adiw	r28, 0x0d	; 13
    38aa:	2c af       	std	Y+60, r18	; 0x3c
    38ac:	3d af       	std	Y+61, r19	; 0x3d
    38ae:	4e af       	std	Y+62, r20	; 0x3e
    38b0:	5f af       	std	Y+63, r21	; 0x3f
    38b2:	2d 97       	sbiw	r28, 0x0d	; 13
    38b4:	c6 01       	movw	r24, r12
    38b6:	b5 01       	movw	r22, r10
    38b8:	29 96       	adiw	r28, 0x09	; 9
    38ba:	2c ad       	ldd	r18, Y+60	; 0x3c
    38bc:	3d ad       	ldd	r19, Y+61	; 0x3d
    38be:	4e ad       	ldd	r20, Y+62	; 0x3e
    38c0:	5f ad       	ldd	r21, Y+63	; 0x3f
    38c2:	29 97       	sbiw	r28, 0x09	; 9
    38c4:	0e 94 b2 27 	call	0x4f64	; 0x4f64 <__udivmodsi4>
    38c8:	7b 01       	movw	r14, r22
    38ca:	8c 01       	movw	r16, r24
    38cc:	c6 01       	movw	r24, r12
    38ce:	b5 01       	movw	r22, r10
    38d0:	29 96       	adiw	r28, 0x09	; 9
    38d2:	2c ad       	ldd	r18, Y+60	; 0x3c
    38d4:	3d ad       	ldd	r19, Y+61	; 0x3d
    38d6:	4e ad       	ldd	r20, Y+62	; 0x3e
    38d8:	5f ad       	ldd	r21, Y+63	; 0x3f
    38da:	29 97       	sbiw	r28, 0x09	; 9
    38dc:	0e 94 b2 27 	call	0x4f64	; 0x4f64 <__udivmodsi4>
    38e0:	c9 01       	movw	r24, r18
    38e2:	da 01       	movw	r26, r20
    38e4:	61 96       	adiw	r28, 0x11	; 17
    38e6:	8c af       	std	Y+60, r24	; 0x3c
    38e8:	9d af       	std	Y+61, r25	; 0x3d
    38ea:	ae af       	std	Y+62, r26	; 0x3e
    38ec:	bf af       	std	Y+63, r27	; 0x3f
    38ee:	61 97       	sbiw	r28, 0x11	; 17
    38f0:	bc 01       	movw	r22, r24
    38f2:	cd 01       	movw	r24, r26
    38f4:	2d 96       	adiw	r28, 0x0d	; 13
    38f6:	2c ad       	ldd	r18, Y+60	; 0x3c
    38f8:	3d ad       	ldd	r19, Y+61	; 0x3d
    38fa:	4e ad       	ldd	r20, Y+62	; 0x3e
    38fc:	5f ad       	ldd	r21, Y+63	; 0x3f
    38fe:	2d 97       	sbiw	r28, 0x0d	; 13
    3900:	0e 94 93 27 	call	0x4f26	; 0x4f26 <__mulsi3>
    3904:	9b 01       	movw	r18, r22
    3906:	ac 01       	movw	r20, r24
    3908:	87 01       	movw	r16, r14
    390a:	ff 24       	eor	r15, r15
    390c:	ee 24       	eor	r14, r14
    390e:	ad a4       	ldd	r10, Y+45	; 0x2d
    3910:	be a4       	ldd	r11, Y+46	; 0x2e
    3912:	cf a4       	ldd	r12, Y+47	; 0x2f
    3914:	d8 a8       	ldd	r13, Y+48	; 0x30
    3916:	c6 01       	movw	r24, r12
    3918:	aa 27       	eor	r26, r26
    391a:	bb 27       	eor	r27, r27
    391c:	57 01       	movw	r10, r14
    391e:	68 01       	movw	r12, r16
    3920:	a8 2a       	or	r10, r24
    3922:	b9 2a       	or	r11, r25
    3924:	ca 2a       	or	r12, r26
    3926:	db 2a       	or	r13, r27
    3928:	a2 16       	cp	r10, r18
    392a:	b3 06       	cpc	r11, r19
    392c:	c4 06       	cpc	r12, r20
    392e:	d5 06       	cpc	r13, r21
    3930:	60 f5       	brcc	.+88     	; 0x398a <__udivdi3+0x716>
    3932:	61 96       	adiw	r28, 0x11	; 17
    3934:	6c ad       	ldd	r22, Y+60	; 0x3c
    3936:	7d ad       	ldd	r23, Y+61	; 0x3d
    3938:	8e ad       	ldd	r24, Y+62	; 0x3e
    393a:	9f ad       	ldd	r25, Y+63	; 0x3f
    393c:	61 97       	sbiw	r28, 0x11	; 17
    393e:	61 50       	subi	r22, 0x01	; 1
    3940:	70 40       	sbci	r23, 0x00	; 0
    3942:	80 40       	sbci	r24, 0x00	; 0
    3944:	90 40       	sbci	r25, 0x00	; 0
    3946:	61 96       	adiw	r28, 0x11	; 17
    3948:	6c af       	std	Y+60, r22	; 0x3c
    394a:	7d af       	std	Y+61, r23	; 0x3d
    394c:	8e af       	std	Y+62, r24	; 0x3e
    394e:	9f af       	std	Y+63, r25	; 0x3f
    3950:	61 97       	sbiw	r28, 0x11	; 17
    3952:	a2 0c       	add	r10, r2
    3954:	b3 1c       	adc	r11, r3
    3956:	c4 1c       	adc	r12, r4
    3958:	d5 1c       	adc	r13, r5
    395a:	a2 14       	cp	r10, r2
    395c:	b3 04       	cpc	r11, r3
    395e:	c4 04       	cpc	r12, r4
    3960:	d5 04       	cpc	r13, r5
    3962:	98 f0       	brcs	.+38     	; 0x398a <__udivdi3+0x716>
    3964:	a2 16       	cp	r10, r18
    3966:	b3 06       	cpc	r11, r19
    3968:	c4 06       	cpc	r12, r20
    396a:	d5 06       	cpc	r13, r21
    396c:	70 f4       	brcc	.+28     	; 0x398a <__udivdi3+0x716>
    396e:	61 50       	subi	r22, 0x01	; 1
    3970:	70 40       	sbci	r23, 0x00	; 0
    3972:	80 40       	sbci	r24, 0x00	; 0
    3974:	90 40       	sbci	r25, 0x00	; 0
    3976:	61 96       	adiw	r28, 0x11	; 17
    3978:	6c af       	std	Y+60, r22	; 0x3c
    397a:	7d af       	std	Y+61, r23	; 0x3d
    397c:	8e af       	std	Y+62, r24	; 0x3e
    397e:	9f af       	std	Y+63, r25	; 0x3f
    3980:	61 97       	sbiw	r28, 0x11	; 17
    3982:	a2 0c       	add	r10, r2
    3984:	b3 1c       	adc	r11, r3
    3986:	c4 1c       	adc	r12, r4
    3988:	d5 1c       	adc	r13, r5
    398a:	a2 1a       	sub	r10, r18
    398c:	b3 0a       	sbc	r11, r19
    398e:	c4 0a       	sbc	r12, r20
    3990:	d5 0a       	sbc	r13, r21
    3992:	c6 01       	movw	r24, r12
    3994:	b5 01       	movw	r22, r10
    3996:	29 96       	adiw	r28, 0x09	; 9
    3998:	2c ad       	ldd	r18, Y+60	; 0x3c
    399a:	3d ad       	ldd	r19, Y+61	; 0x3d
    399c:	4e ad       	ldd	r20, Y+62	; 0x3e
    399e:	5f ad       	ldd	r21, Y+63	; 0x3f
    39a0:	29 97       	sbiw	r28, 0x09	; 9
    39a2:	0e 94 b2 27 	call	0x4f64	; 0x4f64 <__udivmodsi4>
    39a6:	7b 01       	movw	r14, r22
    39a8:	8c 01       	movw	r16, r24
    39aa:	c6 01       	movw	r24, r12
    39ac:	b5 01       	movw	r22, r10
    39ae:	29 96       	adiw	r28, 0x09	; 9
    39b0:	2c ad       	ldd	r18, Y+60	; 0x3c
    39b2:	3d ad       	ldd	r19, Y+61	; 0x3d
    39b4:	4e ad       	ldd	r20, Y+62	; 0x3e
    39b6:	5f ad       	ldd	r21, Y+63	; 0x3f
    39b8:	29 97       	sbiw	r28, 0x09	; 9
    39ba:	0e 94 b2 27 	call	0x4f64	; 0x4f64 <__udivmodsi4>
    39be:	c9 01       	movw	r24, r18
    39c0:	da 01       	movw	r26, r20
    39c2:	5c 01       	movw	r10, r24
    39c4:	6d 01       	movw	r12, r26
    39c6:	c6 01       	movw	r24, r12
    39c8:	b5 01       	movw	r22, r10
    39ca:	2d 96       	adiw	r28, 0x0d	; 13
    39cc:	2c ad       	ldd	r18, Y+60	; 0x3c
    39ce:	3d ad       	ldd	r19, Y+61	; 0x3d
    39d0:	4e ad       	ldd	r20, Y+62	; 0x3e
    39d2:	5f ad       	ldd	r21, Y+63	; 0x3f
    39d4:	2d 97       	sbiw	r28, 0x0d	; 13
    39d6:	0e 94 93 27 	call	0x4f26	; 0x4f26 <__mulsi3>
    39da:	9b 01       	movw	r18, r22
    39dc:	ac 01       	movw	r20, r24
    39de:	87 01       	movw	r16, r14
    39e0:	ff 24       	eor	r15, r15
    39e2:	ee 24       	eor	r14, r14
    39e4:	8d a5       	ldd	r24, Y+45	; 0x2d
    39e6:	9e a5       	ldd	r25, Y+46	; 0x2e
    39e8:	af a5       	ldd	r26, Y+47	; 0x2f
    39ea:	b8 a9       	ldd	r27, Y+48	; 0x30
    39ec:	a0 70       	andi	r26, 0x00	; 0
    39ee:	b0 70       	andi	r27, 0x00	; 0
    39f0:	e8 2a       	or	r14, r24
    39f2:	f9 2a       	or	r15, r25
    39f4:	0a 2b       	or	r16, r26
    39f6:	1b 2b       	or	r17, r27
    39f8:	e2 16       	cp	r14, r18
    39fa:	f3 06       	cpc	r15, r19
    39fc:	04 07       	cpc	r16, r20
    39fe:	15 07       	cpc	r17, r21
    3a00:	c0 f4       	brcc	.+48     	; 0x3a32 <__udivdi3+0x7be>
    3a02:	08 94       	sec
    3a04:	a1 08       	sbc	r10, r1
    3a06:	b1 08       	sbc	r11, r1
    3a08:	c1 08       	sbc	r12, r1
    3a0a:	d1 08       	sbc	r13, r1
    3a0c:	e2 0c       	add	r14, r2
    3a0e:	f3 1c       	adc	r15, r3
    3a10:	04 1d       	adc	r16, r4
    3a12:	15 1d       	adc	r17, r5
    3a14:	e2 14       	cp	r14, r2
    3a16:	f3 04       	cpc	r15, r3
    3a18:	04 05       	cpc	r16, r4
    3a1a:	15 05       	cpc	r17, r5
    3a1c:	50 f0       	brcs	.+20     	; 0x3a32 <__udivdi3+0x7be>
    3a1e:	e2 16       	cp	r14, r18
    3a20:	f3 06       	cpc	r15, r19
    3a22:	04 07       	cpc	r16, r20
    3a24:	15 07       	cpc	r17, r21
    3a26:	28 f4       	brcc	.+10     	; 0x3a32 <__udivdi3+0x7be>
    3a28:	08 94       	sec
    3a2a:	a1 08       	sbc	r10, r1
    3a2c:	b1 08       	sbc	r11, r1
    3a2e:	c1 08       	sbc	r12, r1
    3a30:	d1 08       	sbc	r13, r1
    3a32:	61 96       	adiw	r28, 0x11	; 17
    3a34:	ec ac       	ldd	r14, Y+60	; 0x3c
    3a36:	fd ac       	ldd	r15, Y+61	; 0x3d
    3a38:	0e ad       	ldd	r16, Y+62	; 0x3e
    3a3a:	1f ad       	ldd	r17, Y+63	; 0x3f
    3a3c:	61 97       	sbiw	r28, 0x11	; 17
    3a3e:	d7 01       	movw	r26, r14
    3a40:	99 27       	eor	r25, r25
    3a42:	88 27       	eor	r24, r24
    3a44:	96 01       	movw	r18, r12
    3a46:	85 01       	movw	r16, r10
    3a48:	08 2b       	or	r16, r24
    3a4a:	19 2b       	or	r17, r25
    3a4c:	2a 2b       	or	r18, r26
    3a4e:	3b 2b       	or	r19, r27
    3a50:	09 ab       	std	Y+49, r16	; 0x31
    3a52:	1a ab       	std	Y+50, r17	; 0x32
    3a54:	2b ab       	std	Y+51, r18	; 0x33
    3a56:	3c ab       	std	Y+52, r19	; 0x34
    3a58:	62 c2       	rjmp	.+1220   	; 0x3f1e <__udivdi3+0xcaa>
    3a5a:	6e 14       	cp	r6, r14
    3a5c:	7f 04       	cpc	r7, r15
    3a5e:	80 06       	cpc	r8, r16
    3a60:	91 06       	cpc	r9, r17
    3a62:	08 f4       	brcc	.+2      	; 0x3a66 <__udivdi3+0x7f2>
    3a64:	51 c2       	rjmp	.+1186   	; 0x3f08 <__udivdi3+0xc94>
    3a66:	20 e0       	ldi	r18, 0x00	; 0
    3a68:	e2 16       	cp	r14, r18
    3a6a:	20 e0       	ldi	r18, 0x00	; 0
    3a6c:	f2 06       	cpc	r15, r18
    3a6e:	21 e0       	ldi	r18, 0x01	; 1
    3a70:	02 07       	cpc	r16, r18
    3a72:	20 e0       	ldi	r18, 0x00	; 0
    3a74:	12 07       	cpc	r17, r18
    3a76:	88 f4       	brcc	.+34     	; 0x3a9a <__udivdi3+0x826>
    3a78:	3f ef       	ldi	r19, 0xFF	; 255
    3a7a:	e3 16       	cp	r14, r19
    3a7c:	f1 04       	cpc	r15, r1
    3a7e:	01 05       	cpc	r16, r1
    3a80:	11 05       	cpc	r17, r1
    3a82:	31 f0       	breq	.+12     	; 0x3a90 <__udivdi3+0x81c>
    3a84:	28 f0       	brcs	.+10     	; 0x3a90 <__udivdi3+0x81c>
    3a86:	48 e0       	ldi	r20, 0x08	; 8
    3a88:	50 e0       	ldi	r21, 0x00	; 0
    3a8a:	60 e0       	ldi	r22, 0x00	; 0
    3a8c:	70 e0       	ldi	r23, 0x00	; 0
    3a8e:	17 c0       	rjmp	.+46     	; 0x3abe <__udivdi3+0x84a>
    3a90:	40 e0       	ldi	r20, 0x00	; 0
    3a92:	50 e0       	ldi	r21, 0x00	; 0
    3a94:	60 e0       	ldi	r22, 0x00	; 0
    3a96:	70 e0       	ldi	r23, 0x00	; 0
    3a98:	12 c0       	rjmp	.+36     	; 0x3abe <__udivdi3+0x84a>
    3a9a:	40 e0       	ldi	r20, 0x00	; 0
    3a9c:	e4 16       	cp	r14, r20
    3a9e:	40 e0       	ldi	r20, 0x00	; 0
    3aa0:	f4 06       	cpc	r15, r20
    3aa2:	40 e0       	ldi	r20, 0x00	; 0
    3aa4:	04 07       	cpc	r16, r20
    3aa6:	41 e0       	ldi	r20, 0x01	; 1
    3aa8:	14 07       	cpc	r17, r20
    3aaa:	28 f0       	brcs	.+10     	; 0x3ab6 <__udivdi3+0x842>
    3aac:	48 e1       	ldi	r20, 0x18	; 24
    3aae:	50 e0       	ldi	r21, 0x00	; 0
    3ab0:	60 e0       	ldi	r22, 0x00	; 0
    3ab2:	70 e0       	ldi	r23, 0x00	; 0
    3ab4:	04 c0       	rjmp	.+8      	; 0x3abe <__udivdi3+0x84a>
    3ab6:	40 e1       	ldi	r20, 0x10	; 16
    3ab8:	50 e0       	ldi	r21, 0x00	; 0
    3aba:	60 e0       	ldi	r22, 0x00	; 0
    3abc:	70 e0       	ldi	r23, 0x00	; 0
    3abe:	d8 01       	movw	r26, r16
    3ac0:	c7 01       	movw	r24, r14
    3ac2:	04 2e       	mov	r0, r20
    3ac4:	04 c0       	rjmp	.+8      	; 0x3ace <__udivdi3+0x85a>
    3ac6:	b6 95       	lsr	r27
    3ac8:	a7 95       	ror	r26
    3aca:	97 95       	ror	r25
    3acc:	87 95       	ror	r24
    3ace:	0a 94       	dec	r0
    3ad0:	d2 f7       	brpl	.-12     	; 0x3ac6 <__udivdi3+0x852>
    3ad2:	82 52       	subi	r24, 0x22	; 34
    3ad4:	9f 4f       	sbci	r25, 0xFF	; 255
    3ad6:	dc 01       	movw	r26, r24
    3ad8:	2c 91       	ld	r18, X
    3ada:	30 e2       	ldi	r19, 0x20	; 32
    3adc:	a3 2e       	mov	r10, r19
    3ade:	b1 2c       	mov	r11, r1
    3ae0:	c1 2c       	mov	r12, r1
    3ae2:	d1 2c       	mov	r13, r1
    3ae4:	d6 01       	movw	r26, r12
    3ae6:	c5 01       	movw	r24, r10
    3ae8:	84 1b       	sub	r24, r20
    3aea:	95 0b       	sbc	r25, r21
    3aec:	a6 0b       	sbc	r26, r22
    3aee:	b7 0b       	sbc	r27, r23
    3af0:	82 1b       	sub	r24, r18
    3af2:	91 09       	sbc	r25, r1
    3af4:	a1 09       	sbc	r26, r1
    3af6:	b1 09       	sbc	r27, r1
    3af8:	00 97       	sbiw	r24, 0x00	; 0
    3afa:	a1 05       	cpc	r26, r1
    3afc:	b1 05       	cpc	r27, r1
    3afe:	89 f4       	brne	.+34     	; 0x3b22 <__udivdi3+0x8ae>
    3b00:	e6 14       	cp	r14, r6
    3b02:	f7 04       	cpc	r15, r7
    3b04:	08 05       	cpc	r16, r8
    3b06:	19 05       	cpc	r17, r9
    3b08:	08 f4       	brcc	.+2      	; 0x3b0c <__udivdi3+0x898>
    3b0a:	f2 c1       	rjmp	.+996    	; 0x3ef0 <__udivdi3+0xc7c>
    3b0c:	6d a4       	ldd	r6, Y+45	; 0x2d
    3b0e:	7e a4       	ldd	r7, Y+46	; 0x2e
    3b10:	8f a4       	ldd	r8, Y+47	; 0x2f
    3b12:	98 a8       	ldd	r9, Y+48	; 0x30
    3b14:	62 14       	cp	r6, r2
    3b16:	73 04       	cpc	r7, r3
    3b18:	84 04       	cpc	r8, r4
    3b1a:	95 04       	cpc	r9, r5
    3b1c:	08 f0       	brcs	.+2      	; 0x3b20 <__udivdi3+0x8ac>
    3b1e:	e8 c1       	rjmp	.+976    	; 0x3ef0 <__udivdi3+0xc7c>
    3b20:	f3 c1       	rjmp	.+998    	; 0x3f08 <__udivdi3+0xc94>
    3b22:	6e 96       	adiw	r28, 0x1e	; 30
    3b24:	8f af       	std	Y+63, r24	; 0x3f
    3b26:	6e 97       	sbiw	r28, 0x1e	; 30
    3b28:	08 2e       	mov	r0, r24
    3b2a:	04 c0       	rjmp	.+8      	; 0x3b34 <__udivdi3+0x8c0>
    3b2c:	ee 0c       	add	r14, r14
    3b2e:	ff 1c       	adc	r15, r15
    3b30:	00 1f       	adc	r16, r16
    3b32:	11 1f       	adc	r17, r17
    3b34:	0a 94       	dec	r0
    3b36:	d2 f7       	brpl	.-12     	; 0x3b2c <__udivdi3+0x8b8>
    3b38:	6a 2d       	mov	r22, r10
    3b3a:	68 1b       	sub	r22, r24
    3b3c:	d2 01       	movw	r26, r4
    3b3e:	c1 01       	movw	r24, r2
    3b40:	06 2e       	mov	r0, r22
    3b42:	04 c0       	rjmp	.+8      	; 0x3b4c <__udivdi3+0x8d8>
    3b44:	b6 95       	lsr	r27
    3b46:	a7 95       	ror	r26
    3b48:	97 95       	ror	r25
    3b4a:	87 95       	ror	r24
    3b4c:	0a 94       	dec	r0
    3b4e:	d2 f7       	brpl	.-12     	; 0x3b44 <__udivdi3+0x8d0>
    3b50:	5c 01       	movw	r10, r24
    3b52:	6d 01       	movw	r12, r26
    3b54:	ae 28       	or	r10, r14
    3b56:	bf 28       	or	r11, r15
    3b58:	c0 2a       	or	r12, r16
    3b5a:	d1 2a       	or	r13, r17
    3b5c:	ad a2       	std	Y+37, r10	; 0x25
    3b5e:	be a2       	std	Y+38, r11	; 0x26
    3b60:	cf a2       	std	Y+39, r12	; 0x27
    3b62:	d8 a6       	std	Y+40, r13	; 0x28
    3b64:	72 01       	movw	r14, r4
    3b66:	61 01       	movw	r12, r2
    3b68:	6e 96       	adiw	r28, 0x1e	; 30
    3b6a:	0f ac       	ldd	r0, Y+63	; 0x3f
    3b6c:	6e 97       	sbiw	r28, 0x1e	; 30
    3b6e:	04 c0       	rjmp	.+8      	; 0x3b78 <__udivdi3+0x904>
    3b70:	cc 0c       	add	r12, r12
    3b72:	dd 1c       	adc	r13, r13
    3b74:	ee 1c       	adc	r14, r14
    3b76:	ff 1c       	adc	r15, r15
    3b78:	0a 94       	dec	r0
    3b7a:	d2 f7       	brpl	.-12     	; 0x3b70 <__udivdi3+0x8fc>
    3b7c:	c9 a2       	std	Y+33, r12	; 0x21
    3b7e:	da a2       	std	Y+34, r13	; 0x22
    3b80:	eb a2       	std	Y+35, r14	; 0x23
    3b82:	fc a2       	std	Y+36, r15	; 0x24
    3b84:	64 01       	movw	r12, r8
    3b86:	53 01       	movw	r10, r6
    3b88:	06 2e       	mov	r0, r22
    3b8a:	04 c0       	rjmp	.+8      	; 0x3b94 <__udivdi3+0x920>
    3b8c:	d6 94       	lsr	r13
    3b8e:	c7 94       	ror	r12
    3b90:	b7 94       	ror	r11
    3b92:	a7 94       	ror	r10
    3b94:	0a 94       	dec	r0
    3b96:	d2 f7       	brpl	.-12     	; 0x3b8c <__udivdi3+0x918>
    3b98:	d4 01       	movw	r26, r8
    3b9a:	c3 01       	movw	r24, r6
    3b9c:	6e 96       	adiw	r28, 0x1e	; 30
    3b9e:	0f ac       	ldd	r0, Y+63	; 0x3f
    3ba0:	6e 97       	sbiw	r28, 0x1e	; 30
    3ba2:	04 c0       	rjmp	.+8      	; 0x3bac <__udivdi3+0x938>
    3ba4:	88 0f       	add	r24, r24
    3ba6:	99 1f       	adc	r25, r25
    3ba8:	aa 1f       	adc	r26, r26
    3baa:	bb 1f       	adc	r27, r27
    3bac:	0a 94       	dec	r0
    3bae:	d2 f7       	brpl	.-12     	; 0x3ba4 <__udivdi3+0x930>
    3bb0:	ed a4       	ldd	r14, Y+45	; 0x2d
    3bb2:	fe a4       	ldd	r15, Y+46	; 0x2e
    3bb4:	0f a5       	ldd	r16, Y+47	; 0x2f
    3bb6:	18 a9       	ldd	r17, Y+48	; 0x30
    3bb8:	04 c0       	rjmp	.+8      	; 0x3bc2 <__udivdi3+0x94e>
    3bba:	16 95       	lsr	r17
    3bbc:	07 95       	ror	r16
    3bbe:	f7 94       	ror	r15
    3bc0:	e7 94       	ror	r14
    3bc2:	6a 95       	dec	r22
    3bc4:	d2 f7       	brpl	.-12     	; 0x3bba <__udivdi3+0x946>
    3bc6:	37 01       	movw	r6, r14
    3bc8:	48 01       	movw	r8, r16
    3bca:	68 2a       	or	r6, r24
    3bcc:	79 2a       	or	r7, r25
    3bce:	8a 2a       	or	r8, r26
    3bd0:	9b 2a       	or	r9, r27
    3bd2:	6d 8e       	std	Y+29, r6	; 0x1d
    3bd4:	7e 8e       	std	Y+30, r7	; 0x1e
    3bd6:	8f 8e       	std	Y+31, r8	; 0x1f
    3bd8:	98 a2       	std	Y+32, r9	; 0x20
    3bda:	ed a0       	ldd	r14, Y+37	; 0x25
    3bdc:	fe a0       	ldd	r15, Y+38	; 0x26
    3bde:	0f a1       	ldd	r16, Y+39	; 0x27
    3be0:	18 a5       	ldd	r17, Y+40	; 0x28
    3be2:	38 01       	movw	r6, r16
    3be4:	88 24       	eor	r8, r8
    3be6:	99 24       	eor	r9, r9
    3be8:	98 01       	movw	r18, r16
    3bea:	87 01       	movw	r16, r14
    3bec:	20 70       	andi	r18, 0x00	; 0
    3bee:	30 70       	andi	r19, 0x00	; 0
    3bf0:	65 96       	adiw	r28, 0x15	; 21
    3bf2:	0c af       	std	Y+60, r16	; 0x3c
    3bf4:	1d af       	std	Y+61, r17	; 0x3d
    3bf6:	2e af       	std	Y+62, r18	; 0x3e
    3bf8:	3f af       	std	Y+63, r19	; 0x3f
    3bfa:	65 97       	sbiw	r28, 0x15	; 21
    3bfc:	c6 01       	movw	r24, r12
    3bfe:	b5 01       	movw	r22, r10
    3c00:	a4 01       	movw	r20, r8
    3c02:	93 01       	movw	r18, r6
    3c04:	0e 94 b2 27 	call	0x4f64	; 0x4f64 <__udivmodsi4>
    3c08:	7b 01       	movw	r14, r22
    3c0a:	8c 01       	movw	r16, r24
    3c0c:	c6 01       	movw	r24, r12
    3c0e:	b5 01       	movw	r22, r10
    3c10:	a4 01       	movw	r20, r8
    3c12:	93 01       	movw	r18, r6
    3c14:	0e 94 b2 27 	call	0x4f64	; 0x4f64 <__udivmodsi4>
    3c18:	c9 01       	movw	r24, r18
    3c1a:	da 01       	movw	r26, r20
    3c1c:	1c 01       	movw	r2, r24
    3c1e:	2d 01       	movw	r4, r26
    3c20:	c2 01       	movw	r24, r4
    3c22:	b1 01       	movw	r22, r2
    3c24:	65 96       	adiw	r28, 0x15	; 21
    3c26:	2c ad       	ldd	r18, Y+60	; 0x3c
    3c28:	3d ad       	ldd	r19, Y+61	; 0x3d
    3c2a:	4e ad       	ldd	r20, Y+62	; 0x3e
    3c2c:	5f ad       	ldd	r21, Y+63	; 0x3f
    3c2e:	65 97       	sbiw	r28, 0x15	; 21
    3c30:	0e 94 93 27 	call	0x4f26	; 0x4f26 <__mulsi3>
    3c34:	9b 01       	movw	r18, r22
    3c36:	ac 01       	movw	r20, r24
    3c38:	87 01       	movw	r16, r14
    3c3a:	ff 24       	eor	r15, r15
    3c3c:	ee 24       	eor	r14, r14
    3c3e:	ad 8c       	ldd	r10, Y+29	; 0x1d
    3c40:	be 8c       	ldd	r11, Y+30	; 0x1e
    3c42:	cf 8c       	ldd	r12, Y+31	; 0x1f
    3c44:	d8 a0       	ldd	r13, Y+32	; 0x20
    3c46:	c6 01       	movw	r24, r12
    3c48:	aa 27       	eor	r26, r26
    3c4a:	bb 27       	eor	r27, r27
    3c4c:	57 01       	movw	r10, r14
    3c4e:	68 01       	movw	r12, r16
    3c50:	a8 2a       	or	r10, r24
    3c52:	b9 2a       	or	r11, r25
    3c54:	ca 2a       	or	r12, r26
    3c56:	db 2a       	or	r13, r27
    3c58:	a2 16       	cp	r10, r18
    3c5a:	b3 06       	cpc	r11, r19
    3c5c:	c4 06       	cpc	r12, r20
    3c5e:	d5 06       	cpc	r13, r21
    3c60:	00 f5       	brcc	.+64     	; 0x3ca2 <__udivdi3+0xa2e>
    3c62:	08 94       	sec
    3c64:	21 08       	sbc	r2, r1
    3c66:	31 08       	sbc	r3, r1
    3c68:	41 08       	sbc	r4, r1
    3c6a:	51 08       	sbc	r5, r1
    3c6c:	ed a0       	ldd	r14, Y+37	; 0x25
    3c6e:	fe a0       	ldd	r15, Y+38	; 0x26
    3c70:	0f a1       	ldd	r16, Y+39	; 0x27
    3c72:	18 a5       	ldd	r17, Y+40	; 0x28
    3c74:	ae 0c       	add	r10, r14
    3c76:	bf 1c       	adc	r11, r15
    3c78:	c0 1e       	adc	r12, r16
    3c7a:	d1 1e       	adc	r13, r17
    3c7c:	ae 14       	cp	r10, r14
    3c7e:	bf 04       	cpc	r11, r15
    3c80:	c0 06       	cpc	r12, r16
    3c82:	d1 06       	cpc	r13, r17
    3c84:	70 f0       	brcs	.+28     	; 0x3ca2 <__udivdi3+0xa2e>
    3c86:	a2 16       	cp	r10, r18
    3c88:	b3 06       	cpc	r11, r19
    3c8a:	c4 06       	cpc	r12, r20
    3c8c:	d5 06       	cpc	r13, r21
    3c8e:	48 f4       	brcc	.+18     	; 0x3ca2 <__udivdi3+0xa2e>
    3c90:	08 94       	sec
    3c92:	21 08       	sbc	r2, r1
    3c94:	31 08       	sbc	r3, r1
    3c96:	41 08       	sbc	r4, r1
    3c98:	51 08       	sbc	r5, r1
    3c9a:	ae 0c       	add	r10, r14
    3c9c:	bf 1c       	adc	r11, r15
    3c9e:	c0 1e       	adc	r12, r16
    3ca0:	d1 1e       	adc	r13, r17
    3ca2:	a2 1a       	sub	r10, r18
    3ca4:	b3 0a       	sbc	r11, r19
    3ca6:	c4 0a       	sbc	r12, r20
    3ca8:	d5 0a       	sbc	r13, r21
    3caa:	c6 01       	movw	r24, r12
    3cac:	b5 01       	movw	r22, r10
    3cae:	a4 01       	movw	r20, r8
    3cb0:	93 01       	movw	r18, r6
    3cb2:	0e 94 b2 27 	call	0x4f64	; 0x4f64 <__udivmodsi4>
    3cb6:	7b 01       	movw	r14, r22
    3cb8:	8c 01       	movw	r16, r24
    3cba:	c6 01       	movw	r24, r12
    3cbc:	b5 01       	movw	r22, r10
    3cbe:	a4 01       	movw	r20, r8
    3cc0:	93 01       	movw	r18, r6
    3cc2:	0e 94 b2 27 	call	0x4f64	; 0x4f64 <__udivmodsi4>
    3cc6:	c9 01       	movw	r24, r18
    3cc8:	da 01       	movw	r26, r20
    3cca:	3c 01       	movw	r6, r24
    3ccc:	4d 01       	movw	r8, r26
    3cce:	c4 01       	movw	r24, r8
    3cd0:	b3 01       	movw	r22, r6
    3cd2:	65 96       	adiw	r28, 0x15	; 21
    3cd4:	2c ad       	ldd	r18, Y+60	; 0x3c
    3cd6:	3d ad       	ldd	r19, Y+61	; 0x3d
    3cd8:	4e ad       	ldd	r20, Y+62	; 0x3e
    3cda:	5f ad       	ldd	r21, Y+63	; 0x3f
    3cdc:	65 97       	sbiw	r28, 0x15	; 21
    3cde:	0e 94 93 27 	call	0x4f26	; 0x4f26 <__mulsi3>
    3ce2:	9b 01       	movw	r18, r22
    3ce4:	ac 01       	movw	r20, r24
    3ce6:	87 01       	movw	r16, r14
    3ce8:	ff 24       	eor	r15, r15
    3cea:	ee 24       	eor	r14, r14
    3cec:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3cee:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3cf0:	af 8d       	ldd	r26, Y+31	; 0x1f
    3cf2:	b8 a1       	ldd	r27, Y+32	; 0x20
    3cf4:	a0 70       	andi	r26, 0x00	; 0
    3cf6:	b0 70       	andi	r27, 0x00	; 0
    3cf8:	57 01       	movw	r10, r14
    3cfa:	68 01       	movw	r12, r16
    3cfc:	a8 2a       	or	r10, r24
    3cfe:	b9 2a       	or	r11, r25
    3d00:	ca 2a       	or	r12, r26
    3d02:	db 2a       	or	r13, r27
    3d04:	a2 16       	cp	r10, r18
    3d06:	b3 06       	cpc	r11, r19
    3d08:	c4 06       	cpc	r12, r20
    3d0a:	d5 06       	cpc	r13, r21
    3d0c:	00 f5       	brcc	.+64     	; 0x3d4e <__udivdi3+0xada>
    3d0e:	08 94       	sec
    3d10:	61 08       	sbc	r6, r1
    3d12:	71 08       	sbc	r7, r1
    3d14:	81 08       	sbc	r8, r1
    3d16:	91 08       	sbc	r9, r1
    3d18:	6d a1       	ldd	r22, Y+37	; 0x25
    3d1a:	7e a1       	ldd	r23, Y+38	; 0x26
    3d1c:	8f a1       	ldd	r24, Y+39	; 0x27
    3d1e:	98 a5       	ldd	r25, Y+40	; 0x28
    3d20:	a6 0e       	add	r10, r22
    3d22:	b7 1e       	adc	r11, r23
    3d24:	c8 1e       	adc	r12, r24
    3d26:	d9 1e       	adc	r13, r25
    3d28:	a6 16       	cp	r10, r22
    3d2a:	b7 06       	cpc	r11, r23
    3d2c:	c8 06       	cpc	r12, r24
    3d2e:	d9 06       	cpc	r13, r25
    3d30:	70 f0       	brcs	.+28     	; 0x3d4e <__udivdi3+0xada>
    3d32:	a2 16       	cp	r10, r18
    3d34:	b3 06       	cpc	r11, r19
    3d36:	c4 06       	cpc	r12, r20
    3d38:	d5 06       	cpc	r13, r21
    3d3a:	48 f4       	brcc	.+18     	; 0x3d4e <__udivdi3+0xada>
    3d3c:	08 94       	sec
    3d3e:	61 08       	sbc	r6, r1
    3d40:	71 08       	sbc	r7, r1
    3d42:	81 08       	sbc	r8, r1
    3d44:	91 08       	sbc	r9, r1
    3d46:	a6 0e       	add	r10, r22
    3d48:	b7 1e       	adc	r11, r23
    3d4a:	c8 1e       	adc	r12, r24
    3d4c:	d9 1e       	adc	r13, r25
    3d4e:	d6 01       	movw	r26, r12
    3d50:	c5 01       	movw	r24, r10
    3d52:	82 1b       	sub	r24, r18
    3d54:	93 0b       	sbc	r25, r19
    3d56:	a4 0b       	sbc	r26, r20
    3d58:	b5 0b       	sbc	r27, r21
    3d5a:	89 8f       	std	Y+25, r24	; 0x19
    3d5c:	9a 8f       	std	Y+26, r25	; 0x1a
    3d5e:	ab 8f       	std	Y+27, r26	; 0x1b
    3d60:	bc 8f       	std	Y+28, r27	; 0x1c
    3d62:	d1 01       	movw	r26, r2
    3d64:	99 27       	eor	r25, r25
    3d66:	88 27       	eor	r24, r24
    3d68:	64 01       	movw	r12, r8
    3d6a:	53 01       	movw	r10, r6
    3d6c:	a8 2a       	or	r10, r24
    3d6e:	b9 2a       	or	r11, r25
    3d70:	ca 2a       	or	r12, r26
    3d72:	db 2a       	or	r13, r27
    3d74:	a9 aa       	std	Y+49, r10	; 0x31
    3d76:	ba aa       	std	Y+50, r11	; 0x32
    3d78:	cb aa       	std	Y+51, r12	; 0x33
    3d7a:	dc aa       	std	Y+52, r13	; 0x34
    3d7c:	86 01       	movw	r16, r12
    3d7e:	75 01       	movw	r14, r10
    3d80:	2f ef       	ldi	r18, 0xFF	; 255
    3d82:	3f ef       	ldi	r19, 0xFF	; 255
    3d84:	40 e0       	ldi	r20, 0x00	; 0
    3d86:	50 e0       	ldi	r21, 0x00	; 0
    3d88:	e2 22       	and	r14, r18
    3d8a:	f3 22       	and	r15, r19
    3d8c:	04 23       	and	r16, r20
    3d8e:	15 23       	and	r17, r21
    3d90:	a6 01       	movw	r20, r12
    3d92:	66 27       	eor	r22, r22
    3d94:	77 27       	eor	r23, r23
    3d96:	6d 96       	adiw	r28, 0x1d	; 29
    3d98:	4c af       	std	Y+60, r20	; 0x3c
    3d9a:	5d af       	std	Y+61, r21	; 0x3d
    3d9c:	6e af       	std	Y+62, r22	; 0x3e
    3d9e:	7f af       	std	Y+63, r23	; 0x3f
    3da0:	6d 97       	sbiw	r28, 0x1d	; 29
    3da2:	a9 a0       	ldd	r10, Y+33	; 0x21
    3da4:	ba a0       	ldd	r11, Y+34	; 0x22
    3da6:	cb a0       	ldd	r12, Y+35	; 0x23
    3da8:	dc a0       	ldd	r13, Y+36	; 0x24
    3daa:	6f ef       	ldi	r22, 0xFF	; 255
    3dac:	7f ef       	ldi	r23, 0xFF	; 255
    3dae:	80 e0       	ldi	r24, 0x00	; 0
    3db0:	90 e0       	ldi	r25, 0x00	; 0
    3db2:	a6 22       	and	r10, r22
    3db4:	b7 22       	and	r11, r23
    3db6:	c8 22       	and	r12, r24
    3db8:	d9 22       	and	r13, r25
    3dba:	89 a1       	ldd	r24, Y+33	; 0x21
    3dbc:	9a a1       	ldd	r25, Y+34	; 0x22
    3dbe:	ab a1       	ldd	r26, Y+35	; 0x23
    3dc0:	bc a1       	ldd	r27, Y+36	; 0x24
    3dc2:	1d 01       	movw	r2, r26
    3dc4:	44 24       	eor	r4, r4
    3dc6:	55 24       	eor	r5, r5
    3dc8:	c8 01       	movw	r24, r16
    3dca:	b7 01       	movw	r22, r14
    3dcc:	a6 01       	movw	r20, r12
    3dce:	95 01       	movw	r18, r10
    3dd0:	0e 94 93 27 	call	0x4f26	; 0x4f26 <__mulsi3>
    3dd4:	69 96       	adiw	r28, 0x19	; 25
    3dd6:	6c af       	std	Y+60, r22	; 0x3c
    3dd8:	7d af       	std	Y+61, r23	; 0x3d
    3dda:	8e af       	std	Y+62, r24	; 0x3e
    3ddc:	9f af       	std	Y+63, r25	; 0x3f
    3dde:	69 97       	sbiw	r28, 0x19	; 25
    3de0:	c8 01       	movw	r24, r16
    3de2:	b7 01       	movw	r22, r14
    3de4:	a2 01       	movw	r20, r4
    3de6:	91 01       	movw	r18, r2
    3de8:	0e 94 93 27 	call	0x4f26	; 0x4f26 <__mulsi3>
    3dec:	3b 01       	movw	r6, r22
    3dee:	4c 01       	movw	r8, r24
    3df0:	6d 96       	adiw	r28, 0x1d	; 29
    3df2:	6c ad       	ldd	r22, Y+60	; 0x3c
    3df4:	7d ad       	ldd	r23, Y+61	; 0x3d
    3df6:	8e ad       	ldd	r24, Y+62	; 0x3e
    3df8:	9f ad       	ldd	r25, Y+63	; 0x3f
    3dfa:	6d 97       	sbiw	r28, 0x1d	; 29
    3dfc:	a6 01       	movw	r20, r12
    3dfe:	95 01       	movw	r18, r10
    3e00:	0e 94 93 27 	call	0x4f26	; 0x4f26 <__mulsi3>
    3e04:	7b 01       	movw	r14, r22
    3e06:	8c 01       	movw	r16, r24
    3e08:	6d 96       	adiw	r28, 0x1d	; 29
    3e0a:	6c ad       	ldd	r22, Y+60	; 0x3c
    3e0c:	7d ad       	ldd	r23, Y+61	; 0x3d
    3e0e:	8e ad       	ldd	r24, Y+62	; 0x3e
    3e10:	9f ad       	ldd	r25, Y+63	; 0x3f
    3e12:	6d 97       	sbiw	r28, 0x1d	; 29
    3e14:	a2 01       	movw	r20, r4
    3e16:	91 01       	movw	r18, r2
    3e18:	0e 94 93 27 	call	0x4f26	; 0x4f26 <__mulsi3>
    3e1c:	5b 01       	movw	r10, r22
    3e1e:	6c 01       	movw	r12, r24
    3e20:	a8 01       	movw	r20, r16
    3e22:	97 01       	movw	r18, r14
    3e24:	26 0d       	add	r18, r6
    3e26:	37 1d       	adc	r19, r7
    3e28:	48 1d       	adc	r20, r8
    3e2a:	59 1d       	adc	r21, r9
    3e2c:	69 96       	adiw	r28, 0x19	; 25
    3e2e:	6c ac       	ldd	r6, Y+60	; 0x3c
    3e30:	7d ac       	ldd	r7, Y+61	; 0x3d
    3e32:	8e ac       	ldd	r8, Y+62	; 0x3e
    3e34:	9f ac       	ldd	r9, Y+63	; 0x3f
    3e36:	69 97       	sbiw	r28, 0x19	; 25
    3e38:	c4 01       	movw	r24, r8
    3e3a:	aa 27       	eor	r26, r26
    3e3c:	bb 27       	eor	r27, r27
    3e3e:	28 0f       	add	r18, r24
    3e40:	39 1f       	adc	r19, r25
    3e42:	4a 1f       	adc	r20, r26
    3e44:	5b 1f       	adc	r21, r27
    3e46:	2e 15       	cp	r18, r14
    3e48:	3f 05       	cpc	r19, r15
    3e4a:	40 07       	cpc	r20, r16
    3e4c:	51 07       	cpc	r21, r17
    3e4e:	48 f4       	brcc	.+18     	; 0x3e62 <__udivdi3+0xbee>
    3e50:	e1 2c       	mov	r14, r1
    3e52:	f1 2c       	mov	r15, r1
    3e54:	61 e0       	ldi	r22, 0x01	; 1
    3e56:	06 2f       	mov	r16, r22
    3e58:	11 2d       	mov	r17, r1
    3e5a:	ae 0c       	add	r10, r14
    3e5c:	bf 1c       	adc	r11, r15
    3e5e:	c0 1e       	adc	r12, r16
    3e60:	d1 1e       	adc	r13, r17
    3e62:	ca 01       	movw	r24, r20
    3e64:	aa 27       	eor	r26, r26
    3e66:	bb 27       	eor	r27, r27
    3e68:	bc 01       	movw	r22, r24
    3e6a:	cd 01       	movw	r24, r26
    3e6c:	6a 0d       	add	r22, r10
    3e6e:	7b 1d       	adc	r23, r11
    3e70:	8c 1d       	adc	r24, r12
    3e72:	9d 1d       	adc	r25, r13
    3e74:	69 8c       	ldd	r6, Y+25	; 0x19
    3e76:	7a 8c       	ldd	r7, Y+26	; 0x1a
    3e78:	8b 8c       	ldd	r8, Y+27	; 0x1b
    3e7a:	9c 8c       	ldd	r9, Y+28	; 0x1c
    3e7c:	66 16       	cp	r6, r22
    3e7e:	77 06       	cpc	r7, r23
    3e80:	88 06       	cpc	r8, r24
    3e82:	99 06       	cpc	r9, r25
    3e84:	40 f1       	brcs	.+80     	; 0x3ed6 <__udivdi3+0xc62>
    3e86:	66 15       	cp	r22, r6
    3e88:	77 05       	cpc	r23, r7
    3e8a:	88 05       	cpc	r24, r8
    3e8c:	99 05       	cpc	r25, r9
    3e8e:	09 f0       	breq	.+2      	; 0x3e92 <__udivdi3+0xc1e>
    3e90:	43 c0       	rjmp	.+134    	; 0x3f18 <__udivdi3+0xca4>
    3e92:	d9 01       	movw	r26, r18
    3e94:	99 27       	eor	r25, r25
    3e96:	88 27       	eor	r24, r24
    3e98:	69 96       	adiw	r28, 0x19	; 25
    3e9a:	2c ad       	ldd	r18, Y+60	; 0x3c
    3e9c:	3d ad       	ldd	r19, Y+61	; 0x3d
    3e9e:	4e ad       	ldd	r20, Y+62	; 0x3e
    3ea0:	5f ad       	ldd	r21, Y+63	; 0x3f
    3ea2:	69 97       	sbiw	r28, 0x19	; 25
    3ea4:	40 70       	andi	r20, 0x00	; 0
    3ea6:	50 70       	andi	r21, 0x00	; 0
    3ea8:	82 0f       	add	r24, r18
    3eaa:	93 1f       	adc	r25, r19
    3eac:	a4 1f       	adc	r26, r20
    3eae:	b5 1f       	adc	r27, r21
    3eb0:	2d a5       	ldd	r18, Y+45	; 0x2d
    3eb2:	3e a5       	ldd	r19, Y+46	; 0x2e
    3eb4:	4f a5       	ldd	r20, Y+47	; 0x2f
    3eb6:	58 a9       	ldd	r21, Y+48	; 0x30
    3eb8:	6e 96       	adiw	r28, 0x1e	; 30
    3eba:	0f ac       	ldd	r0, Y+63	; 0x3f
    3ebc:	6e 97       	sbiw	r28, 0x1e	; 30
    3ebe:	04 c0       	rjmp	.+8      	; 0x3ec8 <__udivdi3+0xc54>
    3ec0:	22 0f       	add	r18, r18
    3ec2:	33 1f       	adc	r19, r19
    3ec4:	44 1f       	adc	r20, r20
    3ec6:	55 1f       	adc	r21, r21
    3ec8:	0a 94       	dec	r0
    3eca:	d2 f7       	brpl	.-12     	; 0x3ec0 <__udivdi3+0xc4c>
    3ecc:	28 17       	cp	r18, r24
    3ece:	39 07       	cpc	r19, r25
    3ed0:	4a 07       	cpc	r20, r26
    3ed2:	5b 07       	cpc	r21, r27
    3ed4:	08 f5       	brcc	.+66     	; 0x3f18 <__udivdi3+0xca4>
    3ed6:	09 a9       	ldd	r16, Y+49	; 0x31
    3ed8:	1a a9       	ldd	r17, Y+50	; 0x32
    3eda:	2b a9       	ldd	r18, Y+51	; 0x33
    3edc:	3c a9       	ldd	r19, Y+52	; 0x34
    3ede:	01 50       	subi	r16, 0x01	; 1
    3ee0:	10 40       	sbci	r17, 0x00	; 0
    3ee2:	20 40       	sbci	r18, 0x00	; 0
    3ee4:	30 40       	sbci	r19, 0x00	; 0
    3ee6:	09 ab       	std	Y+49, r16	; 0x31
    3ee8:	1a ab       	std	Y+50, r17	; 0x32
    3eea:	2b ab       	std	Y+51, r18	; 0x33
    3eec:	3c ab       	std	Y+52, r19	; 0x34
    3eee:	14 c0       	rjmp	.+40     	; 0x3f18 <__udivdi3+0xca4>
    3ef0:	66 24       	eor	r6, r6
    3ef2:	77 24       	eor	r7, r7
    3ef4:	43 01       	movw	r8, r6
    3ef6:	21 e0       	ldi	r18, 0x01	; 1
    3ef8:	30 e0       	ldi	r19, 0x00	; 0
    3efa:	40 e0       	ldi	r20, 0x00	; 0
    3efc:	50 e0       	ldi	r21, 0x00	; 0
    3efe:	29 ab       	std	Y+49, r18	; 0x31
    3f00:	3a ab       	std	Y+50, r19	; 0x32
    3f02:	4b ab       	std	Y+51, r20	; 0x33
    3f04:	5c ab       	std	Y+52, r21	; 0x34
    3f06:	0b c0       	rjmp	.+22     	; 0x3f1e <__udivdi3+0xcaa>
    3f08:	66 24       	eor	r6, r6
    3f0a:	77 24       	eor	r7, r7
    3f0c:	43 01       	movw	r8, r6
    3f0e:	19 aa       	std	Y+49, r1	; 0x31
    3f10:	1a aa       	std	Y+50, r1	; 0x32
    3f12:	1b aa       	std	Y+51, r1	; 0x33
    3f14:	1c aa       	std	Y+52, r1	; 0x34
    3f16:	03 c0       	rjmp	.+6      	; 0x3f1e <__udivdi3+0xcaa>
    3f18:	66 24       	eor	r6, r6
    3f1a:	77 24       	eor	r7, r7
    3f1c:	43 01       	movw	r8, r6
    3f1e:	fe 01       	movw	r30, r28
    3f20:	71 96       	adiw	r30, 0x11	; 17
    3f22:	88 e0       	ldi	r24, 0x08	; 8
    3f24:	df 01       	movw	r26, r30
    3f26:	1d 92       	st	X+, r1
    3f28:	8a 95       	dec	r24
    3f2a:	e9 f7       	brne	.-6      	; 0x3f26 <__udivdi3+0xcb2>
    3f2c:	a9 a8       	ldd	r10, Y+49	; 0x31
    3f2e:	ba a8       	ldd	r11, Y+50	; 0x32
    3f30:	cb a8       	ldd	r12, Y+51	; 0x33
    3f32:	dc a8       	ldd	r13, Y+52	; 0x34
    3f34:	a9 8a       	std	Y+17, r10	; 0x11
    3f36:	ba 8a       	std	Y+18, r11	; 0x12
    3f38:	cb 8a       	std	Y+19, r12	; 0x13
    3f3a:	dc 8a       	std	Y+20, r13	; 0x14
    3f3c:	6d 8a       	std	Y+21, r6	; 0x15
    3f3e:	7e 8a       	std	Y+22, r7	; 0x16
    3f40:	8f 8a       	std	Y+23, r8	; 0x17
    3f42:	98 8e       	std	Y+24, r9	; 0x18
    3f44:	29 a9       	ldd	r18, Y+49	; 0x31
    3f46:	3a 89       	ldd	r19, Y+18	; 0x12
    3f48:	4b 89       	ldd	r20, Y+19	; 0x13
    3f4a:	5c 89       	ldd	r21, Y+20	; 0x14
    3f4c:	66 2d       	mov	r22, r6
    3f4e:	7e 89       	ldd	r23, Y+22	; 0x16
    3f50:	8f 89       	ldd	r24, Y+23	; 0x17
    3f52:	98 8d       	ldd	r25, Y+24	; 0x18
    3f54:	c2 5a       	subi	r28, 0xA2	; 162
    3f56:	df 4f       	sbci	r29, 0xFF	; 255
    3f58:	e2 e1       	ldi	r30, 0x12	; 18
    3f5a:	0c 94 f0 27 	jmp	0x4fe0	; 0x4fe0 <__epilogue_restores__>

00003f5e <_fpadd_parts>:
    3f5e:	a0 e0       	ldi	r26, 0x00	; 0
    3f60:	b0 e0       	ldi	r27, 0x00	; 0
    3f62:	e5 eb       	ldi	r30, 0xB5	; 181
    3f64:	ff e1       	ldi	r31, 0x1F	; 31
    3f66:	0c 94 d4 27 	jmp	0x4fa8	; 0x4fa8 <__prologue_saves__>
    3f6a:	dc 01       	movw	r26, r24
    3f6c:	2b 01       	movw	r4, r22
    3f6e:	fa 01       	movw	r30, r20
    3f70:	9c 91       	ld	r25, X
    3f72:	92 30       	cpi	r25, 0x02	; 2
    3f74:	08 f4       	brcc	.+2      	; 0x3f78 <_fpadd_parts+0x1a>
    3f76:	39 c1       	rjmp	.+626    	; 0x41ea <_fpadd_parts+0x28c>
    3f78:	eb 01       	movw	r28, r22
    3f7a:	88 81       	ld	r24, Y
    3f7c:	82 30       	cpi	r24, 0x02	; 2
    3f7e:	08 f4       	brcc	.+2      	; 0x3f82 <_fpadd_parts+0x24>
    3f80:	33 c1       	rjmp	.+614    	; 0x41e8 <_fpadd_parts+0x28a>
    3f82:	94 30       	cpi	r25, 0x04	; 4
    3f84:	69 f4       	brne	.+26     	; 0x3fa0 <_fpadd_parts+0x42>
    3f86:	84 30       	cpi	r24, 0x04	; 4
    3f88:	09 f0       	breq	.+2      	; 0x3f8c <_fpadd_parts+0x2e>
    3f8a:	2f c1       	rjmp	.+606    	; 0x41ea <_fpadd_parts+0x28c>
    3f8c:	11 96       	adiw	r26, 0x01	; 1
    3f8e:	9c 91       	ld	r25, X
    3f90:	11 97       	sbiw	r26, 0x01	; 1
    3f92:	89 81       	ldd	r24, Y+1	; 0x01
    3f94:	98 17       	cp	r25, r24
    3f96:	09 f4       	brne	.+2      	; 0x3f9a <_fpadd_parts+0x3c>
    3f98:	28 c1       	rjmp	.+592    	; 0x41ea <_fpadd_parts+0x28c>
    3f9a:	a6 ed       	ldi	r26, 0xD6	; 214
    3f9c:	b0 e0       	ldi	r27, 0x00	; 0
    3f9e:	25 c1       	rjmp	.+586    	; 0x41ea <_fpadd_parts+0x28c>
    3fa0:	84 30       	cpi	r24, 0x04	; 4
    3fa2:	09 f4       	brne	.+2      	; 0x3fa6 <_fpadd_parts+0x48>
    3fa4:	21 c1       	rjmp	.+578    	; 0x41e8 <_fpadd_parts+0x28a>
    3fa6:	82 30       	cpi	r24, 0x02	; 2
    3fa8:	a9 f4       	brne	.+42     	; 0x3fd4 <_fpadd_parts+0x76>
    3faa:	92 30       	cpi	r25, 0x02	; 2
    3fac:	09 f0       	breq	.+2      	; 0x3fb0 <_fpadd_parts+0x52>
    3fae:	1d c1       	rjmp	.+570    	; 0x41ea <_fpadd_parts+0x28c>
    3fb0:	9a 01       	movw	r18, r20
    3fb2:	ad 01       	movw	r20, r26
    3fb4:	88 e0       	ldi	r24, 0x08	; 8
    3fb6:	ea 01       	movw	r28, r20
    3fb8:	09 90       	ld	r0, Y+
    3fba:	ae 01       	movw	r20, r28
    3fbc:	e9 01       	movw	r28, r18
    3fbe:	09 92       	st	Y+, r0
    3fc0:	9e 01       	movw	r18, r28
    3fc2:	81 50       	subi	r24, 0x01	; 1
    3fc4:	c1 f7       	brne	.-16     	; 0x3fb6 <_fpadd_parts+0x58>
    3fc6:	e2 01       	movw	r28, r4
    3fc8:	89 81       	ldd	r24, Y+1	; 0x01
    3fca:	11 96       	adiw	r26, 0x01	; 1
    3fcc:	9c 91       	ld	r25, X
    3fce:	89 23       	and	r24, r25
    3fd0:	81 83       	std	Z+1, r24	; 0x01
    3fd2:	08 c1       	rjmp	.+528    	; 0x41e4 <_fpadd_parts+0x286>
    3fd4:	92 30       	cpi	r25, 0x02	; 2
    3fd6:	09 f4       	brne	.+2      	; 0x3fda <_fpadd_parts+0x7c>
    3fd8:	07 c1       	rjmp	.+526    	; 0x41e8 <_fpadd_parts+0x28a>
    3fda:	12 96       	adiw	r26, 0x02	; 2
    3fdc:	2d 90       	ld	r2, X+
    3fde:	3c 90       	ld	r3, X
    3fe0:	13 97       	sbiw	r26, 0x03	; 3
    3fe2:	eb 01       	movw	r28, r22
    3fe4:	8a 81       	ldd	r24, Y+2	; 0x02
    3fe6:	9b 81       	ldd	r25, Y+3	; 0x03
    3fe8:	14 96       	adiw	r26, 0x04	; 4
    3fea:	ad 90       	ld	r10, X+
    3fec:	bd 90       	ld	r11, X+
    3fee:	cd 90       	ld	r12, X+
    3ff0:	dc 90       	ld	r13, X
    3ff2:	17 97       	sbiw	r26, 0x07	; 7
    3ff4:	ec 80       	ldd	r14, Y+4	; 0x04
    3ff6:	fd 80       	ldd	r15, Y+5	; 0x05
    3ff8:	0e 81       	ldd	r16, Y+6	; 0x06
    3ffa:	1f 81       	ldd	r17, Y+7	; 0x07
    3ffc:	91 01       	movw	r18, r2
    3ffe:	28 1b       	sub	r18, r24
    4000:	39 0b       	sbc	r19, r25
    4002:	b9 01       	movw	r22, r18
    4004:	37 ff       	sbrs	r19, 7
    4006:	04 c0       	rjmp	.+8      	; 0x4010 <_fpadd_parts+0xb2>
    4008:	66 27       	eor	r22, r22
    400a:	77 27       	eor	r23, r23
    400c:	62 1b       	sub	r22, r18
    400e:	73 0b       	sbc	r23, r19
    4010:	60 32       	cpi	r22, 0x20	; 32
    4012:	71 05       	cpc	r23, r1
    4014:	0c f0       	brlt	.+2      	; 0x4018 <_fpadd_parts+0xba>
    4016:	61 c0       	rjmp	.+194    	; 0x40da <_fpadd_parts+0x17c>
    4018:	12 16       	cp	r1, r18
    401a:	13 06       	cpc	r1, r19
    401c:	6c f5       	brge	.+90     	; 0x4078 <_fpadd_parts+0x11a>
    401e:	37 01       	movw	r6, r14
    4020:	48 01       	movw	r8, r16
    4022:	06 2e       	mov	r0, r22
    4024:	04 c0       	rjmp	.+8      	; 0x402e <_fpadd_parts+0xd0>
    4026:	96 94       	lsr	r9
    4028:	87 94       	ror	r8
    402a:	77 94       	ror	r7
    402c:	67 94       	ror	r6
    402e:	0a 94       	dec	r0
    4030:	d2 f7       	brpl	.-12     	; 0x4026 <_fpadd_parts+0xc8>
    4032:	21 e0       	ldi	r18, 0x01	; 1
    4034:	30 e0       	ldi	r19, 0x00	; 0
    4036:	40 e0       	ldi	r20, 0x00	; 0
    4038:	50 e0       	ldi	r21, 0x00	; 0
    403a:	04 c0       	rjmp	.+8      	; 0x4044 <_fpadd_parts+0xe6>
    403c:	22 0f       	add	r18, r18
    403e:	33 1f       	adc	r19, r19
    4040:	44 1f       	adc	r20, r20
    4042:	55 1f       	adc	r21, r21
    4044:	6a 95       	dec	r22
    4046:	d2 f7       	brpl	.-12     	; 0x403c <_fpadd_parts+0xde>
    4048:	21 50       	subi	r18, 0x01	; 1
    404a:	30 40       	sbci	r19, 0x00	; 0
    404c:	40 40       	sbci	r20, 0x00	; 0
    404e:	50 40       	sbci	r21, 0x00	; 0
    4050:	2e 21       	and	r18, r14
    4052:	3f 21       	and	r19, r15
    4054:	40 23       	and	r20, r16
    4056:	51 23       	and	r21, r17
    4058:	21 15       	cp	r18, r1
    405a:	31 05       	cpc	r19, r1
    405c:	41 05       	cpc	r20, r1
    405e:	51 05       	cpc	r21, r1
    4060:	21 f0       	breq	.+8      	; 0x406a <_fpadd_parts+0x10c>
    4062:	21 e0       	ldi	r18, 0x01	; 1
    4064:	30 e0       	ldi	r19, 0x00	; 0
    4066:	40 e0       	ldi	r20, 0x00	; 0
    4068:	50 e0       	ldi	r21, 0x00	; 0
    406a:	79 01       	movw	r14, r18
    406c:	8a 01       	movw	r16, r20
    406e:	e6 28       	or	r14, r6
    4070:	f7 28       	or	r15, r7
    4072:	08 29       	or	r16, r8
    4074:	19 29       	or	r17, r9
    4076:	3c c0       	rjmp	.+120    	; 0x40f0 <_fpadd_parts+0x192>
    4078:	23 2b       	or	r18, r19
    407a:	d1 f1       	breq	.+116    	; 0x40f0 <_fpadd_parts+0x192>
    407c:	26 0e       	add	r2, r22
    407e:	37 1e       	adc	r3, r23
    4080:	35 01       	movw	r6, r10
    4082:	46 01       	movw	r8, r12
    4084:	06 2e       	mov	r0, r22
    4086:	04 c0       	rjmp	.+8      	; 0x4090 <_fpadd_parts+0x132>
    4088:	96 94       	lsr	r9
    408a:	87 94       	ror	r8
    408c:	77 94       	ror	r7
    408e:	67 94       	ror	r6
    4090:	0a 94       	dec	r0
    4092:	d2 f7       	brpl	.-12     	; 0x4088 <_fpadd_parts+0x12a>
    4094:	21 e0       	ldi	r18, 0x01	; 1
    4096:	30 e0       	ldi	r19, 0x00	; 0
    4098:	40 e0       	ldi	r20, 0x00	; 0
    409a:	50 e0       	ldi	r21, 0x00	; 0
    409c:	04 c0       	rjmp	.+8      	; 0x40a6 <_fpadd_parts+0x148>
    409e:	22 0f       	add	r18, r18
    40a0:	33 1f       	adc	r19, r19
    40a2:	44 1f       	adc	r20, r20
    40a4:	55 1f       	adc	r21, r21
    40a6:	6a 95       	dec	r22
    40a8:	d2 f7       	brpl	.-12     	; 0x409e <_fpadd_parts+0x140>
    40aa:	21 50       	subi	r18, 0x01	; 1
    40ac:	30 40       	sbci	r19, 0x00	; 0
    40ae:	40 40       	sbci	r20, 0x00	; 0
    40b0:	50 40       	sbci	r21, 0x00	; 0
    40b2:	2a 21       	and	r18, r10
    40b4:	3b 21       	and	r19, r11
    40b6:	4c 21       	and	r20, r12
    40b8:	5d 21       	and	r21, r13
    40ba:	21 15       	cp	r18, r1
    40bc:	31 05       	cpc	r19, r1
    40be:	41 05       	cpc	r20, r1
    40c0:	51 05       	cpc	r21, r1
    40c2:	21 f0       	breq	.+8      	; 0x40cc <_fpadd_parts+0x16e>
    40c4:	21 e0       	ldi	r18, 0x01	; 1
    40c6:	30 e0       	ldi	r19, 0x00	; 0
    40c8:	40 e0       	ldi	r20, 0x00	; 0
    40ca:	50 e0       	ldi	r21, 0x00	; 0
    40cc:	59 01       	movw	r10, r18
    40ce:	6a 01       	movw	r12, r20
    40d0:	a6 28       	or	r10, r6
    40d2:	b7 28       	or	r11, r7
    40d4:	c8 28       	or	r12, r8
    40d6:	d9 28       	or	r13, r9
    40d8:	0b c0       	rjmp	.+22     	; 0x40f0 <_fpadd_parts+0x192>
    40da:	82 15       	cp	r24, r2
    40dc:	93 05       	cpc	r25, r3
    40de:	2c f0       	brlt	.+10     	; 0x40ea <_fpadd_parts+0x18c>
    40e0:	1c 01       	movw	r2, r24
    40e2:	aa 24       	eor	r10, r10
    40e4:	bb 24       	eor	r11, r11
    40e6:	65 01       	movw	r12, r10
    40e8:	03 c0       	rjmp	.+6      	; 0x40f0 <_fpadd_parts+0x192>
    40ea:	ee 24       	eor	r14, r14
    40ec:	ff 24       	eor	r15, r15
    40ee:	87 01       	movw	r16, r14
    40f0:	11 96       	adiw	r26, 0x01	; 1
    40f2:	9c 91       	ld	r25, X
    40f4:	d2 01       	movw	r26, r4
    40f6:	11 96       	adiw	r26, 0x01	; 1
    40f8:	8c 91       	ld	r24, X
    40fa:	98 17       	cp	r25, r24
    40fc:	09 f4       	brne	.+2      	; 0x4100 <_fpadd_parts+0x1a2>
    40fe:	45 c0       	rjmp	.+138    	; 0x418a <_fpadd_parts+0x22c>
    4100:	99 23       	and	r25, r25
    4102:	39 f0       	breq	.+14     	; 0x4112 <_fpadd_parts+0x1b4>
    4104:	a8 01       	movw	r20, r16
    4106:	97 01       	movw	r18, r14
    4108:	2a 19       	sub	r18, r10
    410a:	3b 09       	sbc	r19, r11
    410c:	4c 09       	sbc	r20, r12
    410e:	5d 09       	sbc	r21, r13
    4110:	06 c0       	rjmp	.+12     	; 0x411e <_fpadd_parts+0x1c0>
    4112:	a6 01       	movw	r20, r12
    4114:	95 01       	movw	r18, r10
    4116:	2e 19       	sub	r18, r14
    4118:	3f 09       	sbc	r19, r15
    411a:	40 0b       	sbc	r20, r16
    411c:	51 0b       	sbc	r21, r17
    411e:	57 fd       	sbrc	r21, 7
    4120:	08 c0       	rjmp	.+16     	; 0x4132 <_fpadd_parts+0x1d4>
    4122:	11 82       	std	Z+1, r1	; 0x01
    4124:	33 82       	std	Z+3, r3	; 0x03
    4126:	22 82       	std	Z+2, r2	; 0x02
    4128:	24 83       	std	Z+4, r18	; 0x04
    412a:	35 83       	std	Z+5, r19	; 0x05
    412c:	46 83       	std	Z+6, r20	; 0x06
    412e:	57 83       	std	Z+7, r21	; 0x07
    4130:	1d c0       	rjmp	.+58     	; 0x416c <_fpadd_parts+0x20e>
    4132:	81 e0       	ldi	r24, 0x01	; 1
    4134:	81 83       	std	Z+1, r24	; 0x01
    4136:	33 82       	std	Z+3, r3	; 0x03
    4138:	22 82       	std	Z+2, r2	; 0x02
    413a:	88 27       	eor	r24, r24
    413c:	99 27       	eor	r25, r25
    413e:	dc 01       	movw	r26, r24
    4140:	82 1b       	sub	r24, r18
    4142:	93 0b       	sbc	r25, r19
    4144:	a4 0b       	sbc	r26, r20
    4146:	b5 0b       	sbc	r27, r21
    4148:	84 83       	std	Z+4, r24	; 0x04
    414a:	95 83       	std	Z+5, r25	; 0x05
    414c:	a6 83       	std	Z+6, r26	; 0x06
    414e:	b7 83       	std	Z+7, r27	; 0x07
    4150:	0d c0       	rjmp	.+26     	; 0x416c <_fpadd_parts+0x20e>
    4152:	22 0f       	add	r18, r18
    4154:	33 1f       	adc	r19, r19
    4156:	44 1f       	adc	r20, r20
    4158:	55 1f       	adc	r21, r21
    415a:	24 83       	std	Z+4, r18	; 0x04
    415c:	35 83       	std	Z+5, r19	; 0x05
    415e:	46 83       	std	Z+6, r20	; 0x06
    4160:	57 83       	std	Z+7, r21	; 0x07
    4162:	82 81       	ldd	r24, Z+2	; 0x02
    4164:	93 81       	ldd	r25, Z+3	; 0x03
    4166:	01 97       	sbiw	r24, 0x01	; 1
    4168:	93 83       	std	Z+3, r25	; 0x03
    416a:	82 83       	std	Z+2, r24	; 0x02
    416c:	24 81       	ldd	r18, Z+4	; 0x04
    416e:	35 81       	ldd	r19, Z+5	; 0x05
    4170:	46 81       	ldd	r20, Z+6	; 0x06
    4172:	57 81       	ldd	r21, Z+7	; 0x07
    4174:	da 01       	movw	r26, r20
    4176:	c9 01       	movw	r24, r18
    4178:	01 97       	sbiw	r24, 0x01	; 1
    417a:	a1 09       	sbc	r26, r1
    417c:	b1 09       	sbc	r27, r1
    417e:	8f 5f       	subi	r24, 0xFF	; 255
    4180:	9f 4f       	sbci	r25, 0xFF	; 255
    4182:	af 4f       	sbci	r26, 0xFF	; 255
    4184:	bf 43       	sbci	r27, 0x3F	; 63
    4186:	28 f3       	brcs	.-54     	; 0x4152 <_fpadd_parts+0x1f4>
    4188:	0b c0       	rjmp	.+22     	; 0x41a0 <_fpadd_parts+0x242>
    418a:	91 83       	std	Z+1, r25	; 0x01
    418c:	33 82       	std	Z+3, r3	; 0x03
    418e:	22 82       	std	Z+2, r2	; 0x02
    4190:	ea 0c       	add	r14, r10
    4192:	fb 1c       	adc	r15, r11
    4194:	0c 1d       	adc	r16, r12
    4196:	1d 1d       	adc	r17, r13
    4198:	e4 82       	std	Z+4, r14	; 0x04
    419a:	f5 82       	std	Z+5, r15	; 0x05
    419c:	06 83       	std	Z+6, r16	; 0x06
    419e:	17 83       	std	Z+7, r17	; 0x07
    41a0:	83 e0       	ldi	r24, 0x03	; 3
    41a2:	80 83       	st	Z, r24
    41a4:	24 81       	ldd	r18, Z+4	; 0x04
    41a6:	35 81       	ldd	r19, Z+5	; 0x05
    41a8:	46 81       	ldd	r20, Z+6	; 0x06
    41aa:	57 81       	ldd	r21, Z+7	; 0x07
    41ac:	57 ff       	sbrs	r21, 7
    41ae:	1a c0       	rjmp	.+52     	; 0x41e4 <_fpadd_parts+0x286>
    41b0:	c9 01       	movw	r24, r18
    41b2:	aa 27       	eor	r26, r26
    41b4:	97 fd       	sbrc	r25, 7
    41b6:	a0 95       	com	r26
    41b8:	ba 2f       	mov	r27, r26
    41ba:	81 70       	andi	r24, 0x01	; 1
    41bc:	90 70       	andi	r25, 0x00	; 0
    41be:	a0 70       	andi	r26, 0x00	; 0
    41c0:	b0 70       	andi	r27, 0x00	; 0
    41c2:	56 95       	lsr	r21
    41c4:	47 95       	ror	r20
    41c6:	37 95       	ror	r19
    41c8:	27 95       	ror	r18
    41ca:	82 2b       	or	r24, r18
    41cc:	93 2b       	or	r25, r19
    41ce:	a4 2b       	or	r26, r20
    41d0:	b5 2b       	or	r27, r21
    41d2:	84 83       	std	Z+4, r24	; 0x04
    41d4:	95 83       	std	Z+5, r25	; 0x05
    41d6:	a6 83       	std	Z+6, r26	; 0x06
    41d8:	b7 83       	std	Z+7, r27	; 0x07
    41da:	82 81       	ldd	r24, Z+2	; 0x02
    41dc:	93 81       	ldd	r25, Z+3	; 0x03
    41de:	01 96       	adiw	r24, 0x01	; 1
    41e0:	93 83       	std	Z+3, r25	; 0x03
    41e2:	82 83       	std	Z+2, r24	; 0x02
    41e4:	df 01       	movw	r26, r30
    41e6:	01 c0       	rjmp	.+2      	; 0x41ea <_fpadd_parts+0x28c>
    41e8:	d2 01       	movw	r26, r4
    41ea:	cd 01       	movw	r24, r26
    41ec:	cd b7       	in	r28, 0x3d	; 61
    41ee:	de b7       	in	r29, 0x3e	; 62
    41f0:	e2 e1       	ldi	r30, 0x12	; 18
    41f2:	0c 94 f0 27 	jmp	0x4fe0	; 0x4fe0 <__epilogue_restores__>

000041f6 <__subsf3>:
    41f6:	a0 e2       	ldi	r26, 0x20	; 32
    41f8:	b0 e0       	ldi	r27, 0x00	; 0
    41fa:	e1 e0       	ldi	r30, 0x01	; 1
    41fc:	f1 e2       	ldi	r31, 0x21	; 33
    41fe:	0c 94 e0 27 	jmp	0x4fc0	; 0x4fc0 <__prologue_saves__+0x18>
    4202:	69 83       	std	Y+1, r22	; 0x01
    4204:	7a 83       	std	Y+2, r23	; 0x02
    4206:	8b 83       	std	Y+3, r24	; 0x03
    4208:	9c 83       	std	Y+4, r25	; 0x04
    420a:	2d 83       	std	Y+5, r18	; 0x05
    420c:	3e 83       	std	Y+6, r19	; 0x06
    420e:	4f 83       	std	Y+7, r20	; 0x07
    4210:	58 87       	std	Y+8, r21	; 0x08
    4212:	e9 e0       	ldi	r30, 0x09	; 9
    4214:	ee 2e       	mov	r14, r30
    4216:	f1 2c       	mov	r15, r1
    4218:	ec 0e       	add	r14, r28
    421a:	fd 1e       	adc	r15, r29
    421c:	ce 01       	movw	r24, r28
    421e:	01 96       	adiw	r24, 0x01	; 1
    4220:	b7 01       	movw	r22, r14
    4222:	0e 94 5d 26 	call	0x4cba	; 0x4cba <__unpack_f>
    4226:	8e 01       	movw	r16, r28
    4228:	0f 5e       	subi	r16, 0xEF	; 239
    422a:	1f 4f       	sbci	r17, 0xFF	; 255
    422c:	ce 01       	movw	r24, r28
    422e:	05 96       	adiw	r24, 0x05	; 5
    4230:	b8 01       	movw	r22, r16
    4232:	0e 94 5d 26 	call	0x4cba	; 0x4cba <__unpack_f>
    4236:	8a 89       	ldd	r24, Y+18	; 0x12
    4238:	91 e0       	ldi	r25, 0x01	; 1
    423a:	89 27       	eor	r24, r25
    423c:	8a 8b       	std	Y+18, r24	; 0x12
    423e:	c7 01       	movw	r24, r14
    4240:	b8 01       	movw	r22, r16
    4242:	ae 01       	movw	r20, r28
    4244:	47 5e       	subi	r20, 0xE7	; 231
    4246:	5f 4f       	sbci	r21, 0xFF	; 255
    4248:	0e 94 af 1f 	call	0x3f5e	; 0x3f5e <_fpadd_parts>
    424c:	0e 94 88 25 	call	0x4b10	; 0x4b10 <__pack_f>
    4250:	a0 96       	adiw	r28, 0x20	; 32
    4252:	e6 e0       	ldi	r30, 0x06	; 6
    4254:	0c 94 fc 27 	jmp	0x4ff8	; 0x4ff8 <__epilogue_restores__+0x18>

00004258 <__addsf3>:
    4258:	a0 e2       	ldi	r26, 0x20	; 32
    425a:	b0 e0       	ldi	r27, 0x00	; 0
    425c:	e2 e3       	ldi	r30, 0x32	; 50
    425e:	f1 e2       	ldi	r31, 0x21	; 33
    4260:	0c 94 e0 27 	jmp	0x4fc0	; 0x4fc0 <__prologue_saves__+0x18>
    4264:	69 83       	std	Y+1, r22	; 0x01
    4266:	7a 83       	std	Y+2, r23	; 0x02
    4268:	8b 83       	std	Y+3, r24	; 0x03
    426a:	9c 83       	std	Y+4, r25	; 0x04
    426c:	2d 83       	std	Y+5, r18	; 0x05
    426e:	3e 83       	std	Y+6, r19	; 0x06
    4270:	4f 83       	std	Y+7, r20	; 0x07
    4272:	58 87       	std	Y+8, r21	; 0x08
    4274:	f9 e0       	ldi	r31, 0x09	; 9
    4276:	ef 2e       	mov	r14, r31
    4278:	f1 2c       	mov	r15, r1
    427a:	ec 0e       	add	r14, r28
    427c:	fd 1e       	adc	r15, r29
    427e:	ce 01       	movw	r24, r28
    4280:	01 96       	adiw	r24, 0x01	; 1
    4282:	b7 01       	movw	r22, r14
    4284:	0e 94 5d 26 	call	0x4cba	; 0x4cba <__unpack_f>
    4288:	8e 01       	movw	r16, r28
    428a:	0f 5e       	subi	r16, 0xEF	; 239
    428c:	1f 4f       	sbci	r17, 0xFF	; 255
    428e:	ce 01       	movw	r24, r28
    4290:	05 96       	adiw	r24, 0x05	; 5
    4292:	b8 01       	movw	r22, r16
    4294:	0e 94 5d 26 	call	0x4cba	; 0x4cba <__unpack_f>
    4298:	c7 01       	movw	r24, r14
    429a:	b8 01       	movw	r22, r16
    429c:	ae 01       	movw	r20, r28
    429e:	47 5e       	subi	r20, 0xE7	; 231
    42a0:	5f 4f       	sbci	r21, 0xFF	; 255
    42a2:	0e 94 af 1f 	call	0x3f5e	; 0x3f5e <_fpadd_parts>
    42a6:	0e 94 88 25 	call	0x4b10	; 0x4b10 <__pack_f>
    42aa:	a0 96       	adiw	r28, 0x20	; 32
    42ac:	e6 e0       	ldi	r30, 0x06	; 6
    42ae:	0c 94 fc 27 	jmp	0x4ff8	; 0x4ff8 <__epilogue_restores__+0x18>

000042b2 <__mulsf3>:
    42b2:	a0 e2       	ldi	r26, 0x20	; 32
    42b4:	b0 e0       	ldi	r27, 0x00	; 0
    42b6:	ef e5       	ldi	r30, 0x5F	; 95
    42b8:	f1 e2       	ldi	r31, 0x21	; 33
    42ba:	0c 94 d4 27 	jmp	0x4fa8	; 0x4fa8 <__prologue_saves__>
    42be:	69 83       	std	Y+1, r22	; 0x01
    42c0:	7a 83       	std	Y+2, r23	; 0x02
    42c2:	8b 83       	std	Y+3, r24	; 0x03
    42c4:	9c 83       	std	Y+4, r25	; 0x04
    42c6:	2d 83       	std	Y+5, r18	; 0x05
    42c8:	3e 83       	std	Y+6, r19	; 0x06
    42ca:	4f 83       	std	Y+7, r20	; 0x07
    42cc:	58 87       	std	Y+8, r21	; 0x08
    42ce:	ce 01       	movw	r24, r28
    42d0:	01 96       	adiw	r24, 0x01	; 1
    42d2:	be 01       	movw	r22, r28
    42d4:	67 5f       	subi	r22, 0xF7	; 247
    42d6:	7f 4f       	sbci	r23, 0xFF	; 255
    42d8:	0e 94 5d 26 	call	0x4cba	; 0x4cba <__unpack_f>
    42dc:	ce 01       	movw	r24, r28
    42de:	05 96       	adiw	r24, 0x05	; 5
    42e0:	be 01       	movw	r22, r28
    42e2:	6f 5e       	subi	r22, 0xEF	; 239
    42e4:	7f 4f       	sbci	r23, 0xFF	; 255
    42e6:	0e 94 5d 26 	call	0x4cba	; 0x4cba <__unpack_f>
    42ea:	99 85       	ldd	r25, Y+9	; 0x09
    42ec:	92 30       	cpi	r25, 0x02	; 2
    42ee:	88 f0       	brcs	.+34     	; 0x4312 <__mulsf3+0x60>
    42f0:	89 89       	ldd	r24, Y+17	; 0x11
    42f2:	82 30       	cpi	r24, 0x02	; 2
    42f4:	c8 f0       	brcs	.+50     	; 0x4328 <__mulsf3+0x76>
    42f6:	94 30       	cpi	r25, 0x04	; 4
    42f8:	19 f4       	brne	.+6      	; 0x4300 <__mulsf3+0x4e>
    42fa:	82 30       	cpi	r24, 0x02	; 2
    42fc:	51 f4       	brne	.+20     	; 0x4312 <__mulsf3+0x60>
    42fe:	04 c0       	rjmp	.+8      	; 0x4308 <__mulsf3+0x56>
    4300:	84 30       	cpi	r24, 0x04	; 4
    4302:	29 f4       	brne	.+10     	; 0x430e <__mulsf3+0x5c>
    4304:	92 30       	cpi	r25, 0x02	; 2
    4306:	81 f4       	brne	.+32     	; 0x4328 <__mulsf3+0x76>
    4308:	86 ed       	ldi	r24, 0xD6	; 214
    430a:	90 e0       	ldi	r25, 0x00	; 0
    430c:	c6 c0       	rjmp	.+396    	; 0x449a <__mulsf3+0x1e8>
    430e:	92 30       	cpi	r25, 0x02	; 2
    4310:	49 f4       	brne	.+18     	; 0x4324 <__mulsf3+0x72>
    4312:	20 e0       	ldi	r18, 0x00	; 0
    4314:	9a 85       	ldd	r25, Y+10	; 0x0a
    4316:	8a 89       	ldd	r24, Y+18	; 0x12
    4318:	98 13       	cpse	r25, r24
    431a:	21 e0       	ldi	r18, 0x01	; 1
    431c:	2a 87       	std	Y+10, r18	; 0x0a
    431e:	ce 01       	movw	r24, r28
    4320:	09 96       	adiw	r24, 0x09	; 9
    4322:	bb c0       	rjmp	.+374    	; 0x449a <__mulsf3+0x1e8>
    4324:	82 30       	cpi	r24, 0x02	; 2
    4326:	49 f4       	brne	.+18     	; 0x433a <__mulsf3+0x88>
    4328:	20 e0       	ldi	r18, 0x00	; 0
    432a:	9a 85       	ldd	r25, Y+10	; 0x0a
    432c:	8a 89       	ldd	r24, Y+18	; 0x12
    432e:	98 13       	cpse	r25, r24
    4330:	21 e0       	ldi	r18, 0x01	; 1
    4332:	2a 8b       	std	Y+18, r18	; 0x12
    4334:	ce 01       	movw	r24, r28
    4336:	41 96       	adiw	r24, 0x11	; 17
    4338:	b0 c0       	rjmp	.+352    	; 0x449a <__mulsf3+0x1e8>
    433a:	2d 84       	ldd	r2, Y+13	; 0x0d
    433c:	3e 84       	ldd	r3, Y+14	; 0x0e
    433e:	4f 84       	ldd	r4, Y+15	; 0x0f
    4340:	58 88       	ldd	r5, Y+16	; 0x10
    4342:	6d 88       	ldd	r6, Y+21	; 0x15
    4344:	7e 88       	ldd	r7, Y+22	; 0x16
    4346:	8f 88       	ldd	r8, Y+23	; 0x17
    4348:	98 8c       	ldd	r9, Y+24	; 0x18
    434a:	ee 24       	eor	r14, r14
    434c:	ff 24       	eor	r15, r15
    434e:	87 01       	movw	r16, r14
    4350:	aa 24       	eor	r10, r10
    4352:	bb 24       	eor	r11, r11
    4354:	65 01       	movw	r12, r10
    4356:	40 e0       	ldi	r20, 0x00	; 0
    4358:	50 e0       	ldi	r21, 0x00	; 0
    435a:	60 e0       	ldi	r22, 0x00	; 0
    435c:	70 e0       	ldi	r23, 0x00	; 0
    435e:	e0 e0       	ldi	r30, 0x00	; 0
    4360:	f0 e0       	ldi	r31, 0x00	; 0
    4362:	c1 01       	movw	r24, r2
    4364:	81 70       	andi	r24, 0x01	; 1
    4366:	90 70       	andi	r25, 0x00	; 0
    4368:	89 2b       	or	r24, r25
    436a:	e9 f0       	breq	.+58     	; 0x43a6 <__mulsf3+0xf4>
    436c:	e6 0c       	add	r14, r6
    436e:	f7 1c       	adc	r15, r7
    4370:	08 1d       	adc	r16, r8
    4372:	19 1d       	adc	r17, r9
    4374:	9a 01       	movw	r18, r20
    4376:	ab 01       	movw	r20, r22
    4378:	2a 0d       	add	r18, r10
    437a:	3b 1d       	adc	r19, r11
    437c:	4c 1d       	adc	r20, r12
    437e:	5d 1d       	adc	r21, r13
    4380:	80 e0       	ldi	r24, 0x00	; 0
    4382:	90 e0       	ldi	r25, 0x00	; 0
    4384:	a0 e0       	ldi	r26, 0x00	; 0
    4386:	b0 e0       	ldi	r27, 0x00	; 0
    4388:	e6 14       	cp	r14, r6
    438a:	f7 04       	cpc	r15, r7
    438c:	08 05       	cpc	r16, r8
    438e:	19 05       	cpc	r17, r9
    4390:	20 f4       	brcc	.+8      	; 0x439a <__mulsf3+0xe8>
    4392:	81 e0       	ldi	r24, 0x01	; 1
    4394:	90 e0       	ldi	r25, 0x00	; 0
    4396:	a0 e0       	ldi	r26, 0x00	; 0
    4398:	b0 e0       	ldi	r27, 0x00	; 0
    439a:	ba 01       	movw	r22, r20
    439c:	a9 01       	movw	r20, r18
    439e:	48 0f       	add	r20, r24
    43a0:	59 1f       	adc	r21, r25
    43a2:	6a 1f       	adc	r22, r26
    43a4:	7b 1f       	adc	r23, r27
    43a6:	aa 0c       	add	r10, r10
    43a8:	bb 1c       	adc	r11, r11
    43aa:	cc 1c       	adc	r12, r12
    43ac:	dd 1c       	adc	r13, r13
    43ae:	97 fe       	sbrs	r9, 7
    43b0:	08 c0       	rjmp	.+16     	; 0x43c2 <__mulsf3+0x110>
    43b2:	81 e0       	ldi	r24, 0x01	; 1
    43b4:	90 e0       	ldi	r25, 0x00	; 0
    43b6:	a0 e0       	ldi	r26, 0x00	; 0
    43b8:	b0 e0       	ldi	r27, 0x00	; 0
    43ba:	a8 2a       	or	r10, r24
    43bc:	b9 2a       	or	r11, r25
    43be:	ca 2a       	or	r12, r26
    43c0:	db 2a       	or	r13, r27
    43c2:	31 96       	adiw	r30, 0x01	; 1
    43c4:	e0 32       	cpi	r30, 0x20	; 32
    43c6:	f1 05       	cpc	r31, r1
    43c8:	49 f0       	breq	.+18     	; 0x43dc <__mulsf3+0x12a>
    43ca:	66 0c       	add	r6, r6
    43cc:	77 1c       	adc	r7, r7
    43ce:	88 1c       	adc	r8, r8
    43d0:	99 1c       	adc	r9, r9
    43d2:	56 94       	lsr	r5
    43d4:	47 94       	ror	r4
    43d6:	37 94       	ror	r3
    43d8:	27 94       	ror	r2
    43da:	c3 cf       	rjmp	.-122    	; 0x4362 <__mulsf3+0xb0>
    43dc:	fa 85       	ldd	r31, Y+10	; 0x0a
    43de:	ea 89       	ldd	r30, Y+18	; 0x12
    43e0:	2b 89       	ldd	r18, Y+19	; 0x13
    43e2:	3c 89       	ldd	r19, Y+20	; 0x14
    43e4:	8b 85       	ldd	r24, Y+11	; 0x0b
    43e6:	9c 85       	ldd	r25, Y+12	; 0x0c
    43e8:	28 0f       	add	r18, r24
    43ea:	39 1f       	adc	r19, r25
    43ec:	2e 5f       	subi	r18, 0xFE	; 254
    43ee:	3f 4f       	sbci	r19, 0xFF	; 255
    43f0:	17 c0       	rjmp	.+46     	; 0x4420 <__mulsf3+0x16e>
    43f2:	ca 01       	movw	r24, r20
    43f4:	81 70       	andi	r24, 0x01	; 1
    43f6:	90 70       	andi	r25, 0x00	; 0
    43f8:	89 2b       	or	r24, r25
    43fa:	61 f0       	breq	.+24     	; 0x4414 <__mulsf3+0x162>
    43fc:	16 95       	lsr	r17
    43fe:	07 95       	ror	r16
    4400:	f7 94       	ror	r15
    4402:	e7 94       	ror	r14
    4404:	80 e0       	ldi	r24, 0x00	; 0
    4406:	90 e0       	ldi	r25, 0x00	; 0
    4408:	a0 e0       	ldi	r26, 0x00	; 0
    440a:	b0 e8       	ldi	r27, 0x80	; 128
    440c:	e8 2a       	or	r14, r24
    440e:	f9 2a       	or	r15, r25
    4410:	0a 2b       	or	r16, r26
    4412:	1b 2b       	or	r17, r27
    4414:	76 95       	lsr	r23
    4416:	67 95       	ror	r22
    4418:	57 95       	ror	r21
    441a:	47 95       	ror	r20
    441c:	2f 5f       	subi	r18, 0xFF	; 255
    441e:	3f 4f       	sbci	r19, 0xFF	; 255
    4420:	77 fd       	sbrc	r23, 7
    4422:	e7 cf       	rjmp	.-50     	; 0x43f2 <__mulsf3+0x140>
    4424:	0c c0       	rjmp	.+24     	; 0x443e <__mulsf3+0x18c>
    4426:	44 0f       	add	r20, r20
    4428:	55 1f       	adc	r21, r21
    442a:	66 1f       	adc	r22, r22
    442c:	77 1f       	adc	r23, r23
    442e:	17 fd       	sbrc	r17, 7
    4430:	41 60       	ori	r20, 0x01	; 1
    4432:	ee 0c       	add	r14, r14
    4434:	ff 1c       	adc	r15, r15
    4436:	00 1f       	adc	r16, r16
    4438:	11 1f       	adc	r17, r17
    443a:	21 50       	subi	r18, 0x01	; 1
    443c:	30 40       	sbci	r19, 0x00	; 0
    443e:	40 30       	cpi	r20, 0x00	; 0
    4440:	90 e0       	ldi	r25, 0x00	; 0
    4442:	59 07       	cpc	r21, r25
    4444:	90 e0       	ldi	r25, 0x00	; 0
    4446:	69 07       	cpc	r22, r25
    4448:	90 e4       	ldi	r25, 0x40	; 64
    444a:	79 07       	cpc	r23, r25
    444c:	60 f3       	brcs	.-40     	; 0x4426 <__mulsf3+0x174>
    444e:	2b 8f       	std	Y+27, r18	; 0x1b
    4450:	3c 8f       	std	Y+28, r19	; 0x1c
    4452:	db 01       	movw	r26, r22
    4454:	ca 01       	movw	r24, r20
    4456:	8f 77       	andi	r24, 0x7F	; 127
    4458:	90 70       	andi	r25, 0x00	; 0
    445a:	a0 70       	andi	r26, 0x00	; 0
    445c:	b0 70       	andi	r27, 0x00	; 0
    445e:	80 34       	cpi	r24, 0x40	; 64
    4460:	91 05       	cpc	r25, r1
    4462:	a1 05       	cpc	r26, r1
    4464:	b1 05       	cpc	r27, r1
    4466:	61 f4       	brne	.+24     	; 0x4480 <__mulsf3+0x1ce>
    4468:	47 fd       	sbrc	r20, 7
    446a:	0a c0       	rjmp	.+20     	; 0x4480 <__mulsf3+0x1ce>
    446c:	e1 14       	cp	r14, r1
    446e:	f1 04       	cpc	r15, r1
    4470:	01 05       	cpc	r16, r1
    4472:	11 05       	cpc	r17, r1
    4474:	29 f0       	breq	.+10     	; 0x4480 <__mulsf3+0x1ce>
    4476:	40 5c       	subi	r20, 0xC0	; 192
    4478:	5f 4f       	sbci	r21, 0xFF	; 255
    447a:	6f 4f       	sbci	r22, 0xFF	; 255
    447c:	7f 4f       	sbci	r23, 0xFF	; 255
    447e:	40 78       	andi	r20, 0x80	; 128
    4480:	1a 8e       	std	Y+26, r1	; 0x1a
    4482:	fe 17       	cp	r31, r30
    4484:	11 f0       	breq	.+4      	; 0x448a <__mulsf3+0x1d8>
    4486:	81 e0       	ldi	r24, 0x01	; 1
    4488:	8a 8f       	std	Y+26, r24	; 0x1a
    448a:	4d 8f       	std	Y+29, r20	; 0x1d
    448c:	5e 8f       	std	Y+30, r21	; 0x1e
    448e:	6f 8f       	std	Y+31, r22	; 0x1f
    4490:	78 a3       	std	Y+32, r23	; 0x20
    4492:	83 e0       	ldi	r24, 0x03	; 3
    4494:	89 8f       	std	Y+25, r24	; 0x19
    4496:	ce 01       	movw	r24, r28
    4498:	49 96       	adiw	r24, 0x19	; 25
    449a:	0e 94 88 25 	call	0x4b10	; 0x4b10 <__pack_f>
    449e:	a0 96       	adiw	r28, 0x20	; 32
    44a0:	e2 e1       	ldi	r30, 0x12	; 18
    44a2:	0c 94 f0 27 	jmp	0x4fe0	; 0x4fe0 <__epilogue_restores__>

000044a6 <__divsf3>:
    44a6:	a8 e1       	ldi	r26, 0x18	; 24
    44a8:	b0 e0       	ldi	r27, 0x00	; 0
    44aa:	e9 e5       	ldi	r30, 0x59	; 89
    44ac:	f2 e2       	ldi	r31, 0x22	; 34
    44ae:	0c 94 dc 27 	jmp	0x4fb8	; 0x4fb8 <__prologue_saves__+0x10>
    44b2:	69 83       	std	Y+1, r22	; 0x01
    44b4:	7a 83       	std	Y+2, r23	; 0x02
    44b6:	8b 83       	std	Y+3, r24	; 0x03
    44b8:	9c 83       	std	Y+4, r25	; 0x04
    44ba:	2d 83       	std	Y+5, r18	; 0x05
    44bc:	3e 83       	std	Y+6, r19	; 0x06
    44be:	4f 83       	std	Y+7, r20	; 0x07
    44c0:	58 87       	std	Y+8, r21	; 0x08
    44c2:	b9 e0       	ldi	r27, 0x09	; 9
    44c4:	eb 2e       	mov	r14, r27
    44c6:	f1 2c       	mov	r15, r1
    44c8:	ec 0e       	add	r14, r28
    44ca:	fd 1e       	adc	r15, r29
    44cc:	ce 01       	movw	r24, r28
    44ce:	01 96       	adiw	r24, 0x01	; 1
    44d0:	b7 01       	movw	r22, r14
    44d2:	0e 94 5d 26 	call	0x4cba	; 0x4cba <__unpack_f>
    44d6:	8e 01       	movw	r16, r28
    44d8:	0f 5e       	subi	r16, 0xEF	; 239
    44da:	1f 4f       	sbci	r17, 0xFF	; 255
    44dc:	ce 01       	movw	r24, r28
    44de:	05 96       	adiw	r24, 0x05	; 5
    44e0:	b8 01       	movw	r22, r16
    44e2:	0e 94 5d 26 	call	0x4cba	; 0x4cba <__unpack_f>
    44e6:	29 85       	ldd	r18, Y+9	; 0x09
    44e8:	22 30       	cpi	r18, 0x02	; 2
    44ea:	08 f4       	brcc	.+2      	; 0x44ee <__divsf3+0x48>
    44ec:	7e c0       	rjmp	.+252    	; 0x45ea <__divsf3+0x144>
    44ee:	39 89       	ldd	r19, Y+17	; 0x11
    44f0:	32 30       	cpi	r19, 0x02	; 2
    44f2:	10 f4       	brcc	.+4      	; 0x44f8 <__divsf3+0x52>
    44f4:	b8 01       	movw	r22, r16
    44f6:	7c c0       	rjmp	.+248    	; 0x45f0 <__divsf3+0x14a>
    44f8:	8a 85       	ldd	r24, Y+10	; 0x0a
    44fa:	9a 89       	ldd	r25, Y+18	; 0x12
    44fc:	89 27       	eor	r24, r25
    44fe:	8a 87       	std	Y+10, r24	; 0x0a
    4500:	24 30       	cpi	r18, 0x04	; 4
    4502:	11 f0       	breq	.+4      	; 0x4508 <__divsf3+0x62>
    4504:	22 30       	cpi	r18, 0x02	; 2
    4506:	31 f4       	brne	.+12     	; 0x4514 <__divsf3+0x6e>
    4508:	23 17       	cp	r18, r19
    450a:	09 f0       	breq	.+2      	; 0x450e <__divsf3+0x68>
    450c:	6e c0       	rjmp	.+220    	; 0x45ea <__divsf3+0x144>
    450e:	66 ed       	ldi	r22, 0xD6	; 214
    4510:	70 e0       	ldi	r23, 0x00	; 0
    4512:	6e c0       	rjmp	.+220    	; 0x45f0 <__divsf3+0x14a>
    4514:	34 30       	cpi	r19, 0x04	; 4
    4516:	39 f4       	brne	.+14     	; 0x4526 <__divsf3+0x80>
    4518:	1d 86       	std	Y+13, r1	; 0x0d
    451a:	1e 86       	std	Y+14, r1	; 0x0e
    451c:	1f 86       	std	Y+15, r1	; 0x0f
    451e:	18 8a       	std	Y+16, r1	; 0x10
    4520:	1c 86       	std	Y+12, r1	; 0x0c
    4522:	1b 86       	std	Y+11, r1	; 0x0b
    4524:	04 c0       	rjmp	.+8      	; 0x452e <__divsf3+0x88>
    4526:	32 30       	cpi	r19, 0x02	; 2
    4528:	21 f4       	brne	.+8      	; 0x4532 <__divsf3+0x8c>
    452a:	84 e0       	ldi	r24, 0x04	; 4
    452c:	89 87       	std	Y+9, r24	; 0x09
    452e:	b7 01       	movw	r22, r14
    4530:	5f c0       	rjmp	.+190    	; 0x45f0 <__divsf3+0x14a>
    4532:	2b 85       	ldd	r18, Y+11	; 0x0b
    4534:	3c 85       	ldd	r19, Y+12	; 0x0c
    4536:	8b 89       	ldd	r24, Y+19	; 0x13
    4538:	9c 89       	ldd	r25, Y+20	; 0x14
    453a:	28 1b       	sub	r18, r24
    453c:	39 0b       	sbc	r19, r25
    453e:	3c 87       	std	Y+12, r19	; 0x0c
    4540:	2b 87       	std	Y+11, r18	; 0x0b
    4542:	ed 84       	ldd	r14, Y+13	; 0x0d
    4544:	fe 84       	ldd	r15, Y+14	; 0x0e
    4546:	0f 85       	ldd	r16, Y+15	; 0x0f
    4548:	18 89       	ldd	r17, Y+16	; 0x10
    454a:	ad 88       	ldd	r10, Y+21	; 0x15
    454c:	be 88       	ldd	r11, Y+22	; 0x16
    454e:	cf 88       	ldd	r12, Y+23	; 0x17
    4550:	d8 8c       	ldd	r13, Y+24	; 0x18
    4552:	ea 14       	cp	r14, r10
    4554:	fb 04       	cpc	r15, r11
    4556:	0c 05       	cpc	r16, r12
    4558:	1d 05       	cpc	r17, r13
    455a:	40 f4       	brcc	.+16     	; 0x456c <__divsf3+0xc6>
    455c:	ee 0c       	add	r14, r14
    455e:	ff 1c       	adc	r15, r15
    4560:	00 1f       	adc	r16, r16
    4562:	11 1f       	adc	r17, r17
    4564:	21 50       	subi	r18, 0x01	; 1
    4566:	30 40       	sbci	r19, 0x00	; 0
    4568:	3c 87       	std	Y+12, r19	; 0x0c
    456a:	2b 87       	std	Y+11, r18	; 0x0b
    456c:	20 e0       	ldi	r18, 0x00	; 0
    456e:	30 e0       	ldi	r19, 0x00	; 0
    4570:	40 e0       	ldi	r20, 0x00	; 0
    4572:	50 e0       	ldi	r21, 0x00	; 0
    4574:	80 e0       	ldi	r24, 0x00	; 0
    4576:	90 e0       	ldi	r25, 0x00	; 0
    4578:	a0 e0       	ldi	r26, 0x00	; 0
    457a:	b0 e4       	ldi	r27, 0x40	; 64
    457c:	60 e0       	ldi	r22, 0x00	; 0
    457e:	70 e0       	ldi	r23, 0x00	; 0
    4580:	ea 14       	cp	r14, r10
    4582:	fb 04       	cpc	r15, r11
    4584:	0c 05       	cpc	r16, r12
    4586:	1d 05       	cpc	r17, r13
    4588:	40 f0       	brcs	.+16     	; 0x459a <__divsf3+0xf4>
    458a:	28 2b       	or	r18, r24
    458c:	39 2b       	or	r19, r25
    458e:	4a 2b       	or	r20, r26
    4590:	5b 2b       	or	r21, r27
    4592:	ea 18       	sub	r14, r10
    4594:	fb 08       	sbc	r15, r11
    4596:	0c 09       	sbc	r16, r12
    4598:	1d 09       	sbc	r17, r13
    459a:	b6 95       	lsr	r27
    459c:	a7 95       	ror	r26
    459e:	97 95       	ror	r25
    45a0:	87 95       	ror	r24
    45a2:	ee 0c       	add	r14, r14
    45a4:	ff 1c       	adc	r15, r15
    45a6:	00 1f       	adc	r16, r16
    45a8:	11 1f       	adc	r17, r17
    45aa:	6f 5f       	subi	r22, 0xFF	; 255
    45ac:	7f 4f       	sbci	r23, 0xFF	; 255
    45ae:	6f 31       	cpi	r22, 0x1F	; 31
    45b0:	71 05       	cpc	r23, r1
    45b2:	31 f7       	brne	.-52     	; 0x4580 <__divsf3+0xda>
    45b4:	da 01       	movw	r26, r20
    45b6:	c9 01       	movw	r24, r18
    45b8:	8f 77       	andi	r24, 0x7F	; 127
    45ba:	90 70       	andi	r25, 0x00	; 0
    45bc:	a0 70       	andi	r26, 0x00	; 0
    45be:	b0 70       	andi	r27, 0x00	; 0
    45c0:	80 34       	cpi	r24, 0x40	; 64
    45c2:	91 05       	cpc	r25, r1
    45c4:	a1 05       	cpc	r26, r1
    45c6:	b1 05       	cpc	r27, r1
    45c8:	61 f4       	brne	.+24     	; 0x45e2 <__divsf3+0x13c>
    45ca:	27 fd       	sbrc	r18, 7
    45cc:	0a c0       	rjmp	.+20     	; 0x45e2 <__divsf3+0x13c>
    45ce:	e1 14       	cp	r14, r1
    45d0:	f1 04       	cpc	r15, r1
    45d2:	01 05       	cpc	r16, r1
    45d4:	11 05       	cpc	r17, r1
    45d6:	29 f0       	breq	.+10     	; 0x45e2 <__divsf3+0x13c>
    45d8:	20 5c       	subi	r18, 0xC0	; 192
    45da:	3f 4f       	sbci	r19, 0xFF	; 255
    45dc:	4f 4f       	sbci	r20, 0xFF	; 255
    45de:	5f 4f       	sbci	r21, 0xFF	; 255
    45e0:	20 78       	andi	r18, 0x80	; 128
    45e2:	2d 87       	std	Y+13, r18	; 0x0d
    45e4:	3e 87       	std	Y+14, r19	; 0x0e
    45e6:	4f 87       	std	Y+15, r20	; 0x0f
    45e8:	58 8b       	std	Y+16, r21	; 0x10
    45ea:	be 01       	movw	r22, r28
    45ec:	67 5f       	subi	r22, 0xF7	; 247
    45ee:	7f 4f       	sbci	r23, 0xFF	; 255
    45f0:	cb 01       	movw	r24, r22
    45f2:	0e 94 88 25 	call	0x4b10	; 0x4b10 <__pack_f>
    45f6:	68 96       	adiw	r28, 0x18	; 24
    45f8:	ea e0       	ldi	r30, 0x0A	; 10
    45fa:	0c 94 f8 27 	jmp	0x4ff0	; 0x4ff0 <__epilogue_restores__+0x10>

000045fe <__gtsf2>:
    45fe:	a8 e1       	ldi	r26, 0x18	; 24
    4600:	b0 e0       	ldi	r27, 0x00	; 0
    4602:	e5 e0       	ldi	r30, 0x05	; 5
    4604:	f3 e2       	ldi	r31, 0x23	; 35
    4606:	0c 94 e0 27 	jmp	0x4fc0	; 0x4fc0 <__prologue_saves__+0x18>
    460a:	69 83       	std	Y+1, r22	; 0x01
    460c:	7a 83       	std	Y+2, r23	; 0x02
    460e:	8b 83       	std	Y+3, r24	; 0x03
    4610:	9c 83       	std	Y+4, r25	; 0x04
    4612:	2d 83       	std	Y+5, r18	; 0x05
    4614:	3e 83       	std	Y+6, r19	; 0x06
    4616:	4f 83       	std	Y+7, r20	; 0x07
    4618:	58 87       	std	Y+8, r21	; 0x08
    461a:	89 e0       	ldi	r24, 0x09	; 9
    461c:	e8 2e       	mov	r14, r24
    461e:	f1 2c       	mov	r15, r1
    4620:	ec 0e       	add	r14, r28
    4622:	fd 1e       	adc	r15, r29
    4624:	ce 01       	movw	r24, r28
    4626:	01 96       	adiw	r24, 0x01	; 1
    4628:	b7 01       	movw	r22, r14
    462a:	0e 94 5d 26 	call	0x4cba	; 0x4cba <__unpack_f>
    462e:	8e 01       	movw	r16, r28
    4630:	0f 5e       	subi	r16, 0xEF	; 239
    4632:	1f 4f       	sbci	r17, 0xFF	; 255
    4634:	ce 01       	movw	r24, r28
    4636:	05 96       	adiw	r24, 0x05	; 5
    4638:	b8 01       	movw	r22, r16
    463a:	0e 94 5d 26 	call	0x4cba	; 0x4cba <__unpack_f>
    463e:	89 85       	ldd	r24, Y+9	; 0x09
    4640:	82 30       	cpi	r24, 0x02	; 2
    4642:	40 f0       	brcs	.+16     	; 0x4654 <__gtsf2+0x56>
    4644:	89 89       	ldd	r24, Y+17	; 0x11
    4646:	82 30       	cpi	r24, 0x02	; 2
    4648:	28 f0       	brcs	.+10     	; 0x4654 <__gtsf2+0x56>
    464a:	c7 01       	movw	r24, r14
    464c:	b8 01       	movw	r22, r16
    464e:	0e 94 d5 26 	call	0x4daa	; 0x4daa <__fpcmp_parts_f>
    4652:	01 c0       	rjmp	.+2      	; 0x4656 <__gtsf2+0x58>
    4654:	8f ef       	ldi	r24, 0xFF	; 255
    4656:	68 96       	adiw	r28, 0x18	; 24
    4658:	e6 e0       	ldi	r30, 0x06	; 6
    465a:	0c 94 fc 27 	jmp	0x4ff8	; 0x4ff8 <__epilogue_restores__+0x18>

0000465e <__gesf2>:
    465e:	a8 e1       	ldi	r26, 0x18	; 24
    4660:	b0 e0       	ldi	r27, 0x00	; 0
    4662:	e5 e3       	ldi	r30, 0x35	; 53
    4664:	f3 e2       	ldi	r31, 0x23	; 35
    4666:	0c 94 e0 27 	jmp	0x4fc0	; 0x4fc0 <__prologue_saves__+0x18>
    466a:	69 83       	std	Y+1, r22	; 0x01
    466c:	7a 83       	std	Y+2, r23	; 0x02
    466e:	8b 83       	std	Y+3, r24	; 0x03
    4670:	9c 83       	std	Y+4, r25	; 0x04
    4672:	2d 83       	std	Y+5, r18	; 0x05
    4674:	3e 83       	std	Y+6, r19	; 0x06
    4676:	4f 83       	std	Y+7, r20	; 0x07
    4678:	58 87       	std	Y+8, r21	; 0x08
    467a:	89 e0       	ldi	r24, 0x09	; 9
    467c:	e8 2e       	mov	r14, r24
    467e:	f1 2c       	mov	r15, r1
    4680:	ec 0e       	add	r14, r28
    4682:	fd 1e       	adc	r15, r29
    4684:	ce 01       	movw	r24, r28
    4686:	01 96       	adiw	r24, 0x01	; 1
    4688:	b7 01       	movw	r22, r14
    468a:	0e 94 5d 26 	call	0x4cba	; 0x4cba <__unpack_f>
    468e:	8e 01       	movw	r16, r28
    4690:	0f 5e       	subi	r16, 0xEF	; 239
    4692:	1f 4f       	sbci	r17, 0xFF	; 255
    4694:	ce 01       	movw	r24, r28
    4696:	05 96       	adiw	r24, 0x05	; 5
    4698:	b8 01       	movw	r22, r16
    469a:	0e 94 5d 26 	call	0x4cba	; 0x4cba <__unpack_f>
    469e:	89 85       	ldd	r24, Y+9	; 0x09
    46a0:	82 30       	cpi	r24, 0x02	; 2
    46a2:	40 f0       	brcs	.+16     	; 0x46b4 <__gesf2+0x56>
    46a4:	89 89       	ldd	r24, Y+17	; 0x11
    46a6:	82 30       	cpi	r24, 0x02	; 2
    46a8:	28 f0       	brcs	.+10     	; 0x46b4 <__gesf2+0x56>
    46aa:	c7 01       	movw	r24, r14
    46ac:	b8 01       	movw	r22, r16
    46ae:	0e 94 d5 26 	call	0x4daa	; 0x4daa <__fpcmp_parts_f>
    46b2:	01 c0       	rjmp	.+2      	; 0x46b6 <__gesf2+0x58>
    46b4:	8f ef       	ldi	r24, 0xFF	; 255
    46b6:	68 96       	adiw	r28, 0x18	; 24
    46b8:	e6 e0       	ldi	r30, 0x06	; 6
    46ba:	0c 94 fc 27 	jmp	0x4ff8	; 0x4ff8 <__epilogue_restores__+0x18>

000046be <__ltsf2>:
    46be:	a8 e1       	ldi	r26, 0x18	; 24
    46c0:	b0 e0       	ldi	r27, 0x00	; 0
    46c2:	e5 e6       	ldi	r30, 0x65	; 101
    46c4:	f3 e2       	ldi	r31, 0x23	; 35
    46c6:	0c 94 e0 27 	jmp	0x4fc0	; 0x4fc0 <__prologue_saves__+0x18>
    46ca:	69 83       	std	Y+1, r22	; 0x01
    46cc:	7a 83       	std	Y+2, r23	; 0x02
    46ce:	8b 83       	std	Y+3, r24	; 0x03
    46d0:	9c 83       	std	Y+4, r25	; 0x04
    46d2:	2d 83       	std	Y+5, r18	; 0x05
    46d4:	3e 83       	std	Y+6, r19	; 0x06
    46d6:	4f 83       	std	Y+7, r20	; 0x07
    46d8:	58 87       	std	Y+8, r21	; 0x08
    46da:	89 e0       	ldi	r24, 0x09	; 9
    46dc:	e8 2e       	mov	r14, r24
    46de:	f1 2c       	mov	r15, r1
    46e0:	ec 0e       	add	r14, r28
    46e2:	fd 1e       	adc	r15, r29
    46e4:	ce 01       	movw	r24, r28
    46e6:	01 96       	adiw	r24, 0x01	; 1
    46e8:	b7 01       	movw	r22, r14
    46ea:	0e 94 5d 26 	call	0x4cba	; 0x4cba <__unpack_f>
    46ee:	8e 01       	movw	r16, r28
    46f0:	0f 5e       	subi	r16, 0xEF	; 239
    46f2:	1f 4f       	sbci	r17, 0xFF	; 255
    46f4:	ce 01       	movw	r24, r28
    46f6:	05 96       	adiw	r24, 0x05	; 5
    46f8:	b8 01       	movw	r22, r16
    46fa:	0e 94 5d 26 	call	0x4cba	; 0x4cba <__unpack_f>
    46fe:	89 85       	ldd	r24, Y+9	; 0x09
    4700:	82 30       	cpi	r24, 0x02	; 2
    4702:	40 f0       	brcs	.+16     	; 0x4714 <__ltsf2+0x56>
    4704:	89 89       	ldd	r24, Y+17	; 0x11
    4706:	82 30       	cpi	r24, 0x02	; 2
    4708:	28 f0       	brcs	.+10     	; 0x4714 <__ltsf2+0x56>
    470a:	c7 01       	movw	r24, r14
    470c:	b8 01       	movw	r22, r16
    470e:	0e 94 d5 26 	call	0x4daa	; 0x4daa <__fpcmp_parts_f>
    4712:	01 c0       	rjmp	.+2      	; 0x4716 <__ltsf2+0x58>
    4714:	81 e0       	ldi	r24, 0x01	; 1
    4716:	68 96       	adiw	r28, 0x18	; 24
    4718:	e6 e0       	ldi	r30, 0x06	; 6
    471a:	0c 94 fc 27 	jmp	0x4ff8	; 0x4ff8 <__epilogue_restores__+0x18>

0000471e <__floatsisf>:
    471e:	a8 e0       	ldi	r26, 0x08	; 8
    4720:	b0 e0       	ldi	r27, 0x00	; 0
    4722:	e5 e9       	ldi	r30, 0x95	; 149
    4724:	f3 e2       	ldi	r31, 0x23	; 35
    4726:	0c 94 dd 27 	jmp	0x4fba	; 0x4fba <__prologue_saves__+0x12>
    472a:	9b 01       	movw	r18, r22
    472c:	ac 01       	movw	r20, r24
    472e:	83 e0       	ldi	r24, 0x03	; 3
    4730:	89 83       	std	Y+1, r24	; 0x01
    4732:	da 01       	movw	r26, r20
    4734:	c9 01       	movw	r24, r18
    4736:	88 27       	eor	r24, r24
    4738:	b7 fd       	sbrc	r27, 7
    473a:	83 95       	inc	r24
    473c:	99 27       	eor	r25, r25
    473e:	aa 27       	eor	r26, r26
    4740:	bb 27       	eor	r27, r27
    4742:	b8 2e       	mov	r11, r24
    4744:	21 15       	cp	r18, r1
    4746:	31 05       	cpc	r19, r1
    4748:	41 05       	cpc	r20, r1
    474a:	51 05       	cpc	r21, r1
    474c:	19 f4       	brne	.+6      	; 0x4754 <__floatsisf+0x36>
    474e:	82 e0       	ldi	r24, 0x02	; 2
    4750:	89 83       	std	Y+1, r24	; 0x01
    4752:	3a c0       	rjmp	.+116    	; 0x47c8 <__floatsisf+0xaa>
    4754:	88 23       	and	r24, r24
    4756:	a9 f0       	breq	.+42     	; 0x4782 <__floatsisf+0x64>
    4758:	20 30       	cpi	r18, 0x00	; 0
    475a:	80 e0       	ldi	r24, 0x00	; 0
    475c:	38 07       	cpc	r19, r24
    475e:	80 e0       	ldi	r24, 0x00	; 0
    4760:	48 07       	cpc	r20, r24
    4762:	80 e8       	ldi	r24, 0x80	; 128
    4764:	58 07       	cpc	r21, r24
    4766:	29 f4       	brne	.+10     	; 0x4772 <__floatsisf+0x54>
    4768:	60 e0       	ldi	r22, 0x00	; 0
    476a:	70 e0       	ldi	r23, 0x00	; 0
    476c:	80 e0       	ldi	r24, 0x00	; 0
    476e:	9f ec       	ldi	r25, 0xCF	; 207
    4770:	30 c0       	rjmp	.+96     	; 0x47d2 <__floatsisf+0xb4>
    4772:	ee 24       	eor	r14, r14
    4774:	ff 24       	eor	r15, r15
    4776:	87 01       	movw	r16, r14
    4778:	e2 1a       	sub	r14, r18
    477a:	f3 0a       	sbc	r15, r19
    477c:	04 0b       	sbc	r16, r20
    477e:	15 0b       	sbc	r17, r21
    4780:	02 c0       	rjmp	.+4      	; 0x4786 <__floatsisf+0x68>
    4782:	79 01       	movw	r14, r18
    4784:	8a 01       	movw	r16, r20
    4786:	8e e1       	ldi	r24, 0x1E	; 30
    4788:	c8 2e       	mov	r12, r24
    478a:	d1 2c       	mov	r13, r1
    478c:	dc 82       	std	Y+4, r13	; 0x04
    478e:	cb 82       	std	Y+3, r12	; 0x03
    4790:	ed 82       	std	Y+5, r14	; 0x05
    4792:	fe 82       	std	Y+6, r15	; 0x06
    4794:	0f 83       	std	Y+7, r16	; 0x07
    4796:	18 87       	std	Y+8, r17	; 0x08
    4798:	c8 01       	movw	r24, r16
    479a:	b7 01       	movw	r22, r14
    479c:	0e 94 39 25 	call	0x4a72	; 0x4a72 <__clzsi2>
    47a0:	01 97       	sbiw	r24, 0x01	; 1
    47a2:	18 16       	cp	r1, r24
    47a4:	19 06       	cpc	r1, r25
    47a6:	84 f4       	brge	.+32     	; 0x47c8 <__floatsisf+0xaa>
    47a8:	08 2e       	mov	r0, r24
    47aa:	04 c0       	rjmp	.+8      	; 0x47b4 <__floatsisf+0x96>
    47ac:	ee 0c       	add	r14, r14
    47ae:	ff 1c       	adc	r15, r15
    47b0:	00 1f       	adc	r16, r16
    47b2:	11 1f       	adc	r17, r17
    47b4:	0a 94       	dec	r0
    47b6:	d2 f7       	brpl	.-12     	; 0x47ac <__floatsisf+0x8e>
    47b8:	ed 82       	std	Y+5, r14	; 0x05
    47ba:	fe 82       	std	Y+6, r15	; 0x06
    47bc:	0f 83       	std	Y+7, r16	; 0x07
    47be:	18 87       	std	Y+8, r17	; 0x08
    47c0:	c8 1a       	sub	r12, r24
    47c2:	d9 0a       	sbc	r13, r25
    47c4:	dc 82       	std	Y+4, r13	; 0x04
    47c6:	cb 82       	std	Y+3, r12	; 0x03
    47c8:	ba 82       	std	Y+2, r11	; 0x02
    47ca:	ce 01       	movw	r24, r28
    47cc:	01 96       	adiw	r24, 0x01	; 1
    47ce:	0e 94 88 25 	call	0x4b10	; 0x4b10 <__pack_f>
    47d2:	28 96       	adiw	r28, 0x08	; 8
    47d4:	e9 e0       	ldi	r30, 0x09	; 9
    47d6:	0c 94 f9 27 	jmp	0x4ff2	; 0x4ff2 <__epilogue_restores__+0x12>

000047da <__fixsfsi>:
    47da:	ac e0       	ldi	r26, 0x0C	; 12
    47dc:	b0 e0       	ldi	r27, 0x00	; 0
    47de:	e3 ef       	ldi	r30, 0xF3	; 243
    47e0:	f3 e2       	ldi	r31, 0x23	; 35
    47e2:	0c 94 e4 27 	jmp	0x4fc8	; 0x4fc8 <__prologue_saves__+0x20>
    47e6:	69 83       	std	Y+1, r22	; 0x01
    47e8:	7a 83       	std	Y+2, r23	; 0x02
    47ea:	8b 83       	std	Y+3, r24	; 0x03
    47ec:	9c 83       	std	Y+4, r25	; 0x04
    47ee:	ce 01       	movw	r24, r28
    47f0:	01 96       	adiw	r24, 0x01	; 1
    47f2:	be 01       	movw	r22, r28
    47f4:	6b 5f       	subi	r22, 0xFB	; 251
    47f6:	7f 4f       	sbci	r23, 0xFF	; 255
    47f8:	0e 94 5d 26 	call	0x4cba	; 0x4cba <__unpack_f>
    47fc:	8d 81       	ldd	r24, Y+5	; 0x05
    47fe:	82 30       	cpi	r24, 0x02	; 2
    4800:	61 f1       	breq	.+88     	; 0x485a <__fixsfsi+0x80>
    4802:	82 30       	cpi	r24, 0x02	; 2
    4804:	50 f1       	brcs	.+84     	; 0x485a <__fixsfsi+0x80>
    4806:	84 30       	cpi	r24, 0x04	; 4
    4808:	21 f4       	brne	.+8      	; 0x4812 <__fixsfsi+0x38>
    480a:	8e 81       	ldd	r24, Y+6	; 0x06
    480c:	88 23       	and	r24, r24
    480e:	51 f1       	breq	.+84     	; 0x4864 <__fixsfsi+0x8a>
    4810:	2e c0       	rjmp	.+92     	; 0x486e <__fixsfsi+0x94>
    4812:	2f 81       	ldd	r18, Y+7	; 0x07
    4814:	38 85       	ldd	r19, Y+8	; 0x08
    4816:	37 fd       	sbrc	r19, 7
    4818:	20 c0       	rjmp	.+64     	; 0x485a <__fixsfsi+0x80>
    481a:	6e 81       	ldd	r22, Y+6	; 0x06
    481c:	2f 31       	cpi	r18, 0x1F	; 31
    481e:	31 05       	cpc	r19, r1
    4820:	1c f0       	brlt	.+6      	; 0x4828 <__fixsfsi+0x4e>
    4822:	66 23       	and	r22, r22
    4824:	f9 f0       	breq	.+62     	; 0x4864 <__fixsfsi+0x8a>
    4826:	23 c0       	rjmp	.+70     	; 0x486e <__fixsfsi+0x94>
    4828:	8e e1       	ldi	r24, 0x1E	; 30
    482a:	90 e0       	ldi	r25, 0x00	; 0
    482c:	82 1b       	sub	r24, r18
    482e:	93 0b       	sbc	r25, r19
    4830:	29 85       	ldd	r18, Y+9	; 0x09
    4832:	3a 85       	ldd	r19, Y+10	; 0x0a
    4834:	4b 85       	ldd	r20, Y+11	; 0x0b
    4836:	5c 85       	ldd	r21, Y+12	; 0x0c
    4838:	04 c0       	rjmp	.+8      	; 0x4842 <__fixsfsi+0x68>
    483a:	56 95       	lsr	r21
    483c:	47 95       	ror	r20
    483e:	37 95       	ror	r19
    4840:	27 95       	ror	r18
    4842:	8a 95       	dec	r24
    4844:	d2 f7       	brpl	.-12     	; 0x483a <__fixsfsi+0x60>
    4846:	66 23       	and	r22, r22
    4848:	b1 f0       	breq	.+44     	; 0x4876 <__fixsfsi+0x9c>
    484a:	50 95       	com	r21
    484c:	40 95       	com	r20
    484e:	30 95       	com	r19
    4850:	21 95       	neg	r18
    4852:	3f 4f       	sbci	r19, 0xFF	; 255
    4854:	4f 4f       	sbci	r20, 0xFF	; 255
    4856:	5f 4f       	sbci	r21, 0xFF	; 255
    4858:	0e c0       	rjmp	.+28     	; 0x4876 <__fixsfsi+0x9c>
    485a:	20 e0       	ldi	r18, 0x00	; 0
    485c:	30 e0       	ldi	r19, 0x00	; 0
    485e:	40 e0       	ldi	r20, 0x00	; 0
    4860:	50 e0       	ldi	r21, 0x00	; 0
    4862:	09 c0       	rjmp	.+18     	; 0x4876 <__fixsfsi+0x9c>
    4864:	2f ef       	ldi	r18, 0xFF	; 255
    4866:	3f ef       	ldi	r19, 0xFF	; 255
    4868:	4f ef       	ldi	r20, 0xFF	; 255
    486a:	5f e7       	ldi	r21, 0x7F	; 127
    486c:	04 c0       	rjmp	.+8      	; 0x4876 <__fixsfsi+0x9c>
    486e:	20 e0       	ldi	r18, 0x00	; 0
    4870:	30 e0       	ldi	r19, 0x00	; 0
    4872:	40 e0       	ldi	r20, 0x00	; 0
    4874:	50 e8       	ldi	r21, 0x80	; 128
    4876:	b9 01       	movw	r22, r18
    4878:	ca 01       	movw	r24, r20
    487a:	2c 96       	adiw	r28, 0x0c	; 12
    487c:	e2 e0       	ldi	r30, 0x02	; 2
    487e:	0c 94 00 28 	jmp	0x5000	; 0x5000 <__epilogue_restores__+0x20>

00004882 <__floatunsisf>:
    4882:	a8 e0       	ldi	r26, 0x08	; 8
    4884:	b0 e0       	ldi	r27, 0x00	; 0
    4886:	e7 e4       	ldi	r30, 0x47	; 71
    4888:	f4 e2       	ldi	r31, 0x24	; 36
    488a:	0c 94 dc 27 	jmp	0x4fb8	; 0x4fb8 <__prologue_saves__+0x10>
    488e:	7b 01       	movw	r14, r22
    4890:	8c 01       	movw	r16, r24
    4892:	61 15       	cp	r22, r1
    4894:	71 05       	cpc	r23, r1
    4896:	81 05       	cpc	r24, r1
    4898:	91 05       	cpc	r25, r1
    489a:	19 f4       	brne	.+6      	; 0x48a2 <__floatunsisf+0x20>
    489c:	82 e0       	ldi	r24, 0x02	; 2
    489e:	89 83       	std	Y+1, r24	; 0x01
    48a0:	60 c0       	rjmp	.+192    	; 0x4962 <__floatunsisf+0xe0>
    48a2:	83 e0       	ldi	r24, 0x03	; 3
    48a4:	89 83       	std	Y+1, r24	; 0x01
    48a6:	8e e1       	ldi	r24, 0x1E	; 30
    48a8:	c8 2e       	mov	r12, r24
    48aa:	d1 2c       	mov	r13, r1
    48ac:	dc 82       	std	Y+4, r13	; 0x04
    48ae:	cb 82       	std	Y+3, r12	; 0x03
    48b0:	ed 82       	std	Y+5, r14	; 0x05
    48b2:	fe 82       	std	Y+6, r15	; 0x06
    48b4:	0f 83       	std	Y+7, r16	; 0x07
    48b6:	18 87       	std	Y+8, r17	; 0x08
    48b8:	c8 01       	movw	r24, r16
    48ba:	b7 01       	movw	r22, r14
    48bc:	0e 94 39 25 	call	0x4a72	; 0x4a72 <__clzsi2>
    48c0:	fc 01       	movw	r30, r24
    48c2:	31 97       	sbiw	r30, 0x01	; 1
    48c4:	f7 ff       	sbrs	r31, 7
    48c6:	3b c0       	rjmp	.+118    	; 0x493e <__floatunsisf+0xbc>
    48c8:	22 27       	eor	r18, r18
    48ca:	33 27       	eor	r19, r19
    48cc:	2e 1b       	sub	r18, r30
    48ce:	3f 0b       	sbc	r19, r31
    48d0:	57 01       	movw	r10, r14
    48d2:	68 01       	movw	r12, r16
    48d4:	02 2e       	mov	r0, r18
    48d6:	04 c0       	rjmp	.+8      	; 0x48e0 <__floatunsisf+0x5e>
    48d8:	d6 94       	lsr	r13
    48da:	c7 94       	ror	r12
    48dc:	b7 94       	ror	r11
    48de:	a7 94       	ror	r10
    48e0:	0a 94       	dec	r0
    48e2:	d2 f7       	brpl	.-12     	; 0x48d8 <__floatunsisf+0x56>
    48e4:	40 e0       	ldi	r20, 0x00	; 0
    48e6:	50 e0       	ldi	r21, 0x00	; 0
    48e8:	60 e0       	ldi	r22, 0x00	; 0
    48ea:	70 e0       	ldi	r23, 0x00	; 0
    48ec:	81 e0       	ldi	r24, 0x01	; 1
    48ee:	90 e0       	ldi	r25, 0x00	; 0
    48f0:	a0 e0       	ldi	r26, 0x00	; 0
    48f2:	b0 e0       	ldi	r27, 0x00	; 0
    48f4:	04 c0       	rjmp	.+8      	; 0x48fe <__floatunsisf+0x7c>
    48f6:	88 0f       	add	r24, r24
    48f8:	99 1f       	adc	r25, r25
    48fa:	aa 1f       	adc	r26, r26
    48fc:	bb 1f       	adc	r27, r27
    48fe:	2a 95       	dec	r18
    4900:	d2 f7       	brpl	.-12     	; 0x48f6 <__floatunsisf+0x74>
    4902:	01 97       	sbiw	r24, 0x01	; 1
    4904:	a1 09       	sbc	r26, r1
    4906:	b1 09       	sbc	r27, r1
    4908:	8e 21       	and	r24, r14
    490a:	9f 21       	and	r25, r15
    490c:	a0 23       	and	r26, r16
    490e:	b1 23       	and	r27, r17
    4910:	00 97       	sbiw	r24, 0x00	; 0
    4912:	a1 05       	cpc	r26, r1
    4914:	b1 05       	cpc	r27, r1
    4916:	21 f0       	breq	.+8      	; 0x4920 <__floatunsisf+0x9e>
    4918:	41 e0       	ldi	r20, 0x01	; 1
    491a:	50 e0       	ldi	r21, 0x00	; 0
    491c:	60 e0       	ldi	r22, 0x00	; 0
    491e:	70 e0       	ldi	r23, 0x00	; 0
    4920:	4a 29       	or	r20, r10
    4922:	5b 29       	or	r21, r11
    4924:	6c 29       	or	r22, r12
    4926:	7d 29       	or	r23, r13
    4928:	4d 83       	std	Y+5, r20	; 0x05
    492a:	5e 83       	std	Y+6, r21	; 0x06
    492c:	6f 83       	std	Y+7, r22	; 0x07
    492e:	78 87       	std	Y+8, r23	; 0x08
    4930:	8e e1       	ldi	r24, 0x1E	; 30
    4932:	90 e0       	ldi	r25, 0x00	; 0
    4934:	8e 1b       	sub	r24, r30
    4936:	9f 0b       	sbc	r25, r31
    4938:	9c 83       	std	Y+4, r25	; 0x04
    493a:	8b 83       	std	Y+3, r24	; 0x03
    493c:	12 c0       	rjmp	.+36     	; 0x4962 <__floatunsisf+0xe0>
    493e:	30 97       	sbiw	r30, 0x00	; 0
    4940:	81 f0       	breq	.+32     	; 0x4962 <__floatunsisf+0xe0>
    4942:	0e 2e       	mov	r0, r30
    4944:	04 c0       	rjmp	.+8      	; 0x494e <__floatunsisf+0xcc>
    4946:	ee 0c       	add	r14, r14
    4948:	ff 1c       	adc	r15, r15
    494a:	00 1f       	adc	r16, r16
    494c:	11 1f       	adc	r17, r17
    494e:	0a 94       	dec	r0
    4950:	d2 f7       	brpl	.-12     	; 0x4946 <__floatunsisf+0xc4>
    4952:	ed 82       	std	Y+5, r14	; 0x05
    4954:	fe 82       	std	Y+6, r15	; 0x06
    4956:	0f 83       	std	Y+7, r16	; 0x07
    4958:	18 87       	std	Y+8, r17	; 0x08
    495a:	ce 1a       	sub	r12, r30
    495c:	df 0a       	sbc	r13, r31
    495e:	dc 82       	std	Y+4, r13	; 0x04
    4960:	cb 82       	std	Y+3, r12	; 0x03
    4962:	1a 82       	std	Y+2, r1	; 0x02
    4964:	ce 01       	movw	r24, r28
    4966:	01 96       	adiw	r24, 0x01	; 1
    4968:	0e 94 88 25 	call	0x4b10	; 0x4b10 <__pack_f>
    496c:	28 96       	adiw	r28, 0x08	; 8
    496e:	ea e0       	ldi	r30, 0x0A	; 10
    4970:	0c 94 f8 27 	jmp	0x4ff0	; 0x4ff0 <__epilogue_restores__+0x10>

00004974 <__lshrdi3>:
    4974:	ef 92       	push	r14
    4976:	ff 92       	push	r15
    4978:	0f 93       	push	r16
    497a:	df 93       	push	r29
    497c:	cf 93       	push	r28
    497e:	cd b7       	in	r28, 0x3d	; 61
    4980:	de b7       	in	r29, 0x3e	; 62
    4982:	60 97       	sbiw	r28, 0x10	; 16
    4984:	0f b6       	in	r0, 0x3f	; 63
    4986:	f8 94       	cli
    4988:	de bf       	out	0x3e, r29	; 62
    498a:	0f be       	out	0x3f, r0	; 63
    498c:	cd bf       	out	0x3d, r28	; 61
    498e:	a8 2f       	mov	r26, r24
    4990:	00 23       	and	r16, r16
    4992:	09 f4       	brne	.+2      	; 0x4996 <__lshrdi3+0x22>
    4994:	61 c0       	rjmp	.+194    	; 0x4a58 <__lshrdi3+0xe4>
    4996:	7e 01       	movw	r14, r28
    4998:	08 94       	sec
    499a:	e1 1c       	adc	r14, r1
    499c:	f1 1c       	adc	r15, r1
    499e:	88 e0       	ldi	r24, 0x08	; 8
    49a0:	f7 01       	movw	r30, r14
    49a2:	11 92       	st	Z+, r1
    49a4:	8a 95       	dec	r24
    49a6:	e9 f7       	brne	.-6      	; 0x49a2 <__lshrdi3+0x2e>
    49a8:	29 83       	std	Y+1, r18	; 0x01
    49aa:	3a 83       	std	Y+2, r19	; 0x02
    49ac:	4b 83       	std	Y+3, r20	; 0x03
    49ae:	5c 83       	std	Y+4, r21	; 0x04
    49b0:	6d 83       	std	Y+5, r22	; 0x05
    49b2:	7e 83       	std	Y+6, r23	; 0x06
    49b4:	af 83       	std	Y+7, r26	; 0x07
    49b6:	98 87       	std	Y+8, r25	; 0x08
    49b8:	80 e2       	ldi	r24, 0x20	; 32
    49ba:	80 1b       	sub	r24, r16
    49bc:	e8 2f       	mov	r30, r24
    49be:	ff 27       	eor	r31, r31
    49c0:	e7 fd       	sbrc	r30, 7
    49c2:	f0 95       	com	r31
    49c4:	4d 81       	ldd	r20, Y+5	; 0x05
    49c6:	5e 81       	ldd	r21, Y+6	; 0x06
    49c8:	6f 81       	ldd	r22, Y+7	; 0x07
    49ca:	78 85       	ldd	r23, Y+8	; 0x08
    49cc:	18 16       	cp	r1, r24
    49ce:	84 f0       	brlt	.+32     	; 0x49f0 <__lshrdi3+0x7c>
    49d0:	1d 86       	std	Y+13, r1	; 0x0d
    49d2:	1e 86       	std	Y+14, r1	; 0x0e
    49d4:	1f 86       	std	Y+15, r1	; 0x0f
    49d6:	18 8a       	std	Y+16, r1	; 0x10
    49d8:	88 27       	eor	r24, r24
    49da:	99 27       	eor	r25, r25
    49dc:	8e 1b       	sub	r24, r30
    49de:	9f 0b       	sbc	r25, r31
    49e0:	04 c0       	rjmp	.+8      	; 0x49ea <__lshrdi3+0x76>
    49e2:	76 95       	lsr	r23
    49e4:	67 95       	ror	r22
    49e6:	57 95       	ror	r21
    49e8:	47 95       	ror	r20
    49ea:	8a 95       	dec	r24
    49ec:	d2 f7       	brpl	.-12     	; 0x49e2 <__lshrdi3+0x6e>
    49ee:	28 c0       	rjmp	.+80     	; 0x4a40 <__lshrdi3+0xcc>
    49f0:	20 2f       	mov	r18, r16
    49f2:	33 27       	eor	r19, r19
    49f4:	27 fd       	sbrc	r18, 7
    49f6:	30 95       	com	r19
    49f8:	db 01       	movw	r26, r22
    49fa:	ca 01       	movw	r24, r20
    49fc:	02 2e       	mov	r0, r18
    49fe:	04 c0       	rjmp	.+8      	; 0x4a08 <__lshrdi3+0x94>
    4a00:	b6 95       	lsr	r27
    4a02:	a7 95       	ror	r26
    4a04:	97 95       	ror	r25
    4a06:	87 95       	ror	r24
    4a08:	0a 94       	dec	r0
    4a0a:	d2 f7       	brpl	.-12     	; 0x4a00 <__lshrdi3+0x8c>
    4a0c:	8d 87       	std	Y+13, r24	; 0x0d
    4a0e:	9e 87       	std	Y+14, r25	; 0x0e
    4a10:	af 87       	std	Y+15, r26	; 0x0f
    4a12:	b8 8b       	std	Y+16, r27	; 0x10
    4a14:	04 c0       	rjmp	.+8      	; 0x4a1e <__lshrdi3+0xaa>
    4a16:	44 0f       	add	r20, r20
    4a18:	55 1f       	adc	r21, r21
    4a1a:	66 1f       	adc	r22, r22
    4a1c:	77 1f       	adc	r23, r23
    4a1e:	ea 95       	dec	r30
    4a20:	d2 f7       	brpl	.-12     	; 0x4a16 <__lshrdi3+0xa2>
    4a22:	89 81       	ldd	r24, Y+1	; 0x01
    4a24:	9a 81       	ldd	r25, Y+2	; 0x02
    4a26:	ab 81       	ldd	r26, Y+3	; 0x03
    4a28:	bc 81       	ldd	r27, Y+4	; 0x04
    4a2a:	04 c0       	rjmp	.+8      	; 0x4a34 <__lshrdi3+0xc0>
    4a2c:	b6 95       	lsr	r27
    4a2e:	a7 95       	ror	r26
    4a30:	97 95       	ror	r25
    4a32:	87 95       	ror	r24
    4a34:	2a 95       	dec	r18
    4a36:	d2 f7       	brpl	.-12     	; 0x4a2c <__lshrdi3+0xb8>
    4a38:	48 2b       	or	r20, r24
    4a3a:	59 2b       	or	r21, r25
    4a3c:	6a 2b       	or	r22, r26
    4a3e:	7b 2b       	or	r23, r27
    4a40:	49 87       	std	Y+9, r20	; 0x09
    4a42:	5a 87       	std	Y+10, r21	; 0x0a
    4a44:	6b 87       	std	Y+11, r22	; 0x0b
    4a46:	7c 87       	std	Y+12, r23	; 0x0c
    4a48:	29 85       	ldd	r18, Y+9	; 0x09
    4a4a:	3a 85       	ldd	r19, Y+10	; 0x0a
    4a4c:	4b 85       	ldd	r20, Y+11	; 0x0b
    4a4e:	5c 85       	ldd	r21, Y+12	; 0x0c
    4a50:	6d 85       	ldd	r22, Y+13	; 0x0d
    4a52:	7e 85       	ldd	r23, Y+14	; 0x0e
    4a54:	af 85       	ldd	r26, Y+15	; 0x0f
    4a56:	98 89       	ldd	r25, Y+16	; 0x10
    4a58:	8a 2f       	mov	r24, r26
    4a5a:	60 96       	adiw	r28, 0x10	; 16
    4a5c:	0f b6       	in	r0, 0x3f	; 63
    4a5e:	f8 94       	cli
    4a60:	de bf       	out	0x3e, r29	; 62
    4a62:	0f be       	out	0x3f, r0	; 63
    4a64:	cd bf       	out	0x3d, r28	; 61
    4a66:	cf 91       	pop	r28
    4a68:	df 91       	pop	r29
    4a6a:	0f 91       	pop	r16
    4a6c:	ff 90       	pop	r15
    4a6e:	ef 90       	pop	r14
    4a70:	08 95       	ret

00004a72 <__clzsi2>:
    4a72:	ef 92       	push	r14
    4a74:	ff 92       	push	r15
    4a76:	0f 93       	push	r16
    4a78:	1f 93       	push	r17
    4a7a:	7b 01       	movw	r14, r22
    4a7c:	8c 01       	movw	r16, r24
    4a7e:	80 e0       	ldi	r24, 0x00	; 0
    4a80:	e8 16       	cp	r14, r24
    4a82:	80 e0       	ldi	r24, 0x00	; 0
    4a84:	f8 06       	cpc	r15, r24
    4a86:	81 e0       	ldi	r24, 0x01	; 1
    4a88:	08 07       	cpc	r16, r24
    4a8a:	80 e0       	ldi	r24, 0x00	; 0
    4a8c:	18 07       	cpc	r17, r24
    4a8e:	88 f4       	brcc	.+34     	; 0x4ab2 <__clzsi2+0x40>
    4a90:	8f ef       	ldi	r24, 0xFF	; 255
    4a92:	e8 16       	cp	r14, r24
    4a94:	f1 04       	cpc	r15, r1
    4a96:	01 05       	cpc	r16, r1
    4a98:	11 05       	cpc	r17, r1
    4a9a:	31 f0       	breq	.+12     	; 0x4aa8 <__clzsi2+0x36>
    4a9c:	28 f0       	brcs	.+10     	; 0x4aa8 <__clzsi2+0x36>
    4a9e:	88 e0       	ldi	r24, 0x08	; 8
    4aa0:	90 e0       	ldi	r25, 0x00	; 0
    4aa2:	a0 e0       	ldi	r26, 0x00	; 0
    4aa4:	b0 e0       	ldi	r27, 0x00	; 0
    4aa6:	17 c0       	rjmp	.+46     	; 0x4ad6 <__clzsi2+0x64>
    4aa8:	80 e0       	ldi	r24, 0x00	; 0
    4aaa:	90 e0       	ldi	r25, 0x00	; 0
    4aac:	a0 e0       	ldi	r26, 0x00	; 0
    4aae:	b0 e0       	ldi	r27, 0x00	; 0
    4ab0:	12 c0       	rjmp	.+36     	; 0x4ad6 <__clzsi2+0x64>
    4ab2:	80 e0       	ldi	r24, 0x00	; 0
    4ab4:	e8 16       	cp	r14, r24
    4ab6:	80 e0       	ldi	r24, 0x00	; 0
    4ab8:	f8 06       	cpc	r15, r24
    4aba:	80 e0       	ldi	r24, 0x00	; 0
    4abc:	08 07       	cpc	r16, r24
    4abe:	81 e0       	ldi	r24, 0x01	; 1
    4ac0:	18 07       	cpc	r17, r24
    4ac2:	28 f0       	brcs	.+10     	; 0x4ace <__clzsi2+0x5c>
    4ac4:	88 e1       	ldi	r24, 0x18	; 24
    4ac6:	90 e0       	ldi	r25, 0x00	; 0
    4ac8:	a0 e0       	ldi	r26, 0x00	; 0
    4aca:	b0 e0       	ldi	r27, 0x00	; 0
    4acc:	04 c0       	rjmp	.+8      	; 0x4ad6 <__clzsi2+0x64>
    4ace:	80 e1       	ldi	r24, 0x10	; 16
    4ad0:	90 e0       	ldi	r25, 0x00	; 0
    4ad2:	a0 e0       	ldi	r26, 0x00	; 0
    4ad4:	b0 e0       	ldi	r27, 0x00	; 0
    4ad6:	20 e2       	ldi	r18, 0x20	; 32
    4ad8:	30 e0       	ldi	r19, 0x00	; 0
    4ada:	40 e0       	ldi	r20, 0x00	; 0
    4adc:	50 e0       	ldi	r21, 0x00	; 0
    4ade:	28 1b       	sub	r18, r24
    4ae0:	39 0b       	sbc	r19, r25
    4ae2:	4a 0b       	sbc	r20, r26
    4ae4:	5b 0b       	sbc	r21, r27
    4ae6:	04 c0       	rjmp	.+8      	; 0x4af0 <__clzsi2+0x7e>
    4ae8:	16 95       	lsr	r17
    4aea:	07 95       	ror	r16
    4aec:	f7 94       	ror	r15
    4aee:	e7 94       	ror	r14
    4af0:	8a 95       	dec	r24
    4af2:	d2 f7       	brpl	.-12     	; 0x4ae8 <__clzsi2+0x76>
    4af4:	f7 01       	movw	r30, r14
    4af6:	e2 52       	subi	r30, 0x22	; 34
    4af8:	ff 4f       	sbci	r31, 0xFF	; 255
    4afa:	80 81       	ld	r24, Z
    4afc:	28 1b       	sub	r18, r24
    4afe:	31 09       	sbc	r19, r1
    4b00:	41 09       	sbc	r20, r1
    4b02:	51 09       	sbc	r21, r1
    4b04:	c9 01       	movw	r24, r18
    4b06:	1f 91       	pop	r17
    4b08:	0f 91       	pop	r16
    4b0a:	ff 90       	pop	r15
    4b0c:	ef 90       	pop	r14
    4b0e:	08 95       	ret

00004b10 <__pack_f>:
    4b10:	df 92       	push	r13
    4b12:	ef 92       	push	r14
    4b14:	ff 92       	push	r15
    4b16:	0f 93       	push	r16
    4b18:	1f 93       	push	r17
    4b1a:	fc 01       	movw	r30, r24
    4b1c:	e4 80       	ldd	r14, Z+4	; 0x04
    4b1e:	f5 80       	ldd	r15, Z+5	; 0x05
    4b20:	06 81       	ldd	r16, Z+6	; 0x06
    4b22:	17 81       	ldd	r17, Z+7	; 0x07
    4b24:	d1 80       	ldd	r13, Z+1	; 0x01
    4b26:	80 81       	ld	r24, Z
    4b28:	82 30       	cpi	r24, 0x02	; 2
    4b2a:	48 f4       	brcc	.+18     	; 0x4b3e <__pack_f+0x2e>
    4b2c:	80 e0       	ldi	r24, 0x00	; 0
    4b2e:	90 e0       	ldi	r25, 0x00	; 0
    4b30:	a0 e1       	ldi	r26, 0x10	; 16
    4b32:	b0 e0       	ldi	r27, 0x00	; 0
    4b34:	e8 2a       	or	r14, r24
    4b36:	f9 2a       	or	r15, r25
    4b38:	0a 2b       	or	r16, r26
    4b3a:	1b 2b       	or	r17, r27
    4b3c:	a5 c0       	rjmp	.+330    	; 0x4c88 <__pack_f+0x178>
    4b3e:	84 30       	cpi	r24, 0x04	; 4
    4b40:	09 f4       	brne	.+2      	; 0x4b44 <__pack_f+0x34>
    4b42:	9f c0       	rjmp	.+318    	; 0x4c82 <__pack_f+0x172>
    4b44:	82 30       	cpi	r24, 0x02	; 2
    4b46:	21 f4       	brne	.+8      	; 0x4b50 <__pack_f+0x40>
    4b48:	ee 24       	eor	r14, r14
    4b4a:	ff 24       	eor	r15, r15
    4b4c:	87 01       	movw	r16, r14
    4b4e:	05 c0       	rjmp	.+10     	; 0x4b5a <__pack_f+0x4a>
    4b50:	e1 14       	cp	r14, r1
    4b52:	f1 04       	cpc	r15, r1
    4b54:	01 05       	cpc	r16, r1
    4b56:	11 05       	cpc	r17, r1
    4b58:	19 f4       	brne	.+6      	; 0x4b60 <__pack_f+0x50>
    4b5a:	e0 e0       	ldi	r30, 0x00	; 0
    4b5c:	f0 e0       	ldi	r31, 0x00	; 0
    4b5e:	96 c0       	rjmp	.+300    	; 0x4c8c <__pack_f+0x17c>
    4b60:	62 81       	ldd	r22, Z+2	; 0x02
    4b62:	73 81       	ldd	r23, Z+3	; 0x03
    4b64:	9f ef       	ldi	r25, 0xFF	; 255
    4b66:	62 38       	cpi	r22, 0x82	; 130
    4b68:	79 07       	cpc	r23, r25
    4b6a:	0c f0       	brlt	.+2      	; 0x4b6e <__pack_f+0x5e>
    4b6c:	5b c0       	rjmp	.+182    	; 0x4c24 <__pack_f+0x114>
    4b6e:	22 e8       	ldi	r18, 0x82	; 130
    4b70:	3f ef       	ldi	r19, 0xFF	; 255
    4b72:	26 1b       	sub	r18, r22
    4b74:	37 0b       	sbc	r19, r23
    4b76:	2a 31       	cpi	r18, 0x1A	; 26
    4b78:	31 05       	cpc	r19, r1
    4b7a:	2c f0       	brlt	.+10     	; 0x4b86 <__pack_f+0x76>
    4b7c:	20 e0       	ldi	r18, 0x00	; 0
    4b7e:	30 e0       	ldi	r19, 0x00	; 0
    4b80:	40 e0       	ldi	r20, 0x00	; 0
    4b82:	50 e0       	ldi	r21, 0x00	; 0
    4b84:	2a c0       	rjmp	.+84     	; 0x4bda <__pack_f+0xca>
    4b86:	b8 01       	movw	r22, r16
    4b88:	a7 01       	movw	r20, r14
    4b8a:	02 2e       	mov	r0, r18
    4b8c:	04 c0       	rjmp	.+8      	; 0x4b96 <__pack_f+0x86>
    4b8e:	76 95       	lsr	r23
    4b90:	67 95       	ror	r22
    4b92:	57 95       	ror	r21
    4b94:	47 95       	ror	r20
    4b96:	0a 94       	dec	r0
    4b98:	d2 f7       	brpl	.-12     	; 0x4b8e <__pack_f+0x7e>
    4b9a:	81 e0       	ldi	r24, 0x01	; 1
    4b9c:	90 e0       	ldi	r25, 0x00	; 0
    4b9e:	a0 e0       	ldi	r26, 0x00	; 0
    4ba0:	b0 e0       	ldi	r27, 0x00	; 0
    4ba2:	04 c0       	rjmp	.+8      	; 0x4bac <__pack_f+0x9c>
    4ba4:	88 0f       	add	r24, r24
    4ba6:	99 1f       	adc	r25, r25
    4ba8:	aa 1f       	adc	r26, r26
    4baa:	bb 1f       	adc	r27, r27
    4bac:	2a 95       	dec	r18
    4bae:	d2 f7       	brpl	.-12     	; 0x4ba4 <__pack_f+0x94>
    4bb0:	01 97       	sbiw	r24, 0x01	; 1
    4bb2:	a1 09       	sbc	r26, r1
    4bb4:	b1 09       	sbc	r27, r1
    4bb6:	8e 21       	and	r24, r14
    4bb8:	9f 21       	and	r25, r15
    4bba:	a0 23       	and	r26, r16
    4bbc:	b1 23       	and	r27, r17
    4bbe:	00 97       	sbiw	r24, 0x00	; 0
    4bc0:	a1 05       	cpc	r26, r1
    4bc2:	b1 05       	cpc	r27, r1
    4bc4:	21 f0       	breq	.+8      	; 0x4bce <__pack_f+0xbe>
    4bc6:	81 e0       	ldi	r24, 0x01	; 1
    4bc8:	90 e0       	ldi	r25, 0x00	; 0
    4bca:	a0 e0       	ldi	r26, 0x00	; 0
    4bcc:	b0 e0       	ldi	r27, 0x00	; 0
    4bce:	9a 01       	movw	r18, r20
    4bd0:	ab 01       	movw	r20, r22
    4bd2:	28 2b       	or	r18, r24
    4bd4:	39 2b       	or	r19, r25
    4bd6:	4a 2b       	or	r20, r26
    4bd8:	5b 2b       	or	r21, r27
    4bda:	da 01       	movw	r26, r20
    4bdc:	c9 01       	movw	r24, r18
    4bde:	8f 77       	andi	r24, 0x7F	; 127
    4be0:	90 70       	andi	r25, 0x00	; 0
    4be2:	a0 70       	andi	r26, 0x00	; 0
    4be4:	b0 70       	andi	r27, 0x00	; 0
    4be6:	80 34       	cpi	r24, 0x40	; 64
    4be8:	91 05       	cpc	r25, r1
    4bea:	a1 05       	cpc	r26, r1
    4bec:	b1 05       	cpc	r27, r1
    4bee:	39 f4       	brne	.+14     	; 0x4bfe <__pack_f+0xee>
    4bf0:	27 ff       	sbrs	r18, 7
    4bf2:	09 c0       	rjmp	.+18     	; 0x4c06 <__pack_f+0xf6>
    4bf4:	20 5c       	subi	r18, 0xC0	; 192
    4bf6:	3f 4f       	sbci	r19, 0xFF	; 255
    4bf8:	4f 4f       	sbci	r20, 0xFF	; 255
    4bfa:	5f 4f       	sbci	r21, 0xFF	; 255
    4bfc:	04 c0       	rjmp	.+8      	; 0x4c06 <__pack_f+0xf6>
    4bfe:	21 5c       	subi	r18, 0xC1	; 193
    4c00:	3f 4f       	sbci	r19, 0xFF	; 255
    4c02:	4f 4f       	sbci	r20, 0xFF	; 255
    4c04:	5f 4f       	sbci	r21, 0xFF	; 255
    4c06:	e0 e0       	ldi	r30, 0x00	; 0
    4c08:	f0 e0       	ldi	r31, 0x00	; 0
    4c0a:	20 30       	cpi	r18, 0x00	; 0
    4c0c:	a0 e0       	ldi	r26, 0x00	; 0
    4c0e:	3a 07       	cpc	r19, r26
    4c10:	a0 e0       	ldi	r26, 0x00	; 0
    4c12:	4a 07       	cpc	r20, r26
    4c14:	a0 e4       	ldi	r26, 0x40	; 64
    4c16:	5a 07       	cpc	r21, r26
    4c18:	10 f0       	brcs	.+4      	; 0x4c1e <__pack_f+0x10e>
    4c1a:	e1 e0       	ldi	r30, 0x01	; 1
    4c1c:	f0 e0       	ldi	r31, 0x00	; 0
    4c1e:	79 01       	movw	r14, r18
    4c20:	8a 01       	movw	r16, r20
    4c22:	27 c0       	rjmp	.+78     	; 0x4c72 <__pack_f+0x162>
    4c24:	60 38       	cpi	r22, 0x80	; 128
    4c26:	71 05       	cpc	r23, r1
    4c28:	64 f5       	brge	.+88     	; 0x4c82 <__pack_f+0x172>
    4c2a:	fb 01       	movw	r30, r22
    4c2c:	e1 58       	subi	r30, 0x81	; 129
    4c2e:	ff 4f       	sbci	r31, 0xFF	; 255
    4c30:	d8 01       	movw	r26, r16
    4c32:	c7 01       	movw	r24, r14
    4c34:	8f 77       	andi	r24, 0x7F	; 127
    4c36:	90 70       	andi	r25, 0x00	; 0
    4c38:	a0 70       	andi	r26, 0x00	; 0
    4c3a:	b0 70       	andi	r27, 0x00	; 0
    4c3c:	80 34       	cpi	r24, 0x40	; 64
    4c3e:	91 05       	cpc	r25, r1
    4c40:	a1 05       	cpc	r26, r1
    4c42:	b1 05       	cpc	r27, r1
    4c44:	39 f4       	brne	.+14     	; 0x4c54 <__pack_f+0x144>
    4c46:	e7 fe       	sbrs	r14, 7
    4c48:	0d c0       	rjmp	.+26     	; 0x4c64 <__pack_f+0x154>
    4c4a:	80 e4       	ldi	r24, 0x40	; 64
    4c4c:	90 e0       	ldi	r25, 0x00	; 0
    4c4e:	a0 e0       	ldi	r26, 0x00	; 0
    4c50:	b0 e0       	ldi	r27, 0x00	; 0
    4c52:	04 c0       	rjmp	.+8      	; 0x4c5c <__pack_f+0x14c>
    4c54:	8f e3       	ldi	r24, 0x3F	; 63
    4c56:	90 e0       	ldi	r25, 0x00	; 0
    4c58:	a0 e0       	ldi	r26, 0x00	; 0
    4c5a:	b0 e0       	ldi	r27, 0x00	; 0
    4c5c:	e8 0e       	add	r14, r24
    4c5e:	f9 1e       	adc	r15, r25
    4c60:	0a 1f       	adc	r16, r26
    4c62:	1b 1f       	adc	r17, r27
    4c64:	17 ff       	sbrs	r17, 7
    4c66:	05 c0       	rjmp	.+10     	; 0x4c72 <__pack_f+0x162>
    4c68:	16 95       	lsr	r17
    4c6a:	07 95       	ror	r16
    4c6c:	f7 94       	ror	r15
    4c6e:	e7 94       	ror	r14
    4c70:	31 96       	adiw	r30, 0x01	; 1
    4c72:	87 e0       	ldi	r24, 0x07	; 7
    4c74:	16 95       	lsr	r17
    4c76:	07 95       	ror	r16
    4c78:	f7 94       	ror	r15
    4c7a:	e7 94       	ror	r14
    4c7c:	8a 95       	dec	r24
    4c7e:	d1 f7       	brne	.-12     	; 0x4c74 <__pack_f+0x164>
    4c80:	05 c0       	rjmp	.+10     	; 0x4c8c <__pack_f+0x17c>
    4c82:	ee 24       	eor	r14, r14
    4c84:	ff 24       	eor	r15, r15
    4c86:	87 01       	movw	r16, r14
    4c88:	ef ef       	ldi	r30, 0xFF	; 255
    4c8a:	f0 e0       	ldi	r31, 0x00	; 0
    4c8c:	6e 2f       	mov	r22, r30
    4c8e:	67 95       	ror	r22
    4c90:	66 27       	eor	r22, r22
    4c92:	67 95       	ror	r22
    4c94:	90 2f       	mov	r25, r16
    4c96:	9f 77       	andi	r25, 0x7F	; 127
    4c98:	d7 94       	ror	r13
    4c9a:	dd 24       	eor	r13, r13
    4c9c:	d7 94       	ror	r13
    4c9e:	8e 2f       	mov	r24, r30
    4ca0:	86 95       	lsr	r24
    4ca2:	49 2f       	mov	r20, r25
    4ca4:	46 2b       	or	r20, r22
    4ca6:	58 2f       	mov	r21, r24
    4ca8:	5d 29       	or	r21, r13
    4caa:	b7 01       	movw	r22, r14
    4cac:	ca 01       	movw	r24, r20
    4cae:	1f 91       	pop	r17
    4cb0:	0f 91       	pop	r16
    4cb2:	ff 90       	pop	r15
    4cb4:	ef 90       	pop	r14
    4cb6:	df 90       	pop	r13
    4cb8:	08 95       	ret

00004cba <__unpack_f>:
    4cba:	fc 01       	movw	r30, r24
    4cbc:	db 01       	movw	r26, r22
    4cbe:	40 81       	ld	r20, Z
    4cc0:	51 81       	ldd	r21, Z+1	; 0x01
    4cc2:	22 81       	ldd	r18, Z+2	; 0x02
    4cc4:	62 2f       	mov	r22, r18
    4cc6:	6f 77       	andi	r22, 0x7F	; 127
    4cc8:	70 e0       	ldi	r23, 0x00	; 0
    4cca:	22 1f       	adc	r18, r18
    4ccc:	22 27       	eor	r18, r18
    4cce:	22 1f       	adc	r18, r18
    4cd0:	93 81       	ldd	r25, Z+3	; 0x03
    4cd2:	89 2f       	mov	r24, r25
    4cd4:	88 0f       	add	r24, r24
    4cd6:	82 2b       	or	r24, r18
    4cd8:	28 2f       	mov	r18, r24
    4cda:	30 e0       	ldi	r19, 0x00	; 0
    4cdc:	99 1f       	adc	r25, r25
    4cde:	99 27       	eor	r25, r25
    4ce0:	99 1f       	adc	r25, r25
    4ce2:	11 96       	adiw	r26, 0x01	; 1
    4ce4:	9c 93       	st	X, r25
    4ce6:	11 97       	sbiw	r26, 0x01	; 1
    4ce8:	21 15       	cp	r18, r1
    4cea:	31 05       	cpc	r19, r1
    4cec:	a9 f5       	brne	.+106    	; 0x4d58 <__unpack_f+0x9e>
    4cee:	41 15       	cp	r20, r1
    4cf0:	51 05       	cpc	r21, r1
    4cf2:	61 05       	cpc	r22, r1
    4cf4:	71 05       	cpc	r23, r1
    4cf6:	11 f4       	brne	.+4      	; 0x4cfc <__unpack_f+0x42>
    4cf8:	82 e0       	ldi	r24, 0x02	; 2
    4cfa:	37 c0       	rjmp	.+110    	; 0x4d6a <__unpack_f+0xb0>
    4cfc:	82 e8       	ldi	r24, 0x82	; 130
    4cfe:	9f ef       	ldi	r25, 0xFF	; 255
    4d00:	13 96       	adiw	r26, 0x03	; 3
    4d02:	9c 93       	st	X, r25
    4d04:	8e 93       	st	-X, r24
    4d06:	12 97       	sbiw	r26, 0x02	; 2
    4d08:	9a 01       	movw	r18, r20
    4d0a:	ab 01       	movw	r20, r22
    4d0c:	67 e0       	ldi	r22, 0x07	; 7
    4d0e:	22 0f       	add	r18, r18
    4d10:	33 1f       	adc	r19, r19
    4d12:	44 1f       	adc	r20, r20
    4d14:	55 1f       	adc	r21, r21
    4d16:	6a 95       	dec	r22
    4d18:	d1 f7       	brne	.-12     	; 0x4d0e <__unpack_f+0x54>
    4d1a:	83 e0       	ldi	r24, 0x03	; 3
    4d1c:	8c 93       	st	X, r24
    4d1e:	0d c0       	rjmp	.+26     	; 0x4d3a <__unpack_f+0x80>
    4d20:	22 0f       	add	r18, r18
    4d22:	33 1f       	adc	r19, r19
    4d24:	44 1f       	adc	r20, r20
    4d26:	55 1f       	adc	r21, r21
    4d28:	12 96       	adiw	r26, 0x02	; 2
    4d2a:	8d 91       	ld	r24, X+
    4d2c:	9c 91       	ld	r25, X
    4d2e:	13 97       	sbiw	r26, 0x03	; 3
    4d30:	01 97       	sbiw	r24, 0x01	; 1
    4d32:	13 96       	adiw	r26, 0x03	; 3
    4d34:	9c 93       	st	X, r25
    4d36:	8e 93       	st	-X, r24
    4d38:	12 97       	sbiw	r26, 0x02	; 2
    4d3a:	20 30       	cpi	r18, 0x00	; 0
    4d3c:	80 e0       	ldi	r24, 0x00	; 0
    4d3e:	38 07       	cpc	r19, r24
    4d40:	80 e0       	ldi	r24, 0x00	; 0
    4d42:	48 07       	cpc	r20, r24
    4d44:	80 e4       	ldi	r24, 0x40	; 64
    4d46:	58 07       	cpc	r21, r24
    4d48:	58 f3       	brcs	.-42     	; 0x4d20 <__unpack_f+0x66>
    4d4a:	14 96       	adiw	r26, 0x04	; 4
    4d4c:	2d 93       	st	X+, r18
    4d4e:	3d 93       	st	X+, r19
    4d50:	4d 93       	st	X+, r20
    4d52:	5c 93       	st	X, r21
    4d54:	17 97       	sbiw	r26, 0x07	; 7
    4d56:	08 95       	ret
    4d58:	2f 3f       	cpi	r18, 0xFF	; 255
    4d5a:	31 05       	cpc	r19, r1
    4d5c:	79 f4       	brne	.+30     	; 0x4d7c <__unpack_f+0xc2>
    4d5e:	41 15       	cp	r20, r1
    4d60:	51 05       	cpc	r21, r1
    4d62:	61 05       	cpc	r22, r1
    4d64:	71 05       	cpc	r23, r1
    4d66:	19 f4       	brne	.+6      	; 0x4d6e <__unpack_f+0xb4>
    4d68:	84 e0       	ldi	r24, 0x04	; 4
    4d6a:	8c 93       	st	X, r24
    4d6c:	08 95       	ret
    4d6e:	64 ff       	sbrs	r22, 4
    4d70:	03 c0       	rjmp	.+6      	; 0x4d78 <__unpack_f+0xbe>
    4d72:	81 e0       	ldi	r24, 0x01	; 1
    4d74:	8c 93       	st	X, r24
    4d76:	12 c0       	rjmp	.+36     	; 0x4d9c <__unpack_f+0xe2>
    4d78:	1c 92       	st	X, r1
    4d7a:	10 c0       	rjmp	.+32     	; 0x4d9c <__unpack_f+0xe2>
    4d7c:	2f 57       	subi	r18, 0x7F	; 127
    4d7e:	30 40       	sbci	r19, 0x00	; 0
    4d80:	13 96       	adiw	r26, 0x03	; 3
    4d82:	3c 93       	st	X, r19
    4d84:	2e 93       	st	-X, r18
    4d86:	12 97       	sbiw	r26, 0x02	; 2
    4d88:	83 e0       	ldi	r24, 0x03	; 3
    4d8a:	8c 93       	st	X, r24
    4d8c:	87 e0       	ldi	r24, 0x07	; 7
    4d8e:	44 0f       	add	r20, r20
    4d90:	55 1f       	adc	r21, r21
    4d92:	66 1f       	adc	r22, r22
    4d94:	77 1f       	adc	r23, r23
    4d96:	8a 95       	dec	r24
    4d98:	d1 f7       	brne	.-12     	; 0x4d8e <__unpack_f+0xd4>
    4d9a:	70 64       	ori	r23, 0x40	; 64
    4d9c:	14 96       	adiw	r26, 0x04	; 4
    4d9e:	4d 93       	st	X+, r20
    4da0:	5d 93       	st	X+, r21
    4da2:	6d 93       	st	X+, r22
    4da4:	7c 93       	st	X, r23
    4da6:	17 97       	sbiw	r26, 0x07	; 7
    4da8:	08 95       	ret

00004daa <__fpcmp_parts_f>:
    4daa:	1f 93       	push	r17
    4dac:	dc 01       	movw	r26, r24
    4dae:	fb 01       	movw	r30, r22
    4db0:	9c 91       	ld	r25, X
    4db2:	92 30       	cpi	r25, 0x02	; 2
    4db4:	08 f4       	brcc	.+2      	; 0x4db8 <__fpcmp_parts_f+0xe>
    4db6:	47 c0       	rjmp	.+142    	; 0x4e46 <__fpcmp_parts_f+0x9c>
    4db8:	80 81       	ld	r24, Z
    4dba:	82 30       	cpi	r24, 0x02	; 2
    4dbc:	08 f4       	brcc	.+2      	; 0x4dc0 <__fpcmp_parts_f+0x16>
    4dbe:	43 c0       	rjmp	.+134    	; 0x4e46 <__fpcmp_parts_f+0x9c>
    4dc0:	94 30       	cpi	r25, 0x04	; 4
    4dc2:	51 f4       	brne	.+20     	; 0x4dd8 <__fpcmp_parts_f+0x2e>
    4dc4:	11 96       	adiw	r26, 0x01	; 1
    4dc6:	1c 91       	ld	r17, X
    4dc8:	84 30       	cpi	r24, 0x04	; 4
    4dca:	99 f5       	brne	.+102    	; 0x4e32 <__fpcmp_parts_f+0x88>
    4dcc:	81 81       	ldd	r24, Z+1	; 0x01
    4dce:	68 2f       	mov	r22, r24
    4dd0:	70 e0       	ldi	r23, 0x00	; 0
    4dd2:	61 1b       	sub	r22, r17
    4dd4:	71 09       	sbc	r23, r1
    4dd6:	3f c0       	rjmp	.+126    	; 0x4e56 <__fpcmp_parts_f+0xac>
    4dd8:	84 30       	cpi	r24, 0x04	; 4
    4dda:	21 f0       	breq	.+8      	; 0x4de4 <__fpcmp_parts_f+0x3a>
    4ddc:	92 30       	cpi	r25, 0x02	; 2
    4dde:	31 f4       	brne	.+12     	; 0x4dec <__fpcmp_parts_f+0x42>
    4de0:	82 30       	cpi	r24, 0x02	; 2
    4de2:	b9 f1       	breq	.+110    	; 0x4e52 <__fpcmp_parts_f+0xa8>
    4de4:	81 81       	ldd	r24, Z+1	; 0x01
    4de6:	88 23       	and	r24, r24
    4de8:	89 f1       	breq	.+98     	; 0x4e4c <__fpcmp_parts_f+0xa2>
    4dea:	2d c0       	rjmp	.+90     	; 0x4e46 <__fpcmp_parts_f+0x9c>
    4dec:	11 96       	adiw	r26, 0x01	; 1
    4dee:	1c 91       	ld	r17, X
    4df0:	11 97       	sbiw	r26, 0x01	; 1
    4df2:	82 30       	cpi	r24, 0x02	; 2
    4df4:	f1 f0       	breq	.+60     	; 0x4e32 <__fpcmp_parts_f+0x88>
    4df6:	81 81       	ldd	r24, Z+1	; 0x01
    4df8:	18 17       	cp	r17, r24
    4dfa:	d9 f4       	brne	.+54     	; 0x4e32 <__fpcmp_parts_f+0x88>
    4dfc:	12 96       	adiw	r26, 0x02	; 2
    4dfe:	2d 91       	ld	r18, X+
    4e00:	3c 91       	ld	r19, X
    4e02:	13 97       	sbiw	r26, 0x03	; 3
    4e04:	82 81       	ldd	r24, Z+2	; 0x02
    4e06:	93 81       	ldd	r25, Z+3	; 0x03
    4e08:	82 17       	cp	r24, r18
    4e0a:	93 07       	cpc	r25, r19
    4e0c:	94 f0       	brlt	.+36     	; 0x4e32 <__fpcmp_parts_f+0x88>
    4e0e:	28 17       	cp	r18, r24
    4e10:	39 07       	cpc	r19, r25
    4e12:	bc f0       	brlt	.+46     	; 0x4e42 <__fpcmp_parts_f+0x98>
    4e14:	14 96       	adiw	r26, 0x04	; 4
    4e16:	8d 91       	ld	r24, X+
    4e18:	9d 91       	ld	r25, X+
    4e1a:	0d 90       	ld	r0, X+
    4e1c:	bc 91       	ld	r27, X
    4e1e:	a0 2d       	mov	r26, r0
    4e20:	24 81       	ldd	r18, Z+4	; 0x04
    4e22:	35 81       	ldd	r19, Z+5	; 0x05
    4e24:	46 81       	ldd	r20, Z+6	; 0x06
    4e26:	57 81       	ldd	r21, Z+7	; 0x07
    4e28:	28 17       	cp	r18, r24
    4e2a:	39 07       	cpc	r19, r25
    4e2c:	4a 07       	cpc	r20, r26
    4e2e:	5b 07       	cpc	r21, r27
    4e30:	18 f4       	brcc	.+6      	; 0x4e38 <__fpcmp_parts_f+0x8e>
    4e32:	11 23       	and	r17, r17
    4e34:	41 f0       	breq	.+16     	; 0x4e46 <__fpcmp_parts_f+0x9c>
    4e36:	0a c0       	rjmp	.+20     	; 0x4e4c <__fpcmp_parts_f+0xa2>
    4e38:	82 17       	cp	r24, r18
    4e3a:	93 07       	cpc	r25, r19
    4e3c:	a4 07       	cpc	r26, r20
    4e3e:	b5 07       	cpc	r27, r21
    4e40:	40 f4       	brcc	.+16     	; 0x4e52 <__fpcmp_parts_f+0xa8>
    4e42:	11 23       	and	r17, r17
    4e44:	19 f0       	breq	.+6      	; 0x4e4c <__fpcmp_parts_f+0xa2>
    4e46:	61 e0       	ldi	r22, 0x01	; 1
    4e48:	70 e0       	ldi	r23, 0x00	; 0
    4e4a:	05 c0       	rjmp	.+10     	; 0x4e56 <__fpcmp_parts_f+0xac>
    4e4c:	6f ef       	ldi	r22, 0xFF	; 255
    4e4e:	7f ef       	ldi	r23, 0xFF	; 255
    4e50:	02 c0       	rjmp	.+4      	; 0x4e56 <__fpcmp_parts_f+0xac>
    4e52:	60 e0       	ldi	r22, 0x00	; 0
    4e54:	70 e0       	ldi	r23, 0x00	; 0
    4e56:	cb 01       	movw	r24, r22
    4e58:	1f 91       	pop	r17
    4e5a:	08 95       	ret

00004e5c <itoa>:
    4e5c:	fb 01       	movw	r30, r22
    4e5e:	9f 01       	movw	r18, r30
    4e60:	e8 94       	clt
    4e62:	42 30       	cpi	r20, 0x02	; 2
    4e64:	c4 f0       	brlt	.+48     	; 0x4e96 <itoa+0x3a>
    4e66:	45 32       	cpi	r20, 0x25	; 37
    4e68:	b4 f4       	brge	.+44     	; 0x4e96 <itoa+0x3a>
    4e6a:	4a 30       	cpi	r20, 0x0A	; 10
    4e6c:	29 f4       	brne	.+10     	; 0x4e78 <itoa+0x1c>
    4e6e:	97 fb       	bst	r25, 7
    4e70:	1e f4       	brtc	.+6      	; 0x4e78 <itoa+0x1c>
    4e72:	90 95       	com	r25
    4e74:	81 95       	neg	r24
    4e76:	9f 4f       	sbci	r25, 0xFF	; 255
    4e78:	64 2f       	mov	r22, r20
    4e7a:	77 27       	eor	r23, r23
    4e7c:	0e 94 0b 28 	call	0x5016	; 0x5016 <__udivmodhi4>
    4e80:	80 5d       	subi	r24, 0xD0	; 208
    4e82:	8a 33       	cpi	r24, 0x3A	; 58
    4e84:	0c f0       	brlt	.+2      	; 0x4e88 <itoa+0x2c>
    4e86:	89 5d       	subi	r24, 0xD9	; 217
    4e88:	81 93       	st	Z+, r24
    4e8a:	cb 01       	movw	r24, r22
    4e8c:	00 97       	sbiw	r24, 0x00	; 0
    4e8e:	a1 f7       	brne	.-24     	; 0x4e78 <itoa+0x1c>
    4e90:	16 f4       	brtc	.+4      	; 0x4e96 <itoa+0x3a>
    4e92:	5d e2       	ldi	r21, 0x2D	; 45
    4e94:	51 93       	st	Z+, r21
    4e96:	10 82       	st	Z, r1
    4e98:	c9 01       	movw	r24, r18
    4e9a:	0c 94 83 27 	jmp	0x4f06	; 0x4f06 <strrev>

00004e9e <ltoa>:
    4e9e:	fa 01       	movw	r30, r20
    4ea0:	cf 93       	push	r28
    4ea2:	ff 93       	push	r31
    4ea4:	ef 93       	push	r30
    4ea6:	22 30       	cpi	r18, 0x02	; 2
    4ea8:	44 f1       	brlt	.+80     	; 0x4efa <ltoa+0x5c>
    4eaa:	25 32       	cpi	r18, 0x25	; 37
    4eac:	34 f5       	brge	.+76     	; 0x4efa <ltoa+0x5c>
    4eae:	c2 2f       	mov	r28, r18
    4eb0:	e8 94       	clt
    4eb2:	ca 30       	cpi	r28, 0x0A	; 10
    4eb4:	49 f4       	brne	.+18     	; 0x4ec8 <ltoa+0x2a>
    4eb6:	97 fb       	bst	r25, 7
    4eb8:	3e f4       	brtc	.+14     	; 0x4ec8 <ltoa+0x2a>
    4eba:	90 95       	com	r25
    4ebc:	80 95       	com	r24
    4ebe:	70 95       	com	r23
    4ec0:	61 95       	neg	r22
    4ec2:	7f 4f       	sbci	r23, 0xFF	; 255
    4ec4:	8f 4f       	sbci	r24, 0xFF	; 255
    4ec6:	9f 4f       	sbci	r25, 0xFF	; 255
    4ec8:	2c 2f       	mov	r18, r28
    4eca:	33 27       	eor	r19, r19
    4ecc:	44 27       	eor	r20, r20
    4ece:	55 27       	eor	r21, r21
    4ed0:	ff 93       	push	r31
    4ed2:	ef 93       	push	r30
    4ed4:	0e 94 b2 27 	call	0x4f64	; 0x4f64 <__udivmodsi4>
    4ed8:	ef 91       	pop	r30
    4eda:	ff 91       	pop	r31
    4edc:	60 5d       	subi	r22, 0xD0	; 208
    4ede:	6a 33       	cpi	r22, 0x3A	; 58
    4ee0:	0c f0       	brlt	.+2      	; 0x4ee4 <ltoa+0x46>
    4ee2:	69 5d       	subi	r22, 0xD9	; 217
    4ee4:	61 93       	st	Z+, r22
    4ee6:	b9 01       	movw	r22, r18
    4ee8:	ca 01       	movw	r24, r20
    4eea:	60 50       	subi	r22, 0x00	; 0
    4eec:	70 40       	sbci	r23, 0x00	; 0
    4eee:	80 40       	sbci	r24, 0x00	; 0
    4ef0:	90 40       	sbci	r25, 0x00	; 0
    4ef2:	51 f7       	brne	.-44     	; 0x4ec8 <ltoa+0x2a>
    4ef4:	16 f4       	brtc	.+4      	; 0x4efa <ltoa+0x5c>
    4ef6:	cd e2       	ldi	r28, 0x2D	; 45
    4ef8:	c1 93       	st	Z+, r28
    4efa:	10 82       	st	Z, r1
    4efc:	8f 91       	pop	r24
    4efe:	9f 91       	pop	r25
    4f00:	cf 91       	pop	r28
    4f02:	0c 94 83 27 	jmp	0x4f06	; 0x4f06 <strrev>

00004f06 <strrev>:
    4f06:	dc 01       	movw	r26, r24
    4f08:	fc 01       	movw	r30, r24
    4f0a:	67 2f       	mov	r22, r23
    4f0c:	71 91       	ld	r23, Z+
    4f0e:	77 23       	and	r23, r23
    4f10:	e1 f7       	brne	.-8      	; 0x4f0a <strrev+0x4>
    4f12:	32 97       	sbiw	r30, 0x02	; 2
    4f14:	04 c0       	rjmp	.+8      	; 0x4f1e <strrev+0x18>
    4f16:	7c 91       	ld	r23, X
    4f18:	6d 93       	st	X+, r22
    4f1a:	70 83       	st	Z, r23
    4f1c:	62 91       	ld	r22, -Z
    4f1e:	ae 17       	cp	r26, r30
    4f20:	bf 07       	cpc	r27, r31
    4f22:	c8 f3       	brcs	.-14     	; 0x4f16 <strrev+0x10>
    4f24:	08 95       	ret

00004f26 <__mulsi3>:
    4f26:	62 9f       	mul	r22, r18
    4f28:	d0 01       	movw	r26, r0
    4f2a:	73 9f       	mul	r23, r19
    4f2c:	f0 01       	movw	r30, r0
    4f2e:	82 9f       	mul	r24, r18
    4f30:	e0 0d       	add	r30, r0
    4f32:	f1 1d       	adc	r31, r1
    4f34:	64 9f       	mul	r22, r20
    4f36:	e0 0d       	add	r30, r0
    4f38:	f1 1d       	adc	r31, r1
    4f3a:	92 9f       	mul	r25, r18
    4f3c:	f0 0d       	add	r31, r0
    4f3e:	83 9f       	mul	r24, r19
    4f40:	f0 0d       	add	r31, r0
    4f42:	74 9f       	mul	r23, r20
    4f44:	f0 0d       	add	r31, r0
    4f46:	65 9f       	mul	r22, r21
    4f48:	f0 0d       	add	r31, r0
    4f4a:	99 27       	eor	r25, r25
    4f4c:	72 9f       	mul	r23, r18
    4f4e:	b0 0d       	add	r27, r0
    4f50:	e1 1d       	adc	r30, r1
    4f52:	f9 1f       	adc	r31, r25
    4f54:	63 9f       	mul	r22, r19
    4f56:	b0 0d       	add	r27, r0
    4f58:	e1 1d       	adc	r30, r1
    4f5a:	f9 1f       	adc	r31, r25
    4f5c:	bd 01       	movw	r22, r26
    4f5e:	cf 01       	movw	r24, r30
    4f60:	11 24       	eor	r1, r1
    4f62:	08 95       	ret

00004f64 <__udivmodsi4>:
    4f64:	a1 e2       	ldi	r26, 0x21	; 33
    4f66:	1a 2e       	mov	r1, r26
    4f68:	aa 1b       	sub	r26, r26
    4f6a:	bb 1b       	sub	r27, r27
    4f6c:	fd 01       	movw	r30, r26
    4f6e:	0d c0       	rjmp	.+26     	; 0x4f8a <__udivmodsi4_ep>

00004f70 <__udivmodsi4_loop>:
    4f70:	aa 1f       	adc	r26, r26
    4f72:	bb 1f       	adc	r27, r27
    4f74:	ee 1f       	adc	r30, r30
    4f76:	ff 1f       	adc	r31, r31
    4f78:	a2 17       	cp	r26, r18
    4f7a:	b3 07       	cpc	r27, r19
    4f7c:	e4 07       	cpc	r30, r20
    4f7e:	f5 07       	cpc	r31, r21
    4f80:	20 f0       	brcs	.+8      	; 0x4f8a <__udivmodsi4_ep>
    4f82:	a2 1b       	sub	r26, r18
    4f84:	b3 0b       	sbc	r27, r19
    4f86:	e4 0b       	sbc	r30, r20
    4f88:	f5 0b       	sbc	r31, r21

00004f8a <__udivmodsi4_ep>:
    4f8a:	66 1f       	adc	r22, r22
    4f8c:	77 1f       	adc	r23, r23
    4f8e:	88 1f       	adc	r24, r24
    4f90:	99 1f       	adc	r25, r25
    4f92:	1a 94       	dec	r1
    4f94:	69 f7       	brne	.-38     	; 0x4f70 <__udivmodsi4_loop>
    4f96:	60 95       	com	r22
    4f98:	70 95       	com	r23
    4f9a:	80 95       	com	r24
    4f9c:	90 95       	com	r25
    4f9e:	9b 01       	movw	r18, r22
    4fa0:	ac 01       	movw	r20, r24
    4fa2:	bd 01       	movw	r22, r26
    4fa4:	cf 01       	movw	r24, r30
    4fa6:	08 95       	ret

00004fa8 <__prologue_saves__>:
    4fa8:	2f 92       	push	r2
    4faa:	3f 92       	push	r3
    4fac:	4f 92       	push	r4
    4fae:	5f 92       	push	r5
    4fb0:	6f 92       	push	r6
    4fb2:	7f 92       	push	r7
    4fb4:	8f 92       	push	r8
    4fb6:	9f 92       	push	r9
    4fb8:	af 92       	push	r10
    4fba:	bf 92       	push	r11
    4fbc:	cf 92       	push	r12
    4fbe:	df 92       	push	r13
    4fc0:	ef 92       	push	r14
    4fc2:	ff 92       	push	r15
    4fc4:	0f 93       	push	r16
    4fc6:	1f 93       	push	r17
    4fc8:	cf 93       	push	r28
    4fca:	df 93       	push	r29
    4fcc:	cd b7       	in	r28, 0x3d	; 61
    4fce:	de b7       	in	r29, 0x3e	; 62
    4fd0:	ca 1b       	sub	r28, r26
    4fd2:	db 0b       	sbc	r29, r27
    4fd4:	0f b6       	in	r0, 0x3f	; 63
    4fd6:	f8 94       	cli
    4fd8:	de bf       	out	0x3e, r29	; 62
    4fda:	0f be       	out	0x3f, r0	; 63
    4fdc:	cd bf       	out	0x3d, r28	; 61
    4fde:	09 94       	ijmp

00004fe0 <__epilogue_restores__>:
    4fe0:	2a 88       	ldd	r2, Y+18	; 0x12
    4fe2:	39 88       	ldd	r3, Y+17	; 0x11
    4fe4:	48 88       	ldd	r4, Y+16	; 0x10
    4fe6:	5f 84       	ldd	r5, Y+15	; 0x0f
    4fe8:	6e 84       	ldd	r6, Y+14	; 0x0e
    4fea:	7d 84       	ldd	r7, Y+13	; 0x0d
    4fec:	8c 84       	ldd	r8, Y+12	; 0x0c
    4fee:	9b 84       	ldd	r9, Y+11	; 0x0b
    4ff0:	aa 84       	ldd	r10, Y+10	; 0x0a
    4ff2:	b9 84       	ldd	r11, Y+9	; 0x09
    4ff4:	c8 84       	ldd	r12, Y+8	; 0x08
    4ff6:	df 80       	ldd	r13, Y+7	; 0x07
    4ff8:	ee 80       	ldd	r14, Y+6	; 0x06
    4ffa:	fd 80       	ldd	r15, Y+5	; 0x05
    4ffc:	0c 81       	ldd	r16, Y+4	; 0x04
    4ffe:	1b 81       	ldd	r17, Y+3	; 0x03
    5000:	aa 81       	ldd	r26, Y+2	; 0x02
    5002:	b9 81       	ldd	r27, Y+1	; 0x01
    5004:	ce 0f       	add	r28, r30
    5006:	d1 1d       	adc	r29, r1
    5008:	0f b6       	in	r0, 0x3f	; 63
    500a:	f8 94       	cli
    500c:	de bf       	out	0x3e, r29	; 62
    500e:	0f be       	out	0x3f, r0	; 63
    5010:	cd bf       	out	0x3d, r28	; 61
    5012:	ed 01       	movw	r28, r26
    5014:	08 95       	ret

00005016 <__udivmodhi4>:
    5016:	aa 1b       	sub	r26, r26
    5018:	bb 1b       	sub	r27, r27
    501a:	51 e1       	ldi	r21, 0x11	; 17
    501c:	07 c0       	rjmp	.+14     	; 0x502c <__udivmodhi4_ep>

0000501e <__udivmodhi4_loop>:
    501e:	aa 1f       	adc	r26, r26
    5020:	bb 1f       	adc	r27, r27
    5022:	a6 17       	cp	r26, r22
    5024:	b7 07       	cpc	r27, r23
    5026:	10 f0       	brcs	.+4      	; 0x502c <__udivmodhi4_ep>
    5028:	a6 1b       	sub	r26, r22
    502a:	b7 0b       	sbc	r27, r23

0000502c <__udivmodhi4_ep>:
    502c:	88 1f       	adc	r24, r24
    502e:	99 1f       	adc	r25, r25
    5030:	5a 95       	dec	r21
    5032:	a9 f7       	brne	.-22     	; 0x501e <__udivmodhi4_loop>
    5034:	80 95       	com	r24
    5036:	90 95       	com	r25
    5038:	bc 01       	movw	r22, r24
    503a:	cd 01       	movw	r24, r26
    503c:	08 95       	ret

0000503e <_exit>:
    503e:	f8 94       	cli

00005040 <__stop_program>:
    5040:	ff cf       	rjmp	.-2      	; 0x5040 <__stop_program>
